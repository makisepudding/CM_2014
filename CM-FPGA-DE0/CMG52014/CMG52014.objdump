
CMG52014.elf:     file format elf32-littlenios2
CMG52014.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000ddfc memsz 0x0000ddfc flags r-x
    LOAD off    0x0000ee1c vaddr 0x0000de1c paddr 0x0000fb0c align 2**12
         filesz 0x00001cf0 memsz 0x00001cf0 flags rw-
    LOAD off    0x000117fc vaddr 0x000117fc paddr 0x000117fc align 2**12
         filesz 0x00000000 memsz 0x000002fc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d7dc  000001bc  000001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000484  0000d998  0000d998  0000e998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cf0  0000de1c  0000fb0c  0000ee1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002fc  000117fc  000117fc  000117fc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010b0c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000dc0  00000000  00000000  00010b30  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002523d  00000000  00000000  000118f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000095f5  00000000  00000000  00036b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000acad  00000000  00000000  00040122  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001b60  00000000  00000000  0004add0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003144  00000000  00000000  0004c930  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001154e  00000000  00000000  0004fa74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00060fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  00060fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00064fc1  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00064fc4  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00064fc7  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00064fc8  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00064fc9  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00064fcd  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00064fd1  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00064fd5  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00064fde  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00064fe7  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00064ff0  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002f  00000000  00000000  00064ffb  2**0
                  CONTENTS, READONLY
 28 .jdi          00004de3  00000000  00000000  0006502a  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000a1eeb  00000000  00000000  00069e0d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001bc l    d  .text	00000000 .text
0000d998 l    d  .rodata	00000000 .rodata
0000de1c l    d  .rwdata	00000000 .rwdata
000117fc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CMG52014_bsp//obj/HAL/src/crt0.o
000001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 DE0.c
00000000 l    df *ABS*	00000000 cm.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000015a8 l     F .text	00000034 __sprint_r
0000da36 l     O .rodata	00000010 blanks.3515
0000da46 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000035f0 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005060 l     F .text	00000008 __fp_lock
00005068 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000de1c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0000da7c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000dbc4 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
000099d4 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000a714 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000aea8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000afc4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000aff0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000b0f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b1e4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000b2d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b4ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000fafc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000b720 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b860 l     F .text	00000038 alt_dev_reg
0000e7d8 l     O .rwdata	00001060 JTAG_UART
0000f838 l     O .rwdata	0000002c dc_mot_DIR
0000f864 l     O .rwdata	0000002c dc_mot_PWM_SEL
0000f890 l     O .rwdata	0000002c dc_mot_STOP
0000f8bc l     O .rwdata	0000002c Expansion_JP2
0000f8e8 l     O .rwdata	0000002c HEX3_HEX0
0000f914 l     O .rwdata	0000002c msp430
0000f940 l     O .rwdata	0000002c Pushbuttons
0000f96c l     O .rwdata	0000002c raspi
0000f998 l     O .rwdata	0000002c servo_pos_0
0000f9c4 l     O .rwdata	0000002c servo_pos_1
0000f9f0 l     O .rwdata	0000002c Slider_switches
0000fa1c l     O .rwdata	0000002c step_DIR
0000fa48 l     O .rwdata	0000002c step_PWM
0000fa74 l     O .rwdata	0000002c step_STOP
0000faa0 l     O .rwdata	0000002c Serial_port
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000bbf8 l     F .text	00000208 altera_avalon_jtag_uart_irq
0000be00 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000c43c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ca2c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000cc80 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000cf88 l     F .text	00000050 alt_get_errno
0000cfd8 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0000085c g     F .text	00000110 MACHINE
000014c8 g     F .text	0000001c putchar
00007b20 g     F .text	00000074 _mprec_log10
00007c10 g     F .text	00000084 __any_on
00008c20 g     F .text	00000064 _isatty_r
0000daac g     O .rodata	00000028 __mprec_tinytens
0000b3f4 g     F .text	00000078 alt_main
0000ae64 g     F .text	00000044 __ashldi3
00011868 g     O .bss	00000100 alt_irq
00008c84 g     F .text	0000006c _lseek_r
00000780 g     F .text	00000094 RESET
0000fb0c g       *ABS*	00000000 __flash_rwdata_start
0000a274 g     F .text	0000005c __eqdf2
00011af8 g       *ABS*	00000000 __alt_heap_start
00001484 g     F .text	0000003c printf
000085e0 g     F .text	0000005c __sseek
00005104 g     F .text	0000010c __sinit
00008774 g     F .text	0000013c __swbuf_r
00005d9c g     F .text	0000009c _setlocale_r
00011804 g     O .bss	00000001 BALL_WAIT_FLAG
0000507c g     F .text	00000078 __sfmoreglue
0000b48c g     F .text	00000020 __malloc_unlock
0000c750 g     F .text	000000a0 alt_up_rs232_read_fd
000069dc g     F .text	0000018c memmove
000050f4 g     F .text	00000010 _cleanup
00006c44 g     F .text	000000a8 _Balloc
00000688 g     F .text	000000f8 INIT_GPIO
0000a32c g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008bb8 g     F .text	00000068 _fstat_r
00011824 g     O .bss	00000004 errno
0001182c g     O .bss	00000004 alt_argv
00017acc g       *ABS*	00000000 _gp
0000023c g     F .text	00000178 INT_7SEG
0000e658 g     O .rwdata	00000180 alt_fd_list
000014c0 g     F .text	00000008 _putchar_r
0000cbd4 g     F .text	00000090 alt_find_dev
0000689c g     F .text	00000140 memcpy
00005070 g     F .text	0000000c _cleanup_r
0000a450 g     F .text	000000d4 __floatsidf
0000cd60 g     F .text	00000078 alt_io_redirect
0000a3f4 g     F .text	0000005c __ltdf2
0000d998 g       *ABS*	00000000 __DTOR_END__
0000c6dc g     F .text	00000074 alt_up_rs232_read_data
00007a7c g     F .text	000000a4 __ratio
0000c000 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00001458 g     F .text	0000002c _printf_r
0000a834 g     F .text	00000008 __udivsi3
0000b140 g     F .text	000000a4 isatty
0000dafc g     O .rodata	000000c8 __mprec_tens
00005e38 g     F .text	0000000c __locale_charset
00011820 g     O .bss	00000004 __malloc_top_pad
0000fad8 g     O .rwdata	00000004 __mb_cur_max
00005e44 g     F .text	0000000c _localeconv_r
00000f40 g     F .text	00000078 STEPPER
00007074 g     F .text	0000003c __i2b
00005758 g     F .text	000004e4 __sfvwrite_r
000084a0 g     F .text	00000064 _sbrk_r
00008cf0 g     F .text	0000006c _read_r
0000e21c g     O .rwdata	0000000c __lc_ctype
0000faf4 g     O .rwdata	00000004 alt_max_fd
0000c65c g     F .text	00000044 alt_up_rs232_check_parity
0000ac4c g     F .text	00000104 __unpack_d
00008a68 g     F .text	0000013c _fclose_r
00005030 g     F .text	00000030 fflush
0001181c g     O .bss	00000004 __malloc_max_sbrked_mem
0000cdd8 g     F .text	000001b0 alt_irq_register
00009d28 g     F .text	00000054 __adddf3
000077f0 g     F .text	00000148 __b2d
00000afc g     F .text	0000016c STATE_3
000093ac g     F .text	00000628 __umoddi3
00000e70 g     F .text	00000058 SERVO
0000b320 g     F .text	000000d4 lseek
0000fad0 g     O .rwdata	00000004 _global_impure_ptr
00007e40 g     F .text	000005fc _realloc_r
00011af8 g       *ABS*	00000000 __bss_end
0000d2b8 g     F .text	00000104 alt_tick
00008d5c g     F .text	00000650 __udivdi3
0000dad4 g     O .rodata	00000028 __mprec_bigtens
00006e58 g     F .text	00000104 __s2b
00000a4c g     F .text	000000b0 STATE_2
0000a5f8 g     F .text	0000011c __floatunsidf
00007590 g     F .text	00000058 __mcmp
0000531c g     F .text	00000018 __fp_lock_all
00000ec8 g     F .text	00000078 DC_MOT
0000d220 g     F .text	00000098 alt_alarm_stop
000117fc g     O .bss	00000004 DEBUG_MSP
00011834 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000d0 alt_irq_handler
0000e630 g     O .rwdata	00000028 alt_dev_null
00000814 g     F .text	00000048 READY
0000ca10 g     F .text	0000001c alt_dcache_flush_all
00006f5c g     F .text	00000068 __hi0bits
0000a524 g     F .text	000000d4 __fixdfsi
0000fb0c g       *ABS*	00000000 __ram_rwdata_end
0000faec g     O .rwdata	00000008 alt_dev_list
0000b770 g     F .text	000000f0 write
00007c94 g     F .text	000000bc _putc_r
0000de1c g       *ABS*	00000000 __ram_rodata_end
00011800 g     O .bss	00000004 DEBUG
0000b040 g     F .text	000000b0 fstat
0000c7f0 g     F .text	000000a0 alt_up_rs232_write_fd
0000ae20 g     F .text	00000044 __lshrdi3
00007308 g     F .text	0000012c __pow5mult
00011814 g     O .bss	00000004 __nlocale_changed
0000a83c g     F .text	00000008 __umodsi3
00000d54 g     F .text	0000009c STATE_6
08000000 g       *ABS*	00000000 __alt_mem_Onchip_memory_SRAM
00011af8 g       *ABS*	00000000 end
00000c68 g     F .text	00000070 STATE_4
0000bb44 g     F .text	000000b4 altera_avalon_jtag_uart_init
0000d998 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000c4b4 g     F .text	00000080 alt_avalon_timer_sc_init
0000a97c g     F .text	000000ac __clzsi2
0000c218 g     F .text	00000224 altera_avalon_jtag_uart_write
0000530c g     F .text	00000004 __sfp_lock_acquire
000067a4 g     F .text	000000f8 memchr
000015dc g     F .text	00001e7c ___vfprintf_internal_r
000014e4 g     F .text	00000058 _sprintf_r
00005488 g     F .text	000002d0 _free_r
0000d7bc g     F .text	000001a0 __call_exitprocs
00011810 g     O .bss	00000004 __mlocale_changed
0000fadc g     O .rwdata	00000004 __malloc_sbrk_base
000001bc g     F .text	0000003c _start
00011838 g     O .bss	00000004 _alt_tick_rate
0000facc g     O .rwdata	00000001 STATE
00007434 g     F .text	0000015c __lshift
0001183c g     O .bss	00000004 _alt_nticks
0000b4fc g     F .text	000000f4 read
0000b8cc g     F .text	00000114 alt_sys_init
0000d68c g     F .text	00000130 __register_exitproc
0000c620 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
000070b0 g     F .text	00000258 __multiply
0000bea4 g     F .text	00000068 altera_avalon_jtag_uart_close
0000a844 g     F .text	00000028 __mulsi3
0000de1c g       *ABS*	00000000 __ram_rwdata_start
0000d998 g       *ABS*	00000000 __ram_rodata_start
00011840 g     O .bss	00000028 __malloc_current_mallinfo
00007938 g     F .text	00000144 __d2b
0000b9e0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000d4f0 g     F .text	000000d4 alt_get_fd
0000ad50 g     F .text	000000d0 __fpcmp_parts_d
00008a04 g     F .text	00000064 _close_r
000005e4 g     F .text	000000a4 digitalRead_GPIO
0000d610 g     F .text	0000007c memcmp
0000baa0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00011af8 g       *ABS*	00000000 __alt_stack_base
0000baf0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000347c g     F .text	00000174 __swsetup_r
0000a0c0 g     F .text	000001b4 __divdf3
00005210 g     F .text	000000fc __sfp
00007b94 g     F .text	0000007c __copybits
00000cd8 g     F .text	0000007c STATE_5
0000e228 g     O .rwdata	00000408 __malloc_av_
00005318 g     F .text	00000004 __sinit_lock_release
00009ddc g     F .text	000002e4 __muldf3
00008504 g     F .text	00000054 __sread
0000c588 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
0000d3dc g     F .text	00000114 alt_find_file
0000ca7c g     F .text	000000a0 alt_dev_llist_insert
0000b46c g     F .text	00000020 __malloc_lock
0000b670 g     F .text	000000b0 sbrk
00004e48 g     F .text	000001e8 _fflush_r
00008938 g     F .text	000000cc _calloc_r
000117fc g       *ABS*	00000000 __bss_start
00006b68 g     F .text	000000dc memset
00000fb8 g     F .text	000004a0 main
00011830 g     O .bss	00000004 alt_envp
00011818 g     O .bss	00000004 __malloc_max_total_mem
0000ba40 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000088b0 g     F .text	0000001c __swbuf
0000863c g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00008ba4 g     F .text	00000014 fclose
00011968 g     O .bss	00000190 _atexit0
0000382c g     F .text	0000161c _dtoa_r
00006020 g     F .text	00000784 _malloc_r
0000faf8 g     O .rwdata	00000004 alt_errno
00005c3c g     F .text	000000a8 _fwalk
00007d50 g     F .text	000000f0 putc
0000a788 g     F .text	00000050 __divsi3
0000dbd0 g     O .rodata	00000014 __thenan_df
0000534c g     F .text	0000013c _malloc_trim_r
0000d998 g       *ABS*	00000000 __CTOR_END__
00008644 g     F .text	000000a4 strcmp
0000d998 g       *ABS*	00000000 __flash_rodata_start
0000d998 g       *ABS*	00000000 __DTOR_LIST__
0000c890 g     F .text	00000040 alt_up_rs232_open_dev
0000a2d0 g     F .text	0000005c __nedf2
0000b898 g     F .text	00000034 alt_irq_init
0000b5f0 g     F .text	00000080 alt_release_fd
0000153c g     F .text	0000006c sprintf
0000dbe4 g     O .rodata	00000100 __clz_tab
0001180c g     O .bss	00000004 _PathLocale
0000d5c4 g     F .text	00000014 atexit
000088cc g     F .text	0000006c _write_r
00005e50 g     F .text	0000001c setlocale
000001f8 g     F .text	00000044 DELAY_CYCLES
0000fad4 g     O .rwdata	00000004 _impure_ptr
00011828 g     O .bss	00000004 alt_argc
0000050c g     F .text	000000d8 digitalWrite_GPIO
0000cb78 g     F .text	0000005c _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00007790 g     F .text	00000060 __ulp
0000843c g     F .text	00000038 __isinfd
00005334 g     F .text	00000018 __fp_unlock_all
0000fae4 g     O .rwdata	00000008 alt_fs_list
0000096c g     F .text	000000e0 STATE_1
0000c534 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
00011808 g     O .bss	00000004 POLL_COUNT
0000c6a0 g     F .text	0000003c alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005e6c g     F .text	0000000c localeconv
0000fb0c g       *ABS*	00000000 _edata
00011af8 g       *ABS*	00000000 _end
000001bc g       *ABS*	00000000 __ram_exceptions_end
0000bf0c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00008558 g     F .text	00000088 __swrite
0000fae0 g     O .rwdata	00000004 __malloc_trim_threshold
0000d3bc g     F .text	00000020 altera_nios2_qsys_irq_init
0000d5d8 g     F .text	00000038 exit
00005ce4 g     F .text	000000b8 _fwalk_reent
000075e8 g     F .text	000001a8 __mdiff
0000a7d8 g     F .text	0000005c __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00005310 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000d95c g     F .text	0000003c _exit
00008474 g     F .text	0000002c __isnand
0000c8d0 g     F .text	00000140 alt_alarm_start
0000a86c g     F .text	00000110 __muldi3
00005e78 g     F .text	000001a8 __smakebuf_r
000086e8 g     F .text	0000008c strlen
0000d0c8 g     F .text	00000158 open
0000a390 g     F .text	00000064 __gedf2
000003b4 g     F .text	00000158 SEG_OUT
00000df0 g     F .text	00000080 STATE_7
0000cc64 g     F .text	0000001c alt_icache_flush_all
0000fb00 g     O .rwdata	00000004 alt_priority_mask
00003458 g     F .text	00000024 __vfprintf_internal
00009d7c g     F .text	00000060 __subdf3
00006fc4 g     F .text	000000b0 __lo0bits
0000fb04 g     O .rwdata	00000008 alt_alarm_list
0000cb1c g     F .text	0000005c _do_ctors
09000000 g       *ABS*	00000000 __alt_mem_Onchip_memory
0000c5e0 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000aef8 g     F .text	000000cc close
0000b250 g     F .text	00000080 alt_load
0000aa28 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
00005314 g     F .text	00000004 __sinit_lock_acquire
00006d14 g     F .text	00000144 __multadd
00006cec g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406f14 	ori	at,at,444
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001826 	beq	r2,zero,18c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 12c:	00c00074 	movhi	r3,1
 130:	18c61a04 	addi	r3,r3,6248
 134:	e0bffd17 	ldw	r2,-12(fp)
 138:	100490fa 	slli	r2,r2,3
 13c:	1885883a 	add	r2,r3,r2
 140:	10c00017 	ldw	r3,0(r2)
 144:	01000074 	movhi	r4,1
 148:	21061a04 	addi	r4,r4,6248
 14c:	e0bffd17 	ldw	r2,-12(fp)
 150:	100490fa 	slli	r2,r2,3
 154:	2085883a 	add	r2,r4,r2
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	e17ffd17 	ldw	r5,-12(fp)
 168:	183ee83a 	callr	r3
#endif
        break;
 16c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 170:	0005313a 	rdctl	r2,ipending
 174:	e0bfff15 	stw	r2,-4(fp)

  return active;
 178:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 17c:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 180:	e0bffb17 	ldw	r2,-20(fp)
 184:	103fe21e 	bne	r2,zero,110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 188:	00000706 	br	1a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fdd06 	br	11c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a8:	e037883a 	mov	sp,fp
 1ac:	dfc00117 	ldw	ra,4(sp)
 1b0:	df000017 	ldw	fp,0(sp)
 1b4:	dec00204 	addi	sp,sp,8
 1b8:	f800283a 	ret

Disassembly of section .text:

000001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1bc:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1c4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c8:	d69eb314 	ori	gp,gp,31436
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1cc:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d0:	1085ff14 	ori	r2,r2,6140

    movhi r3, %hi(__bss_end)
     1d4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d8:	18c6be14 	ori	r3,r3,6904

    beq r2, r3, 1f
     1dc:	10c00326 	beq	r2,r3,1ec <_start+0x30>

0:
    stw zero, (r2)
     1e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e8:	10fffd36 	bltu	r2,r3,1e0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1ec:	000b2500 	call	b250 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f0:	000b3f40 	call	b3f4 <alt_main>

000001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f4:	003fff06 	br	1f4 <alt_after_alt_main>

000001f8 <DELAY_CYCLES>:
	 * FUNCTION: DELAY_CYCLES(unsigned long x)
	 * > Return Logic Boolean, when delay is done, will return TRUE
	 * DESP:
	 * 	unsigned long x: number of clock cycle delay
	 ****************************************************************************************************************/
	  extern bool DELAY_CYCLES(unsigned long x){
     1f8:	defffd04 	addi	sp,sp,-12
     1fc:	df000215 	stw	fp,8(sp)
     200:	df000204 	addi	fp,sp,8
     204:	e13fff15 	stw	r4,-4(fp)
		  unsigned long delay_i;
		  for(delay_i = 0; delay_i <= x; ++delay_i){};
     208:	e03ffe15 	stw	zero,-8(fp)
     20c:	00000306 	br	21c <DELAY_CYCLES+0x24>
     210:	e0bffe17 	ldw	r2,-8(fp)
     214:	10800044 	addi	r2,r2,1
     218:	e0bffe15 	stw	r2,-8(fp)
     21c:	e0bffe17 	ldw	r2,-8(fp)
     220:	e0ffff17 	ldw	r3,-4(fp)
     224:	18bffa2e 	bgeu	r3,r2,210 <DELAY_CYCLES+0x18>
		  return TRUE;
     228:	00800044 	movi	r2,1
	  }
     22c:	e037883a 	mov	sp,fp
     230:	df000017 	ldw	fp,0(sp)
     234:	dec00104 	addi	sp,sp,4
     238:	f800283a 	ret

0000023c <INT_7SEG>:
	 * FUNCTION: INT_7SEG(char x)
	 * > Return integer value that translated into 7segment binary
	 * DESP:
	 * char x: value to display on 7segment 0<->F
	 ****************************************************************************************************************/
	  long INT_7SEG(char x){
     23c:	defffd04 	addi	sp,sp,-12
     240:	df000215 	stw	fp,8(sp)
     244:	df000204 	addi	fp,sp,8
     248:	2005883a 	mov	r2,r4
     24c:	e0bfff05 	stb	r2,-4(fp)
		  long seg;
			switch (x){
     250:	e0bfff07 	ldb	r2,-4(fp)
     254:	10bff404 	addi	r2,r2,-48
     258:	10c005e8 	cmpgeui	r3,r2,23
     25c:	18004e1e 	bne	r3,zero,398 <INT_7SEG+0x15c>
     260:	1085883a 	add	r2,r2,r2
     264:	1087883a 	add	r3,r2,r2
     268:	00800034 	movhi	r2,0
     26c:	10809f04 	addi	r2,r2,636
     270:	1885883a 	add	r2,r3,r2
     274:	10800017 	ldw	r2,0(r2)
     278:	1000683a 	jmp	r2
     27c:	000002d8 	cmpnei	zero,zero,11
     280:	000002e4 	muli	zero,zero,11
     284:	000002f0 	cmpltui	zero,zero,11
     288:	000002fc 	xorhi	zero,zero,11
     28c:	00000308 	cmpgei	zero,zero,12
     290:	00000314 	movui	zero,12
     294:	00000320 	cmpeqi	zero,zero,12
     298:	0000032c 	andhi	zero,zero,12
     29c:	00000338 	rdprs	zero,zero,12
     2a0:	00000344 	movi	zero,13
     2a4:	00000398 	cmpnei	zero,zero,14
     2a8:	00000398 	cmpnei	zero,zero,14
     2ac:	00000398 	cmpnei	zero,zero,14
     2b0:	00000398 	cmpnei	zero,zero,14
     2b4:	00000398 	cmpnei	zero,zero,14
     2b8:	00000398 	cmpnei	zero,zero,14
     2bc:	00000398 	cmpnei	zero,zero,14
     2c0:	00000350 	cmplti	zero,zero,13
     2c4:	0000035c 	xori	zero,zero,13
     2c8:	00000368 	cmpgeui	zero,zero,13
     2cc:	00000374 	movhi	zero,13
     2d0:	00000380 	call	38 <__flash_exceptions_start+0x18>
     2d4:	0000038c 	andi	zero,zero,14
			case '0': seg = 0x3F; break;
     2d8:	00800fc4 	movi	r2,63
     2dc:	e0bffe15 	stw	r2,-8(fp)
     2e0:	00002f06 	br	3a0 <INT_7SEG+0x164>
			case '1': seg = 0x06; break;
     2e4:	00800184 	movi	r2,6
     2e8:	e0bffe15 	stw	r2,-8(fp)
     2ec:	00002c06 	br	3a0 <INT_7SEG+0x164>
			case '2': seg = 0x5B; break;
     2f0:	008016c4 	movi	r2,91
     2f4:	e0bffe15 	stw	r2,-8(fp)
     2f8:	00002906 	br	3a0 <INT_7SEG+0x164>
			case '3': seg = 0x4F; break;
     2fc:	008013c4 	movi	r2,79
     300:	e0bffe15 	stw	r2,-8(fp)
     304:	00002606 	br	3a0 <INT_7SEG+0x164>
			case '4': seg = 0x66; break;
     308:	00801984 	movi	r2,102
     30c:	e0bffe15 	stw	r2,-8(fp)
     310:	00002306 	br	3a0 <INT_7SEG+0x164>
			case '5': seg = 0x6D; break;
     314:	00801b44 	movi	r2,109
     318:	e0bffe15 	stw	r2,-8(fp)
     31c:	00002006 	br	3a0 <INT_7SEG+0x164>
			case '6': seg = 0x7D; break;
     320:	00801f44 	movi	r2,125
     324:	e0bffe15 	stw	r2,-8(fp)
     328:	00001d06 	br	3a0 <INT_7SEG+0x164>
			case '7': seg = 0x07; break;
     32c:	008001c4 	movi	r2,7
     330:	e0bffe15 	stw	r2,-8(fp)
     334:	00001a06 	br	3a0 <INT_7SEG+0x164>
			case '8': seg = 0x7F; break;
     338:	00801fc4 	movi	r2,127
     33c:	e0bffe15 	stw	r2,-8(fp)
     340:	00001706 	br	3a0 <INT_7SEG+0x164>
			case '9': seg = 0x6F; break;
     344:	00801bc4 	movi	r2,111
     348:	e0bffe15 	stw	r2,-8(fp)
     34c:	00001406 	br	3a0 <INT_7SEG+0x164>
			case 'A': seg = 0x77; break;
     350:	00801dc4 	movi	r2,119
     354:	e0bffe15 	stw	r2,-8(fp)
     358:	00001106 	br	3a0 <INT_7SEG+0x164>
			case 'B': seg = 0x7C; break;
     35c:	00801f04 	movi	r2,124
     360:	e0bffe15 	stw	r2,-8(fp)
     364:	00000e06 	br	3a0 <INT_7SEG+0x164>
			case 'C': seg = 0x39; break;
     368:	00800e44 	movi	r2,57
     36c:	e0bffe15 	stw	r2,-8(fp)
     370:	00000b06 	br	3a0 <INT_7SEG+0x164>
			case 'D': seg = 0x5E; break;
     374:	00801784 	movi	r2,94
     378:	e0bffe15 	stw	r2,-8(fp)
     37c:	00000806 	br	3a0 <INT_7SEG+0x164>
			case 'E': seg = 0x79; break;
     380:	00801e44 	movi	r2,121
     384:	e0bffe15 	stw	r2,-8(fp)
     388:	00000506 	br	3a0 <INT_7SEG+0x164>
			case 'F': seg = 0x71; break;
     38c:	00801c44 	movi	r2,113
     390:	e0bffe15 	stw	r2,-8(fp)
     394:	00000206 	br	3a0 <INT_7SEG+0x164>
			default:
				seg = 0x00; break;
     398:	e03ffe15 	stw	zero,-8(fp)
     39c:	0001883a 	nop
			}
			return seg;
     3a0:	e0bffe17 	ldw	r2,-8(fp)
		}
     3a4:	e037883a 	mov	sp,fp
     3a8:	df000017 	ldw	fp,0(sp)
     3ac:	dec00104 	addi	sp,sp,4
     3b0:	f800283a 	ret

000003b4 <SEG_OUT>:
	 * int x				: value to ouput as on four 7segments
	 * unsigned int base	: 	#define DEC 0x10    ;    #define HEX 0x11
	 * bool state			: Switch On/Off 7segments
	 ****************************************************************************************************************/

	  int SEG_OUT(int x, unsigned int base, bool state){
     3b4:	defff304 	addi	sp,sp,-52
     3b8:	dfc00c15 	stw	ra,48(sp)
     3bc:	df000b15 	stw	fp,44(sp)
     3c0:	df000b04 	addi	fp,sp,44
     3c4:	e13ffd15 	stw	r4,-12(fp)
     3c8:	e17ffe15 	stw	r5,-8(fp)
     3cc:	e1bfff15 	stw	r6,-4(fp)
	  	char data[4];
	  	if(state){
     3d0:	e0bfff17 	ldw	r2,-4(fp)
     3d4:	10001426 	beq	r2,zero,428 <SEG_OUT+0x74>
	  		if(base == 0x10)
     3d8:	e0bffe17 	ldw	r2,-8(fp)
     3dc:	10800418 	cmpnei	r2,r2,16
     3e0:	1000071e 	bne	r2,zero,400 <SEG_OUT+0x4c>
	  			sprintf((char *)data, "%04d",x); // as DEC
     3e4:	e0bff804 	addi	r2,fp,-32
     3e8:	1009883a 	mov	r4,r2
     3ec:	01400074 	movhi	r5,1
     3f0:	29766604 	addi	r5,r5,-9832
     3f4:	e1bffd17 	ldw	r6,-12(fp)
     3f8:	000153c0 	call	153c <sprintf>
     3fc:	00001006 	br	440 <SEG_OUT+0x8c>
	  		else if(base == 0x11 )
     400:	e0bffe17 	ldw	r2,-8(fp)
     404:	10800458 	cmpnei	r2,r2,17
     408:	10000d1e 	bne	r2,zero,440 <SEG_OUT+0x8c>
	  			sprintf((char *)data, "%04X",x); // as HEX
     40c:	e0bff804 	addi	r2,fp,-32
     410:	1009883a 	mov	r4,r2
     414:	01400074 	movhi	r5,1
     418:	29766804 	addi	r5,r5,-9824
     41c:	e1bffd17 	ldw	r6,-12(fp)
     420:	000153c0 	call	153c <sprintf>
     424:	00000606 	br	440 <SEG_OUT+0x8c>
	  		else{};
	  		}
	  	else{
	  		sprintf((char *)data, "%c",'G'); // as HEX SWITCH OFF
     428:	e0bff804 	addi	r2,fp,-32
     42c:	1009883a 	mov	r4,r2
     430:	01400074 	movhi	r5,1
     434:	29766a04 	addi	r5,r5,-9816
     438:	018011c4 	movi	r6,71
     43c:	000153c0 	call	153c <sprintf>
	  	}

	  	long HEX_DATA[4];
	  	int i,j;
	  	long sum = 0x00000000;
     440:	e03ff615 	stw	zero,-40(fp)

	  	for(i = 3; i >=0 ; --i){
     444:	008000c4 	movi	r2,3
     448:	e0bff515 	stw	r2,-44(fp)
     44c:	00001806 	br	4b0 <SEG_OUT+0xfc>
	  		j = 3-i;
     450:	00c000c4 	movi	r3,3
     454:	e0bff517 	ldw	r2,-44(fp)
     458:	1885c83a 	sub	r2,r3,r2
     45c:	e0bff715 	stw	r2,-36(fp)
	  		HEX_DATA[i] = INT_7SEG(data[j]);
     460:	e0fff804 	addi	r3,fp,-32
     464:	e0bff717 	ldw	r2,-36(fp)
     468:	1885883a 	add	r2,r3,r2
     46c:	10800003 	ldbu	r2,0(r2)
     470:	10803fcc 	andi	r2,r2,255
     474:	1080201c 	xori	r2,r2,128
     478:	10bfe004 	addi	r2,r2,-128
     47c:	1009883a 	mov	r4,r2
     480:	000023c0 	call	23c <INT_7SEG>
     484:	1007883a 	mov	r3,r2
     488:	e0bff517 	ldw	r2,-44(fp)
     48c:	1085883a 	add	r2,r2,r2
     490:	1085883a 	add	r2,r2,r2
     494:	e13ff504 	addi	r4,fp,-44
     498:	2085883a 	add	r2,r4,r2
     49c:	10800404 	addi	r2,r2,16
     4a0:	10c00015 	stw	r3,0(r2)

	  	long HEX_DATA[4];
	  	int i,j;
	  	long sum = 0x00000000;

	  	for(i = 3; i >=0 ; --i){
     4a4:	e0bff517 	ldw	r2,-44(fp)
     4a8:	10bfffc4 	addi	r2,r2,-1
     4ac:	e0bff515 	stw	r2,-44(fp)
     4b0:	e0bff517 	ldw	r2,-44(fp)
     4b4:	103fe60e 	bge	r2,zero,450 <SEG_OUT+0x9c>
	  		j = 3-i;
	  		HEX_DATA[i] = INT_7SEG(data[j]);
	  	}
	  	sum = (HEX_DATA[3]  <<24) + (HEX_DATA[2]  <<16) + (HEX_DATA[1] <<8) + HEX_DATA[0];
     4b8:	e0bffc17 	ldw	r2,-16(fp)
     4bc:	1006963a 	slli	r3,r2,24
     4c0:	e0bffb17 	ldw	r2,-20(fp)
     4c4:	1004943a 	slli	r2,r2,16
     4c8:	1887883a 	add	r3,r3,r2
     4cc:	e0bffa17 	ldw	r2,-24(fp)
     4d0:	1004923a 	slli	r2,r2,8
     4d4:	1887883a 	add	r3,r3,r2
     4d8:	e0bff917 	ldw	r2,-28(fp)
     4dc:	1885883a 	add	r2,r3,r2
     4e0:	e0bff615 	stw	r2,-40(fp)
	  	*(HEX3_HEX0_ptr) = sum;
     4e4:	00840034 	movhi	r2,4096
     4e8:	10800804 	addi	r2,r2,32
     4ec:	e0fff617 	ldw	r3,-40(fp)
     4f0:	10c00015 	stw	r3,0(r2)
	  	return sum;
     4f4:	e0bff617 	ldw	r2,-40(fp)
	  }
     4f8:	e037883a 	mov	sp,fp
     4fc:	dfc00117 	ldw	ra,4(sp)
     500:	df000017 	ldw	fp,0(sp)
     504:	dec00204 	addi	sp,sp,8
     508:	f800283a 	ret

0000050c <digitalWrite_GPIO>:
	 * > Must set pinMode_GPIO(PIN, OUTPUT) as OUTPUT
	 * DESP:
	 * 	unsigned char PIN		: control which LED on the DE0 board, i.e. x = LEDG1; LEDG1 on the board will be selected
	 * 	bool state				: Either Switch HIGH/LOW on the specified LED
	 ****************************************************************************************************************/
	  extern bool digitalWrite_GPIO(unsigned char PIN, bool state, unsigned char OFFSET){
     50c:	defffb04 	addi	sp,sp,-20
     510:	df000415 	stw	fp,16(sp)
     514:	df000404 	addi	fp,sp,16
     518:	2007883a 	mov	r3,r4
     51c:	e17ffe15 	stw	r5,-8(fp)
     520:	3005883a 	mov	r2,r6
     524:	e0fffd05 	stb	r3,-12(fp)
     528:	e0bfff05 	stb	r2,-4(fp)

		unsigned char temp_J2 		 = *(ADDR_JP2PORT + OFFSET)          ; //Address PTR
     52c:	e0ffff03 	ldbu	r3,-4(fp)
     530:	00840034 	movhi	r2,4096
     534:	10801c04 	addi	r2,r2,112
     538:	1885883a 	add	r2,r3,r2
     53c:	10800003 	ldbu	r2,0(r2)
     540:	e0bffc05 	stb	r2,-16(fp)
		*(ADDR_JP2PORT + OFFSET + 4) = *(ADDR_JP2PORT + OFFSET + 4) | PIN; //SET PIN BIT AS OUTPUT
     544:	e0bfff03 	ldbu	r2,-4(fp)
     548:	10c00104 	addi	r3,r2,4
     54c:	00840034 	movhi	r2,4096
     550:	10801c04 	addi	r2,r2,112
     554:	1885883a 	add	r2,r3,r2
     558:	e0ffff03 	ldbu	r3,-4(fp)
     55c:	19000104 	addi	r4,r3,4
     560:	00c40034 	movhi	r3,4096
     564:	18c01c04 	addi	r3,r3,112
     568:	20c7883a 	add	r3,r4,r3
     56c:	19000003 	ldbu	r4,0(r3)
     570:	e0fffd03 	ldbu	r3,-12(fp)
     574:	20c6b03a 	or	r3,r4,r3
     578:	10c00005 	stb	r3,0(r2)

	  	if(state)	*(ADDR_JP2PORT + OFFSET) = temp_J2 |  PIN;
     57c:	e0bffe17 	ldw	r2,-8(fp)
     580:	10000926 	beq	r2,zero,5a8 <digitalWrite_GPIO+0x9c>
     584:	e0ffff03 	ldbu	r3,-4(fp)
     588:	00840034 	movhi	r2,4096
     58c:	10801c04 	addi	r2,r2,112
     590:	1885883a 	add	r2,r3,r2
     594:	e13ffc03 	ldbu	r4,-16(fp)
     598:	e0fffd03 	ldbu	r3,-12(fp)
     59c:	20c6b03a 	or	r3,r4,r3
     5a0:	10c00005 	stb	r3,0(r2)
     5a4:	00000a06 	br	5d0 <digitalWrite_GPIO+0xc4>
	  	else	    *(ADDR_JP2PORT + OFFSET) = temp_J2 &~ PIN;
     5a8:	e0ffff03 	ldbu	r3,-4(fp)
     5ac:	00840034 	movhi	r2,4096
     5b0:	10801c04 	addi	r2,r2,112
     5b4:	1885883a 	add	r2,r3,r2
     5b8:	e0fffd03 	ldbu	r3,-12(fp)
     5bc:	00c6303a 	nor	r3,zero,r3
     5c0:	1809883a 	mov	r4,r3
     5c4:	e0fffc03 	ldbu	r3,-16(fp)
     5c8:	20c6703a 	and	r3,r4,r3
     5cc:	10c00005 	stb	r3,0(r2)
	  	return TRUE;
     5d0:	00800044 	movi	r2,1
	  }
     5d4:	e037883a 	mov	sp,fp
     5d8:	df000017 	ldw	fp,0(sp)
     5dc:	dec00104 	addi	sp,sp,4
     5e0:	f800283a 	ret

000005e4 <digitalRead_GPIO>:
	 * > Return Logic Boolean [TRUE/FALSE]
	 * > Must set pinMode_GPIO(PIN, OUTPUT) as INPUT
	 * DESP:
	 * 	unsigned char PIN		: control which LED on the DE0 board, i.e. x = LEDG1; LEDG1 on the board will be selected
	 ****************************************************************************************************************/
	  extern bool digitalRead_GPIO(unsigned char PIN, unsigned char OFFSET){
     5e4:	defffc04 	addi	sp,sp,-16
     5e8:	df000315 	stw	fp,12(sp)
     5ec:	df000304 	addi	fp,sp,12
     5f0:	2007883a 	mov	r3,r4
     5f4:	2805883a 	mov	r2,r5
     5f8:	e0fffe05 	stb	r3,-8(fp)
     5fc:	e0bfff05 	stb	r2,-4(fp)
		*(ADDR_JP2PORT + OFFSET + 4) = *(ADDR_JP2PORT + OFFSET + 4) &~ PIN; //SET PIN BIT AS INPUT
     600:	e0bfff03 	ldbu	r2,-4(fp)
     604:	10c00104 	addi	r3,r2,4
     608:	00840034 	movhi	r2,4096
     60c:	10801c04 	addi	r2,r2,112
     610:	1885883a 	add	r2,r3,r2
     614:	e0ffff03 	ldbu	r3,-4(fp)
     618:	19000104 	addi	r4,r3,4
     61c:	00c40034 	movhi	r3,4096
     620:	18c01c04 	addi	r3,r3,112
     624:	20c7883a 	add	r3,r4,r3
     628:	19000003 	ldbu	r4,0(r3)
     62c:	e0fffe03 	ldbu	r3,-8(fp)
     630:	00c6303a 	nor	r3,zero,r3
     634:	20c6703a 	and	r3,r4,r3
     638:	10c00005 	stb	r3,0(r2)
	    unsigned char temp_J2        = *(ADDR_JP2PORT + OFFSET)   ; //Address PTR
     63c:	e0ffff03 	ldbu	r3,-4(fp)
     640:	00840034 	movhi	r2,4096
     644:	10801c04 	addi	r2,r2,112
     648:	1885883a 	add	r2,r3,r2
     64c:	10800003 	ldbu	r2,0(r2)
     650:	e0bffd05 	stb	r2,-12(fp)


		if((temp_J2 & PIN) == PIN) //if 11000110,ADDR_JR2PORT & 00000100,PIN = 00000100 == PIN
     654:	e0fffd03 	ldbu	r3,-12(fp)
     658:	e0bffe03 	ldbu	r2,-8(fp)
     65c:	1884703a 	and	r2,r3,r2
     660:	10c03fcc 	andi	r3,r2,255
     664:	e0bffe03 	ldbu	r2,-8(fp)
     668:	1880021e 	bne	r3,r2,674 <digitalRead_GPIO+0x90>
			return HIGH;
     66c:	00800044 	movi	r2,1
     670:	00000106 	br	678 <digitalRead_GPIO+0x94>
		else
			return LOW;
     674:	0005883a 	mov	r2,zero
	  }
     678:	e037883a 	mov	sp,fp
     67c:	df000017 	ldw	fp,0(sp)
     680:	dec00104 	addi	sp,sp,4
     684:	f800283a 	ret

00000688 <INIT_GPIO>:
	 * FUNCTION: INIT_GPIO()
	 * > Return Logic Boolean [TRUE/FALSE]
	 * DESP:
	 * initialized GPIO on J5 IDE Port
	 ****************************************************************************************************************/
	  extern bool INIT_GPIO(){
     688:	defffd04 	addi	sp,sp,-12
     68c:	dfc00215 	stw	ra,8(sp)
     690:	df000115 	stw	fp,4(sp)
     694:	df000104 	addi	fp,sp,4
		  //*MSP430_TR_SE = 0;
		  //*SERVO_PIN  = 0;
	  	   // INIT GPIO directions
		  *ADDR_JP2PORT = 0;
     698:	00840034 	movhi	r2,4096
     69c:	10801c04 	addi	r2,r2,112
     6a0:	10000005 	stb	zero,0(r2)
		  *(ADDR_JP2PORT+4) = 0;
     6a4:	00840034 	movhi	r2,4096
     6a8:	10801d04 	addi	r2,r2,116
     6ac:	10000005 	stb	zero,0(r2)
		  DC_MOT(0x0,0x4,0x0); //STOP DC MOTOR
     6b0:	0009883a 	mov	r4,zero
     6b4:	01400104 	movi	r5,4
     6b8:	000d883a 	mov	r6,zero
     6bc:	0000ec80 	call	ec8 <DC_MOT>
		  SERVO(0, 0);
     6c0:	0009883a 	mov	r4,zero
     6c4:	000b883a 	mov	r5,zero
     6c8:	0000e700 	call	e70 <SERVO>
		  DELAY_CYCLES(1000);
     6cc:	0100fa04 	movi	r4,1000
     6d0:	00001f80 	call	1f8 <DELAY_CYCLES>
		  SERVO(1, 0);
     6d4:	01000044 	movi	r4,1
     6d8:	000b883a 	mov	r5,zero
     6dc:	0000e700 	call	e70 <SERVO>
		  DELAY_CYCLES(1000);
     6e0:	0100fa04 	movi	r4,1000
     6e4:	00001f80 	call	1f8 <DELAY_CYCLES>
		  unsigned char i = 0;
     6e8:	e03fff05 	stb	zero,-4(fp)
	  		  while (i<4)
     6ec:	00000a06 	br	718 <INIT_GPIO+0x90>
	  		  {
	  			 *(ADDR_JP2PORT + i + 4) = 0xFF; //set every bit direction to output
     6f0:	e0bfff03 	ldbu	r2,-4(fp)
     6f4:	10c00104 	addi	r3,r2,4
     6f8:	00840034 	movhi	r2,4096
     6fc:	10801c04 	addi	r2,r2,112
     700:	1885883a 	add	r2,r3,r2
     704:	00ffffc4 	movi	r3,-1
     708:	10c00005 	stb	r3,0(r2)
	  		     i++;
     70c:	e0bfff03 	ldbu	r2,-4(fp)
     710:	10800044 	addi	r2,r2,1
     714:	e0bfff05 	stb	r2,-4(fp)
		  SERVO(0, 0);
		  DELAY_CYCLES(1000);
		  SERVO(1, 0);
		  DELAY_CYCLES(1000);
		  unsigned char i = 0;
	  		  while (i<4)
     718:	e0bfff03 	ldbu	r2,-4(fp)
     71c:	10800130 	cmpltui	r2,r2,4
     720:	103ff31e 	bne	r2,zero,6f0 <INIT_GPIO+0x68>
	  		  {
	  			 *(ADDR_JP2PORT + i + 4) = 0xFF; //set every bit direction to output
	  		     i++;
	  		  }
				i = 0;
     724:	e03fff05 	stb	zero,-4(fp)
	  		    *(ADDR_JP2PORT)   = 0X00;
     728:	00840034 	movhi	r2,4096
     72c:	10801c04 	addi	r2,r2,112
     730:	10000005 	stb	zero,0(r2)
	  			*(ADDR_JP2PORT+1) = 0X00;
     734:	00840034 	movhi	r2,4096
     738:	10801c44 	addi	r2,r2,113
     73c:	10000005 	stb	zero,0(r2)
	  			*(ADDR_JP2PORT+2) = 0X00;
     740:	00840034 	movhi	r2,4096
     744:	10801c84 	addi	r2,r2,114
     748:	10000005 	stb	zero,0(r2)
	  			*(ADDR_JP2PORT+3) = 0X00;
     74c:	00840034 	movhi	r2,4096
     750:	10801cc4 	addi	r2,r2,115
     754:	10000005 	stb	zero,0(r2)
	  	  digitalWrite_GPIO(PR_SN,LOW,0);
     758:	01000104 	movi	r4,4
     75c:	000b883a 	mov	r5,zero
     760:	000d883a 	mov	r6,zero
     764:	000050c0 	call	50c <digitalWrite_GPIO>
	  		    return TRUE;
     768:	00800044 	movi	r2,1
	  		 }
     76c:	e037883a 	mov	sp,fp
     770:	dfc00117 	ldw	ra,4(sp)
     774:	df000017 	ldw	fp,0(sp)
     778:	dec00204 	addi	sp,sp,8
     77c:	f800283a 	ret

00000780 <RESET>:

/*********************************************************************************************************************
* 																							  Machines Functions
* -> Last Update 11/10/2014 11:18PM [Alex Lim]
*********************************************************************************************************************/
  extern bool RESET(unsigned char STATE){
     780:	defffd04 	addi	sp,sp,-12
     784:	dfc00215 	stw	ra,8(sp)
     788:	df000115 	stw	fp,4(sp)
     78c:	df000104 	addi	fp,sp,4
     790:	2005883a 	mov	r2,r4
     794:	e0bfff05 	stb	r2,-4(fp)

	  //SERVO 0 = TRACK
	  //SERVO 1 = TRUCK

	  while(*MSP430_TR_SE == 1);
     798:	0001883a 	nop
     79c:	00802034 	movhi	r2,128
     7a0:	10800c04 	addi	r2,r2,48
     7a4:	10800003 	ldbu	r2,0(r2)
     7a8:	10803fcc 	andi	r2,r2,255
     7ac:	10800060 	cmpeqi	r2,r2,1
     7b0:	103ffa1e 	bne	r2,zero,79c <RESET+0x1c>
	  SERVO(0, 0X1F);
     7b4:	0009883a 	mov	r4,zero
     7b8:	014007c4 	movi	r5,31
     7bc:	0000e700 	call	e70 <SERVO>
	  DC_MOT(0x0,0x4,FALSE); //STOP SERVO
     7c0:	0009883a 	mov	r4,zero
     7c4:	01400104 	movi	r5,4
     7c8:	000d883a 	mov	r6,zero
     7cc:	0000ec80 	call	ec8 <DC_MOT>
	  //STEPPER(0x0, 0x2, TRUE); RESET LIFT
	  digitalWrite_GPIO(LED_G,LOW,0);			    //LED GREEN
     7d0:	01000804 	movi	r4,32
     7d4:	000b883a 	mov	r5,zero
     7d8:	000d883a 	mov	r6,zero
     7dc:	000050c0 	call	50c <digitalWrite_GPIO>
	  digitalWrite_GPIO(LED_R,HIGH,0);			//LED RED
     7e0:	01002004 	movi	r4,128
     7e4:	01400044 	movi	r5,1
     7e8:	000d883a 	mov	r6,zero
     7ec:	000050c0 	call	50c <digitalWrite_GPIO>
	  DELAY_CYCLES(100000);
     7f0:	010000b4 	movhi	r4,2
     7f4:	2121a804 	addi	r4,r4,-31072
     7f8:	00001f80 	call	1f8 <DELAY_CYCLES>
	  return TRUE;}
     7fc:	00800044 	movi	r2,1
     800:	e037883a 	mov	sp,fp
     804:	dfc00117 	ldw	ra,4(sp)
     808:	df000017 	ldw	fp,0(sp)
     80c:	dec00204 	addi	sp,sp,8
     810:	f800283a 	ret

00000814 <READY>:

  extern bool READY(unsigned char STATE){
     814:	defffd04 	addi	sp,sp,-12
     818:	dfc00215 	stw	ra,8(sp)
     81c:	df000115 	stw	fp,4(sp)
     820:	df000104 	addi	fp,sp,4
     824:	2005883a 	mov	r2,r4
     828:	e0bfff05 	stb	r2,-4(fp)
	  DELAY_CYCLES(100000);
     82c:	010000b4 	movhi	r4,2
     830:	2121a804 	addi	r4,r4,-31072
     834:	00001f80 	call	1f8 <DELAY_CYCLES>
	  SERVO(0, 0X1F);
     838:	0009883a 	mov	r4,zero
     83c:	014007c4 	movi	r5,31
     840:	0000e700 	call	e70 <SERVO>
	  return TRUE;}
     844:	00800044 	movi	r2,1
     848:	e037883a 	mov	sp,fp
     84c:	dfc00117 	ldw	ra,4(sp)
     850:	df000017 	ldw	fp,0(sp)
     854:	dec00204 	addi	sp,sp,8
     858:	f800283a 	ret

0000085c <MACHINE>:




  extern bool MACHINE(unsigned char STATE){
     85c:	defffd04 	addi	sp,sp,-12
     860:	dfc00215 	stw	ra,8(sp)
     864:	df000115 	stw	fp,4(sp)
     868:	df000104 	addi	fp,sp,4
     86c:	2005883a 	mov	r2,r4
     870:	e0bfff05 	stb	r2,-4(fp)
	  SEG_OUT(STATE,DEC,TRUE)			;
     874:	e0bfff03 	ldbu	r2,-4(fp)
     878:	1009883a 	mov	r4,r2
     87c:	01400404 	movi	r5,16
     880:	01800044 	movi	r6,1
     884:	00003b40 	call	3b4 <SEG_OUT>

	  if(STATE ==1)	{STATE_1(STATE);	}
     888:	e0bfff03 	ldbu	r2,-4(fp)
     88c:	10800058 	cmpnei	r2,r2,1
     890:	1000041e 	bne	r2,zero,8a4 <MACHINE+0x48>
     894:	e0bfff03 	ldbu	r2,-4(fp)
     898:	1009883a 	mov	r4,r2
     89c:	000096c0 	call	96c <STATE_1>
     8a0:	00002c06 	br	954 <MACHINE+0xf8>
	  else if(STATE ==2)	{STATE_2(STATE);	}
     8a4:	e0bfff03 	ldbu	r2,-4(fp)
     8a8:	10800098 	cmpnei	r2,r2,2
     8ac:	1000041e 	bne	r2,zero,8c0 <MACHINE+0x64>
     8b0:	e0bfff03 	ldbu	r2,-4(fp)
     8b4:	1009883a 	mov	r4,r2
     8b8:	0000a4c0 	call	a4c <STATE_2>
     8bc:	00002506 	br	954 <MACHINE+0xf8>
	  else if(STATE ==3)	{STATE_3(STATE);	}
     8c0:	e0bfff03 	ldbu	r2,-4(fp)
     8c4:	108000d8 	cmpnei	r2,r2,3
     8c8:	1000041e 	bne	r2,zero,8dc <MACHINE+0x80>
     8cc:	e0bfff03 	ldbu	r2,-4(fp)
     8d0:	1009883a 	mov	r4,r2
     8d4:	0000afc0 	call	afc <STATE_3>
     8d8:	00001e06 	br	954 <MACHINE+0xf8>
	  else if(STATE ==4)	{STATE_4(STATE);	}
     8dc:	e0bfff03 	ldbu	r2,-4(fp)
     8e0:	10800118 	cmpnei	r2,r2,4
     8e4:	1000041e 	bne	r2,zero,8f8 <MACHINE+0x9c>
     8e8:	e0bfff03 	ldbu	r2,-4(fp)
     8ec:	1009883a 	mov	r4,r2
     8f0:	0000c680 	call	c68 <STATE_4>
     8f4:	00001706 	br	954 <MACHINE+0xf8>
	  else if(STATE ==5)	{STATE_5(STATE);	}
     8f8:	e0bfff03 	ldbu	r2,-4(fp)
     8fc:	10800158 	cmpnei	r2,r2,5
     900:	1000041e 	bne	r2,zero,914 <MACHINE+0xb8>
     904:	e0bfff03 	ldbu	r2,-4(fp)
     908:	1009883a 	mov	r4,r2
     90c:	0000cd80 	call	cd8 <STATE_5>
     910:	00001006 	br	954 <MACHINE+0xf8>
	  else if(STATE ==6)	{STATE_6(STATE);	}
     914:	e0bfff03 	ldbu	r2,-4(fp)
     918:	10800198 	cmpnei	r2,r2,6
     91c:	1000041e 	bne	r2,zero,930 <MACHINE+0xd4>
     920:	e0bfff03 	ldbu	r2,-4(fp)
     924:	1009883a 	mov	r4,r2
     928:	0000d540 	call	d54 <STATE_6>
     92c:	00000906 	br	954 <MACHINE+0xf8>
	  else if(STATE ==7)	{STATE_7(STATE);	}
     930:	e0bfff03 	ldbu	r2,-4(fp)
     934:	108001d8 	cmpnei	r2,r2,7
     938:	1000041e 	bne	r2,zero,94c <MACHINE+0xf0>
     93c:	e0bfff03 	ldbu	r2,-4(fp)
     940:	1009883a 	mov	r4,r2
     944:	0000df00 	call	df0 <STATE_7>
     948:	00000206 	br	954 <MACHINE+0xf8>
	  else {return FALSE;}
     94c:	0005883a 	mov	r2,zero
     950:	00000106 	br	958 <MACHINE+0xfc>
	  return TRUE;
     954:	00800044 	movi	r2,1
  }
     958:	e037883a 	mov	sp,fp
     95c:	dfc00117 	ldw	ra,4(sp)
     960:	df000017 	ldw	fp,0(sp)
     964:	dec00204 	addi	sp,sp,8
     968:	f800283a 	ret

0000096c <STATE_1>:

  //=============================================================================STATE 1=
  extern bool STATE_1(unsigned char STATE){
     96c:	defffd04 	addi	sp,sp,-12
     970:	dfc00215 	stw	ra,8(sp)
     974:	df000115 	stw	fp,4(sp)
     978:	df000104 	addi	fp,sp,4
     97c:	2005883a 	mov	r2,r4
     980:	e0bfff05 	stb	r2,-4(fp)
	  if(STATE == 1)
     984:	e0bfff03 	ldbu	r2,-4(fp)
     988:	10800058 	cmpnei	r2,r2,1
     98c:	1000291e 	bne	r2,zero,a34 <STATE_1+0xc8>
	  {
		  //Play Sound on Raspi
			digitalWrite_GPIO(GPIO2_0,LOW,0);			//SIGNAL SEND TO MSP430
     990:	01000044 	movi	r4,1
     994:	000b883a 	mov	r5,zero
     998:	000d883a 	mov	r6,zero
     99c:	000050c0 	call	50c <digitalWrite_GPIO>
			digitalWrite_GPIO(GPIO2_1,LOW ,0);			//SIGNAL SEND TO MSP430
     9a0:	01000084 	movi	r4,2
     9a4:	000b883a 	mov	r5,zero
     9a8:	000d883a 	mov	r6,zero
     9ac:	000050c0 	call	50c <digitalWrite_GPIO>

		 //SEND SIGNAL TO RASPI //PLAY SONG [2.mp3]
		 *RASPI_PIN = 0x0;
     9b0:	00802034 	movhi	r2,128
     9b4:	10800804 	addi	r2,r2,32
     9b8:	10000005 	stb	zero,0(r2)

		  digitalWrite_GPIO(GPIO2_1,HIGH,0);	//NOT SURE WHY -SCUMBAG MSP430
     9bc:	01000084 	movi	r4,2
     9c0:	01400044 	movi	r5,1
     9c4:	000d883a 	mov	r6,zero
     9c8:	000050c0 	call	50c <digitalWrite_GPIO>
		  while(*MSP430_TR_SE == 0x0){DELAY_CYCLES(1);}			//SIGNAL SEND TO MSP430};
     9cc:	00000206 	br	9d8 <STATE_1+0x6c>
     9d0:	01000044 	movi	r4,1
     9d4:	00001f80 	call	1f8 <DELAY_CYCLES>
     9d8:	00802034 	movhi	r2,128
     9dc:	10800c04 	addi	r2,r2,48
     9e0:	10800003 	ldbu	r2,0(r2)
     9e4:	10803fcc 	andi	r2,r2,255
     9e8:	103ff926 	beq	r2,zero,9d0 <STATE_1+0x64>
		  SERVO(0, 0X1F);
     9ec:	0009883a 	mov	r4,zero
     9f0:	014007c4 	movi	r5,31
     9f4:	0000e700 	call	e70 <SERVO>
		  DELAY_CYCLES(1000);
     9f8:	0100fa04 	movi	r4,1000
     9fc:	00001f80 	call	1f8 <DELAY_CYCLES>
		  digitalWrite_GPIO(GPIO2_1,HIGH,0);     //NOT SURE WHY -SCUMBAG MSP430
     a00:	01000084 	movi	r4,2
     a04:	01400044 	movi	r5,1
     a08:	000d883a 	mov	r6,zero
     a0c:	000050c0 	call	50c <digitalWrite_GPIO>
		  while(digitalRead_GPIO(GPIO2_3,0) == 0 )
     a10:	00000206 	br	a1c <STATE_1+0xb0>
				  {DELAY_CYCLES(1);}			//SIGNAL SEND TO MSP430};};//digitalRead_GPIO(GPIO2_1,0) == 0){}//poll high
     a14:	01000044 	movi	r4,1
     a18:	00001f80 	call	1f8 <DELAY_CYCLES>
		  digitalWrite_GPIO(GPIO2_1,HIGH,0);	//NOT SURE WHY -SCUMBAG MSP430
		  while(*MSP430_TR_SE == 0x0){DELAY_CYCLES(1);}			//SIGNAL SEND TO MSP430};
		  SERVO(0, 0X1F);
		  DELAY_CYCLES(1000);
		  digitalWrite_GPIO(GPIO2_1,HIGH,0);     //NOT SURE WHY -SCUMBAG MSP430
		  while(digitalRead_GPIO(GPIO2_3,0) == 0 )
     a1c:	01000204 	movi	r4,8
     a20:	000b883a 	mov	r5,zero
     a24:	00005e40 	call	5e4 <digitalRead_GPIO>
     a28:	103ffa26 	beq	r2,zero,a14 <STATE_1+0xa8>
				  {DELAY_CYCLES(1);}			//SIGNAL SEND TO MSP430};};//digitalRead_GPIO(GPIO2_1,0) == 0){}//poll high
		  return TRUE;
     a2c:	00800044 	movi	r2,1
     a30:	00000106 	br	a38 <STATE_1+0xcc>
	  }
	  else{return FALSE;}
     a34:	0005883a 	mov	r2,zero
  }
     a38:	e037883a 	mov	sp,fp
     a3c:	dfc00117 	ldw	ra,4(sp)
     a40:	df000017 	ldw	fp,0(sp)
     a44:	dec00204 	addi	sp,sp,8
     a48:	f800283a 	ret

00000a4c <STATE_2>:
  //==========================================================================STATE 1=END=

  //=============================================================================STATE 2=
  extern bool STATE_2(unsigned char STATE){
     a4c:	defffd04 	addi	sp,sp,-12
     a50:	dfc00215 	stw	ra,8(sp)
     a54:	df000115 	stw	fp,4(sp)
     a58:	df000104 	addi	fp,sp,4
     a5c:	2005883a 	mov	r2,r4
     a60:	e0bfff05 	stb	r2,-4(fp)
	  if(STATE == 2)
     a64:	e0bfff03 	ldbu	r2,-4(fp)
     a68:	10800098 	cmpnei	r2,r2,2
     a6c:	10001d1e 	bne	r2,zero,ae4 <STATE_2+0x98>
	  {
			digitalWrite_GPIO(GPIO2_0,LOW,0);			//SIGNAL SEND TO MSP430
     a70:	01000044 	movi	r4,1
     a74:	000b883a 	mov	r5,zero
     a78:	000d883a 	mov	r6,zero
     a7c:	000050c0 	call	50c <digitalWrite_GPIO>
			digitalWrite_GPIO(GPIO2_1,HIGH ,0);			//SIGNAL SEND TO MSP430
     a80:	01000084 	movi	r4,2
     a84:	01400044 	movi	r5,1
     a88:	000d883a 	mov	r6,zero
     a8c:	000050c0 	call	50c <digitalWrite_GPIO>
		  //Play Sound on Raspi
		  DELAY_CYCLES(1000000);
     a90:	010003f4 	movhi	r4,15
     a94:	21109004 	addi	r4,r4,16960
     a98:	00001f80 	call	1f8 <DELAY_CYCLES>
			digitalWrite_GPIO(PR_SN,LOW,0);
     a9c:	01000104 	movi	r4,4
     aa0:	000b883a 	mov	r5,zero
     aa4:	000d883a 	mov	r6,zero
     aa8:	000050c0 	call	50c <digitalWrite_GPIO>
			digitalWrite_GPIO(PR_SN,LOW,0);
     aac:	01000104 	movi	r4,4
     ab0:	000b883a 	mov	r5,zero
     ab4:	000d883a 	mov	r6,zero
     ab8:	000050c0 	call	50c <digitalWrite_GPIO>
			digitalWrite_GPIO(PR_SN,LOW,0);
     abc:	01000104 	movi	r4,4
     ac0:	000b883a 	mov	r5,zero
     ac4:	000d883a 	mov	r6,zero
     ac8:	000050c0 	call	50c <digitalWrite_GPIO>
			digitalWrite_GPIO(PR_SN,LOW,0);
     acc:	01000104 	movi	r4,4
     ad0:	000b883a 	mov	r5,zero
     ad4:	000d883a 	mov	r6,zero
     ad8:	000050c0 	call	50c <digitalWrite_GPIO>
		  return TRUE;
     adc:	00800044 	movi	r2,1
     ae0:	00000106 	br	ae8 <STATE_2+0x9c>
	  }
	  else{return FALSE;}
     ae4:	0005883a 	mov	r2,zero
  }
     ae8:	e037883a 	mov	sp,fp
     aec:	dfc00117 	ldw	ra,4(sp)
     af0:	df000017 	ldw	fp,0(sp)
     af4:	dec00204 	addi	sp,sp,8
     af8:	f800283a 	ret

00000afc <STATE_3>:
  //==========================================================================STATE 2=END=

  //=============================================================================STATE 3=
  extern bool STATE_3(unsigned char STATE){
     afc:	defffc04 	addi	sp,sp,-16
     b00:	dfc00315 	stw	ra,12(sp)
     b04:	df000215 	stw	fp,8(sp)
     b08:	df000204 	addi	fp,sp,8
     b0c:	2005883a 	mov	r2,r4
     b10:	e0bfff05 	stb	r2,-4(fp)
	  int count=0;
     b14:	e03ffe15 	stw	zero,-8(fp)
	  if(STATE == 3)
     b18:	e0bfff03 	ldbu	r2,-4(fp)
     b1c:	108000d8 	cmpnei	r2,r2,3
     b20:	10004b1e 	bne	r2,zero,c50 <STATE_3+0x154>
	  {
			digitalWrite_GPIO(GPIO2_0,LOW,0);			//SIGNAL SEND TO MSP430
     b24:	01000044 	movi	r4,1
     b28:	000b883a 	mov	r5,zero
     b2c:	000d883a 	mov	r6,zero
     b30:	000050c0 	call	50c <digitalWrite_GPIO>
			digitalWrite_GPIO(GPIO2_1,LOW ,0);			//SIGNAL SEND TO MSP430
     b34:	01000084 	movi	r4,2
     b38:	000b883a 	mov	r5,zero
     b3c:	000d883a 	mov	r6,zero
     b40:	000050c0 	call	50c <digitalWrite_GPIO>
     b44:	00000106 	br	b4c <STATE_3+0x50>
					  }			//SIGNAL SEND TO MSP430};};//digitalRead_GPIO(GPIO2_1,0) == 0){}//poll high
				  count++;
			  count ++;

			  SEG_OUT(count,DEC,true);
			  if(count < 2000){goto sensor;}
     b48:	0001883a 	nop
			sensor:
			 //POLL PRESSURE SENSOR,
			  //while(digitalRead_GPIO(PR_SN,0) == 1 )
				//	  {DELAY_CYCLES(1);}

  			digitalWrite_GPIO(PR_SN,LOW,0);
     b4c:	01000104 	movi	r4,4
     b50:	000b883a 	mov	r5,zero
     b54:	000d883a 	mov	r6,zero
     b58:	000050c0 	call	50c <digitalWrite_GPIO>
			while(digitalRead_GPIO(PR_SN,0) == 0 )
     b5c:	00000606 	br	b78 <STATE_3+0x7c>
					  {digitalWrite_GPIO(PR_SN,LOW,0);
     b60:	01000104 	movi	r4,4
     b64:	000b883a 	mov	r5,zero
     b68:	000d883a 	mov	r6,zero
     b6c:	000050c0 	call	50c <digitalWrite_GPIO>
					  DELAY_CYCLES(1);
     b70:	01000044 	movi	r4,1
     b74:	00001f80 	call	1f8 <DELAY_CYCLES>
			 //POLL PRESSURE SENSOR,
			  //while(digitalRead_GPIO(PR_SN,0) == 1 )
				//	  {DELAY_CYCLES(1);}

  			digitalWrite_GPIO(PR_SN,LOW,0);
			while(digitalRead_GPIO(PR_SN,0) == 0 )
     b78:	01000104 	movi	r4,4
     b7c:	000b883a 	mov	r5,zero
     b80:	00005e40 	call	5e4 <digitalRead_GPIO>
     b84:	103ff626 	beq	r2,zero,b60 <STATE_3+0x64>
					  {digitalWrite_GPIO(PR_SN,LOW,0);
					  DELAY_CYCLES(1);
					  }			//SIGNAL SEND TO MSP430};};//digitalRead_GPIO(GPIO2_1,0) == 0){}//poll high
				  count++;
     b88:	e0bffe17 	ldw	r2,-8(fp)
     b8c:	10800044 	addi	r2,r2,1
     b90:	e0bffe15 	stw	r2,-8(fp)
			  count ++;
     b94:	e0bffe17 	ldw	r2,-8(fp)
     b98:	10800044 	addi	r2,r2,1
     b9c:	e0bffe15 	stw	r2,-8(fp)

			  SEG_OUT(count,DEC,true);
     ba0:	e13ffe17 	ldw	r4,-8(fp)
     ba4:	01400404 	movi	r5,16
     ba8:	01800044 	movi	r6,1
     bac:	00003b40 	call	3b4 <SEG_OUT>
			  if(count < 2000){goto sensor;}
     bb0:	e0bffe17 	ldw	r2,-8(fp)
     bb4:	1081f408 	cmpgei	r2,r2,2000
     bb8:	103fe326 	beq	r2,zero,b48 <STATE_3+0x4c>
			  else{}
			 //LIGHTS UP LEDS R G B
			 //digitalWrite_GPIO(LED_R,HIGH,0);			//LED RED
			 digitalWrite_GPIO(LED_R,LOW ,0);			//LED RED
     bbc:	01002004 	movi	r4,128
     bc0:	000b883a 	mov	r5,zero
     bc4:	000d883a 	mov	r6,zero
     bc8:	000050c0 	call	50c <digitalWrite_GPIO>
			 DELAY_CYCLES(100000);
     bcc:	010000b4 	movhi	r4,2
     bd0:	2121a804 	addi	r4,r4,-31072
     bd4:	00001f80 	call	1f8 <DELAY_CYCLES>
			 digitalWrite_GPIO(LED_Y,HIGH ,0);			//LED YELLOW
     bd8:	01001004 	movi	r4,64
     bdc:	01400044 	movi	r5,1
     be0:	000d883a 	mov	r6,zero
     be4:	000050c0 	call	50c <digitalWrite_GPIO>
			 DELAY_CYCLES(50000);
     be8:	0130d414 	movui	r4,50000
     bec:	00001f80 	call	1f8 <DELAY_CYCLES>
			 digitalWrite_GPIO(LED_G,HIGH ,0);			//LED GREEN
     bf0:	01000804 	movi	r4,32
     bf4:	01400044 	movi	r5,1
     bf8:	000d883a 	mov	r6,zero
     bfc:	000050c0 	call	50c <digitalWrite_GPIO>
			 DELAY_CYCLES(100000);
     c00:	010000b4 	movhi	r4,2
     c04:	2121a804 	addi	r4,r4,-31072
     c08:	00001f80 	call	1f8 <DELAY_CYCLES>
			 digitalWrite_GPIO(LED_Y,LOW ,0);			//LED YELLOW
     c0c:	01001004 	movi	r4,64
     c10:	000b883a 	mov	r5,zero
     c14:	000d883a 	mov	r6,zero
     c18:	000050c0 	call	50c <digitalWrite_GPIO>



			 //SEND SIGNAL TO RASPI //PLAY SONG [3.mp3]
			 *RASPI_PIN = 0x1;
     c1c:	00802034 	movhi	r2,128
     c20:	10800804 	addi	r2,r2,32
     c24:	00c00044 	movi	r3,1
     c28:	10c00005 	stb	r3,0(r2)
			 DC_MOT(0x0,0x4,TRUE);
     c2c:	0009883a 	mov	r4,zero
     c30:	01400104 	movi	r5,4
     c34:	01800044 	movi	r6,1
     c38:	0000ec80 	call	ec8 <DC_MOT>
			 //Play Sound on Raspi
			 DELAY_CYCLES(1000000);
     c3c:	010003f4 	movhi	r4,15
     c40:	21109004 	addi	r4,r4,16960
     c44:	00001f80 	call	1f8 <DELAY_CYCLES>
			 //control SERVO TRACK SERVO
		  return TRUE;
     c48:	00800044 	movi	r2,1
     c4c:	00000106 	br	c54 <STATE_3+0x158>
	  }
	  else
	  {return FALSE;}
     c50:	0005883a 	mov	r2,zero
  }
     c54:	e037883a 	mov	sp,fp
     c58:	dfc00117 	ldw	ra,4(sp)
     c5c:	df000017 	ldw	fp,0(sp)
     c60:	dec00204 	addi	sp,sp,8
     c64:	f800283a 	ret

00000c68 <STATE_4>:
  //==========================================================================STATE 3=END=

  //=============================================================================STATE 4=
  extern bool STATE_4(unsigned char STATE){
     c68:	defffd04 	addi	sp,sp,-12
     c6c:	dfc00215 	stw	ra,8(sp)
     c70:	df000115 	stw	fp,4(sp)
     c74:	df000104 	addi	fp,sp,4
     c78:	2005883a 	mov	r2,r4
     c7c:	e0bfff05 	stb	r2,-4(fp)
	  if(STATE == 4)
     c80:	e0bfff03 	ldbu	r2,-4(fp)
     c84:	10800118 	cmpnei	r2,r2,4
     c88:	10000d1e 	bne	r2,zero,cc0 <STATE_4+0x58>
	  {
			digitalWrite_GPIO(GPIO2_0,LOW,0);			//SIGNAL SEND TO MSP430
     c8c:	01000044 	movi	r4,1
     c90:	000b883a 	mov	r5,zero
     c94:	000d883a 	mov	r6,zero
     c98:	000050c0 	call	50c <digitalWrite_GPIO>
			digitalWrite_GPIO(GPIO2_1,HIGH ,0);			//SIGNAL SEND TO MSP430
     c9c:	01000084 	movi	r4,2
     ca0:	01400044 	movi	r5,1
     ca4:	000d883a 	mov	r6,zero
     ca8:	000050c0 	call	50c <digitalWrite_GPIO>
		  //Play Sound on Raspi
		  DELAY_CYCLES(1000000);
     cac:	010003f4 	movhi	r4,15
     cb0:	21109004 	addi	r4,r4,16960
     cb4:	00001f80 	call	1f8 <DELAY_CYCLES>
		  return TRUE;
     cb8:	00800044 	movi	r2,1
     cbc:	00000106 	br	cc4 <STATE_4+0x5c>
	  }
	  else{return FALSE;}
     cc0:	0005883a 	mov	r2,zero
  }
     cc4:	e037883a 	mov	sp,fp
     cc8:	dfc00117 	ldw	ra,4(sp)
     ccc:	df000017 	ldw	fp,0(sp)
     cd0:	dec00204 	addi	sp,sp,8
     cd4:	f800283a 	ret

00000cd8 <STATE_5>:
  //==========================================================================STATE 4=END=

  //=============================================================================STATE 5=
  extern bool STATE_5(unsigned char STATE){
     cd8:	defffd04 	addi	sp,sp,-12
     cdc:	dfc00215 	stw	ra,8(sp)
     ce0:	df000115 	stw	fp,4(sp)
     ce4:	df000104 	addi	fp,sp,4
     ce8:	2005883a 	mov	r2,r4
     cec:	e0bfff05 	stb	r2,-4(fp)
	  if(STATE == 5)
     cf0:	e0bfff03 	ldbu	r2,-4(fp)
     cf4:	10800158 	cmpnei	r2,r2,5
     cf8:	1000101e 	bne	r2,zero,d3c <STATE_5+0x64>
	  {
			digitalWrite_GPIO(GPIO2_0,LOW,0);			//SIGNAL SEND TO MSP430
     cfc:	01000044 	movi	r4,1
     d00:	000b883a 	mov	r5,zero
     d04:	000d883a 	mov	r6,zero
     d08:	000050c0 	call	50c <digitalWrite_GPIO>
			digitalWrite_GPIO(GPIO2_1,LOW ,0);			//SIGNAL SEND TO MSP430
     d0c:	01000084 	movi	r4,2
     d10:	000b883a 	mov	r5,zero
     d14:	000d883a 	mov	r6,zero
     d18:	000050c0 	call	50c <digitalWrite_GPIO>

			 //SEND SIGNAL TO RASPI //PLAY SONG [4.mp3]
			 *RASPI_PIN = 0x0;
     d1c:	00802034 	movhi	r2,128
     d20:	10800804 	addi	r2,r2,32
     d24:	10000005 	stb	zero,0(r2)

		  //Play Sound on Raspi
		  DELAY_CYCLES(1000000);
     d28:	010003f4 	movhi	r4,15
     d2c:	21109004 	addi	r4,r4,16960
     d30:	00001f80 	call	1f8 <DELAY_CYCLES>
		  return TRUE;
     d34:	00800044 	movi	r2,1
     d38:	00000106 	br	d40 <STATE_5+0x68>
	  }
	  else{return FALSE;}
     d3c:	0005883a 	mov	r2,zero
  }
     d40:	e037883a 	mov	sp,fp
     d44:	dfc00117 	ldw	ra,4(sp)
     d48:	df000017 	ldw	fp,0(sp)
     d4c:	dec00204 	addi	sp,sp,8
     d50:	f800283a 	ret

00000d54 <STATE_6>:
  //==========================================================================STATE 5=END=

  //=============================================================================STATE 6=
  extern bool STATE_6(unsigned char STATE){
     d54:	defffd04 	addi	sp,sp,-12
     d58:	dfc00215 	stw	ra,8(sp)
     d5c:	df000115 	stw	fp,4(sp)
     d60:	df000104 	addi	fp,sp,4
     d64:	2005883a 	mov	r2,r4
     d68:	e0bfff05 	stb	r2,-4(fp)
	  if(STATE == 6)
     d6c:	e0bfff03 	ldbu	r2,-4(fp)
     d70:	10800198 	cmpnei	r2,r2,6
     d74:	1000181e 	bne	r2,zero,dd8 <STATE_6+0x84>
	  {
			digitalWrite_GPIO(GPIO2_0,LOW,0);			//SIGNAL SEND TO MSP430
     d78:	01000044 	movi	r4,1
     d7c:	000b883a 	mov	r5,zero
     d80:	000d883a 	mov	r6,zero
     d84:	000050c0 	call	50c <digitalWrite_GPIO>
			digitalWrite_GPIO(GPIO2_1,HIGH ,0);			//SIGNAL SEND TO MSP430
     d88:	01000084 	movi	r4,2
     d8c:	01400044 	movi	r5,1
     d90:	000d883a 	mov	r6,zero
     d94:	000050c0 	call	50c <digitalWrite_GPIO>

			while(digitalRead_GPIO(GPIO2_4,0) == 0 )
     d98:	00000206 	br	da4 <STATE_6+0x50>
					  {DELAY_CYCLES(1);}			//SIGNAL SEND TO LIFT};};//digitalRead_GPIO(GPIO2_1,0) == 0){}//poll high
     d9c:	01000044 	movi	r4,1
     da0:	00001f80 	call	1f8 <DELAY_CYCLES>
	  if(STATE == 6)
	  {
			digitalWrite_GPIO(GPIO2_0,LOW,0);			//SIGNAL SEND TO MSP430
			digitalWrite_GPIO(GPIO2_1,HIGH ,0);			//SIGNAL SEND TO MSP430

			while(digitalRead_GPIO(GPIO2_4,0) == 0 )
     da4:	01000404 	movi	r4,16
     da8:	000b883a 	mov	r5,zero
     dac:	00005e40 	call	5e4 <digitalRead_GPIO>
     db0:	103ffa26 	beq	r2,zero,d9c <STATE_6+0x48>
					  {DELAY_CYCLES(1);}			//SIGNAL SEND TO LIFT};};//digitalRead_GPIO(GPIO2_1,0) == 0){}//poll high

			STEPPER(0x0, 0x2, TRUE); //DRIVE LIFT MOTOR
     db4:	0009883a 	mov	r4,zero
     db8:	01400084 	movi	r5,2
     dbc:	01800044 	movi	r6,1
     dc0:	0000f400 	call	f40 <STEPPER>

		  //Play Sound on Raspi
		  DELAY_CYCLES(1000000);
     dc4:	010003f4 	movhi	r4,15
     dc8:	21109004 	addi	r4,r4,16960
     dcc:	00001f80 	call	1f8 <DELAY_CYCLES>
		  return TRUE;
     dd0:	00800044 	movi	r2,1
     dd4:	00000106 	br	ddc <STATE_6+0x88>
	  }
	  else{return FALSE;}
     dd8:	0005883a 	mov	r2,zero
  }
     ddc:	e037883a 	mov	sp,fp
     de0:	dfc00117 	ldw	ra,4(sp)
     de4:	df000017 	ldw	fp,0(sp)
     de8:	dec00204 	addi	sp,sp,8
     dec:	f800283a 	ret

00000df0 <STATE_7>:
  //==========================================================================STATE 6=END=

  //=============================================================================STATE 7=
  extern bool STATE_7(unsigned char STATE){
     df0:	defffd04 	addi	sp,sp,-12
     df4:	dfc00215 	stw	ra,8(sp)
     df8:	df000115 	stw	fp,4(sp)
     dfc:	df000104 	addi	fp,sp,4
     e00:	2005883a 	mov	r2,r4
     e04:	e0bfff05 	stb	r2,-4(fp)
	  if(STATE == 7)
     e08:	e0bfff03 	ldbu	r2,-4(fp)
     e0c:	108001d8 	cmpnei	r2,r2,7
     e10:	1000111e 	bne	r2,zero,e58 <STATE_7+0x68>
	  {
			digitalWrite_GPIO(GPIO2_0,LOW,0);			//SIGNAL SEND TO MSP430
     e14:	01000044 	movi	r4,1
     e18:	000b883a 	mov	r5,zero
     e1c:	000d883a 	mov	r6,zero
     e20:	000050c0 	call	50c <digitalWrite_GPIO>
			digitalWrite_GPIO(GPIO2_1,LOW ,0);			//SIGNAL SEND TO MSP430
     e24:	01000084 	movi	r4,2
     e28:	000b883a 	mov	r5,zero
     e2c:	000d883a 	mov	r6,zero
     e30:	000050c0 	call	50c <digitalWrite_GPIO>

			STEPPER(0x0, 0x2, FALSE); //STOP LIFT MOTOR
     e34:	0009883a 	mov	r4,zero
     e38:	01400084 	movi	r5,2
     e3c:	000d883a 	mov	r6,zero
     e40:	0000f400 	call	f40 <STEPPER>
		  //Play Sound on Raspi
		  DELAY_CYCLES(1000000);
     e44:	010003f4 	movhi	r4,15
     e48:	21109004 	addi	r4,r4,16960
     e4c:	00001f80 	call	1f8 <DELAY_CYCLES>
		  return TRUE;
     e50:	00800044 	movi	r2,1
     e54:	00000106 	br	e5c <STATE_7+0x6c>
	  }
	  else{return FALSE;}
     e58:	0005883a 	mov	r2,zero
  }
     e5c:	e037883a 	mov	sp,fp
     e60:	dfc00117 	ldw	ra,4(sp)
     e64:	df000017 	ldw	fp,0(sp)
     e68:	dec00204 	addi	sp,sp,8
     e6c:	f800283a 	ret

00000e70 <SERVO>:
  //==========================================================================STATE 7=END=


  void SERVO(unsigned int x, unsigned char SPEED) //DIR 1 = LEFT 0 = RIGHT
  {
     e70:	defffd04 	addi	sp,sp,-12
     e74:	df000215 	stw	fp,8(sp)
     e78:	df000204 	addi	fp,sp,8
     e7c:	e13ffe15 	stw	r4,-8(fp)
     e80:	2805883a 	mov	r2,r5
     e84:	e0bfff05 	stb	r2,-4(fp)
	  //AVOID USING OVER )0x8F for BIG SERVO
	if(x == 0){
     e88:	e0bffe17 	ldw	r2,-8(fp)
     e8c:	1000031e 	bne	r2,zero,e9c <SERVO+0x2c>
			  *SERVO_P0= SPEED;
     e90:	00802034 	movhi	r2,128
     e94:	e0ffff03 	ldbu	r3,-4(fp)
     e98:	10c00005 	stb	r3,0(r2)
			  }
	if(x == 1){
     e9c:	e0bffe17 	ldw	r2,-8(fp)
     ea0:	10800058 	cmpnei	r2,r2,1
     ea4:	1000041e 	bne	r2,zero,eb8 <SERVO+0x48>
		      *SERVO_P1= SPEED;
     ea8:	00802034 	movhi	r2,128
     eac:	10802404 	addi	r2,r2,144
     eb0:	e0ffff03 	ldbu	r3,-4(fp)
     eb4:	10c00005 	stb	r3,0(r2)
	}
  }
     eb8:	e037883a 	mov	sp,fp
     ebc:	df000017 	ldw	fp,0(sp)
     ec0:	dec00104 	addi	sp,sp,4
     ec4:	f800283a 	ret

00000ec8 <DC_MOT>:

void DC_MOT(unsigned char DIR, unsigned char SPEED, bool MODE  )
	{
     ec8:	defffc04 	addi	sp,sp,-16
     ecc:	df000315 	stw	fp,12(sp)
     ed0:	df000304 	addi	fp,sp,12
     ed4:	2007883a 	mov	r3,r4
     ed8:	2805883a 	mov	r2,r5
     edc:	e1bfff15 	stw	r6,-4(fp)
     ee0:	e0fffd05 	stb	r3,-12(fp)
     ee4:	e0bffe05 	stb	r2,-8(fp)
			*DC_MOT_DIR  = DIR; // 0x0 anti clock wise; 0x1 clockwise
     ee8:	00802034 	movhi	r2,128
     eec:	10801404 	addi	r2,r2,80
     ef0:	e0fffd03 	ldbu	r3,-12(fp)
     ef4:	10c00005 	stb	r3,0(r2)
			*DC_MOT_SEL  = SPEED; // 0x0 - fastest 0x2 - mid 0x4 - slow //0x1 not useable
     ef8:	00802034 	movhi	r2,128
     efc:	10800404 	addi	r2,r2,16
     f00:	e0fffe03 	ldbu	r3,-8(fp)
     f04:	10c00005 	stb	r3,0(r2)
			if(MODE){*DC_MOT_STOP = 0x1;} // 0x0 STOP ; 0x1 RUN
     f08:	e0bfff17 	ldw	r2,-4(fp)
     f0c:	10000526 	beq	r2,zero,f24 <DC_MOT+0x5c>
     f10:	00802034 	movhi	r2,128
     f14:	10801004 	addi	r2,r2,64
     f18:	00c00044 	movi	r3,1
     f1c:	10c00005 	stb	r3,0(r2)
     f20:	00000306 	br	f30 <DC_MOT+0x68>
			else{*DC_MOT_STOP = 0x0;} // 0x0 STOP ; 0x1 RUN
     f24:	00802034 	movhi	r2,128
     f28:	10801004 	addi	r2,r2,64
     f2c:	10000005 	stb	zero,0(r2)
	}
     f30:	e037883a 	mov	sp,fp
     f34:	df000017 	ldw	fp,0(sp)
     f38:	dec00104 	addi	sp,sp,4
     f3c:	f800283a 	ret

00000f40 <STEPPER>:

void STEPPER(unsigned char DIR, unsigned char SPEED, bool MODE  )
	{
     f40:	defffc04 	addi	sp,sp,-16
     f44:	df000315 	stw	fp,12(sp)
     f48:	df000304 	addi	fp,sp,12
     f4c:	2007883a 	mov	r3,r4
     f50:	2805883a 	mov	r2,r5
     f54:	e1bfff15 	stw	r6,-4(fp)
     f58:	e0fffd05 	stb	r3,-12(fp)
     f5c:	e0bffe05 	stb	r2,-8(fp)
			*STEP_DIR  = DIR; // 0x1 anti clock wise; 0x0 clockwise
     f60:	00802034 	movhi	r2,128
     f64:	10802004 	addi	r2,r2,128
     f68:	e0fffd03 	ldbu	r3,-12(fp)
     f6c:	10c00005 	stb	r3,0(r2)
			*STEP_SEL  = SPEED; //0x2 FASTEST //0x1 MID //0x0 SLOW //0x3 SLOWEST
     f70:	00802034 	movhi	r2,128
     f74:	10801c04 	addi	r2,r2,112
     f78:	e0fffe03 	ldbu	r3,-8(fp)
     f7c:	10c00005 	stb	r3,0(r2)
			if(MODE){*STEP_STOP = 0x1;} // 0x0 STOP ; 0x1 RUN
     f80:	e0bfff17 	ldw	r2,-4(fp)
     f84:	10000526 	beq	r2,zero,f9c <STEPPER+0x5c>
     f88:	00802034 	movhi	r2,128
     f8c:	10801804 	addi	r2,r2,96
     f90:	00c00044 	movi	r3,1
     f94:	10c00005 	stb	r3,0(r2)
     f98:	00000306 	br	fa8 <STEPPER+0x68>
			else{*STEP_STOP = 0x0;} // 0x0 STOP ; 0x1 RUN
     f9c:	00802034 	movhi	r2,128
     fa0:	10801804 	addi	r2,r2,96
     fa4:	10000005 	stb	zero,0(r2)
	}
     fa8:	e037883a 	mov	sp,fp
     fac:	df000017 	ldw	fp,0(sp)
     fb0:	dec00104 	addi	sp,sp,4
     fb4:	f800283a 	ret

00000fb8 <main>:

//==== Global Functions Variables =================================================================================END=


int main()
{
     fb8:	defffd04 	addi	sp,sp,-12
     fbc:	dfc00215 	stw	ra,8(sp)
     fc0:	df000115 	stw	fp,4(sp)
     fc4:	df000104 	addi	fp,sp,4
//======================================================================================================================
//  																							     | Initialize zone |
//======================================================================================================================
  INIT_GPIO()		; 				//REMOVE PAST VALUE ON GPIO REGISTER
     fc8:	00006880 	call	688 <INIT_GPIO>
//==== Initialize zone =============================================================================================END=
int var = 0;
     fcc:	e03fff15 	stw	zero,-4(fp)
//  																										    | LOOP |
//======================================================================================================================
while(1)
{
	//DEBUG MSP430=============================================================================
	  if(*SW_switch_ptr == 0x80 || DEBUG_MSP){
     fd0:	00840034 	movhi	r2,4096
     fd4:	10801004 	addi	r2,r2,64
     fd8:	10800003 	ldbu	r2,0(r2)
     fdc:	10803fcc 	andi	r2,r2,255
     fe0:	10802020 	cmpeqi	r2,r2,128
     fe4:	1000021e 	bne	r2,zero,ff0 <main+0x38>
     fe8:	d0a74c17 	ldw	r2,-25296(gp)
     fec:	10010d26 	beq	r2,zero,1424 <main+0x46c>
		  	SEG_OUT(430,DEC,true);
     ff0:	01006b84 	movi	r4,430
     ff4:	01400404 	movi	r5,16
     ff8:	01800044 	movi	r6,1
     ffc:	00003b40 	call	3b4 <SEG_OUT>
		  	INIT_GPIO();
    1000:	00006880 	call	688 <INIT_GPIO>
//
//				SEG_OUT(count,DEC,true);

					//STEPPER(0x0, 0x2, TRUE);
					//DC_MOT(0x1,0x4,TRUE);
					SERVO(0,var); //90degree
    1004:	e0bfff17 	ldw	r2,-4(fp)
    1008:	10803fcc 	andi	r2,r2,255
    100c:	0009883a 	mov	r4,zero
    1010:	100b883a 	mov	r5,r2
    1014:	0000e700 	call	e70 <SERVO>
					DELAY_CYCLES(1);
    1018:	01000044 	movi	r4,1
    101c:	00001f80 	call	1f8 <DELAY_CYCLES>
					SERVO(1,var); //90degree
    1020:	e0bfff17 	ldw	r2,-4(fp)
    1024:	10803fcc 	andi	r2,r2,255
    1028:	01000044 	movi	r4,1
    102c:	100b883a 	mov	r5,r2
    1030:	0000e700 	call	e70 <SERVO>
					DELAY_CYCLES(100000);
    1034:	010000b4 	movhi	r4,2
    1038:	2121a804 	addi	r4,r4,-31072
    103c:	00001f80 	call	1f8 <DELAY_CYCLES>
					var++;
    1040:	e0bfff17 	ldw	r2,-4(fp)
    1044:	10800044 	addi	r2,r2,1
    1048:	e0bfff15 	stw	r2,-4(fp)
					if(var ==0x1F){
    104c:	e0bfff17 	ldw	r2,-4(fp)
    1050:	108007d8 	cmpnei	r2,r2,31
    1054:	1000011e 	bne	r2,zero,105c <main+0xa4>
						var = 0;
    1058:	e03fff15 	stw	zero,-4(fp)
					}
				    *ADDR_JP2PORT  = *SW_switch_ptr;    //USE SW0 SW1 TO CONTROL GPIO2_0  GPIO2_1
    105c:	00840034 	movhi	r2,4096
    1060:	10801c04 	addi	r2,r2,112
    1064:	00c40034 	movhi	r3,4096
    1068:	18c01004 	addi	r3,r3,64
    106c:	18c00003 	ldbu	r3,0(r3)
    1070:	10c00005 	stb	r3,0(r2)
				    *RASPI_PIN     = *SW_switch_ptr;	//USE SW0 to control RASPI_PIN
    1074:	00802034 	movhi	r2,128
    1078:	10800804 	addi	r2,r2,32
    107c:	00c40034 	movhi	r3,4096
    1080:	18c01004 	addi	r3,r3,64
    1084:	18c00003 	ldbu	r3,0(r3)
    1088:	10c00005 	stb	r3,0(r2)
			  }
    108c:	003fdd06 	br	1004 <main+0x4c>

//==== MAIN STATE MACHINE ================================================================================================

  while(*SW_switch_ptr != 0x80 && STATE<9)
  {
      if(!DEBUG){
    1090:	d0a74d17 	ldw	r2,-25292(gp)
    1094:	1000161e 	bne	r2,zero,10f0 <main+0x138>
         printf("\nDE0_GPIO2_0 STATUS: ");
    1098:	01000074 	movhi	r4,1
    109c:	21366b04 	addi	r4,r4,-9812
    10a0:	00014840 	call	1484 <printf>
         printf("%d",(int)digitalRead_GPIO(GPIO2_0,0));
    10a4:	01000044 	movi	r4,1
    10a8:	000b883a 	mov	r5,zero
    10ac:	00005e40 	call	5e4 <digitalRead_GPIO>
    10b0:	01000074 	movhi	r4,1
    10b4:	21367104 	addi	r4,r4,-9788
    10b8:	100b883a 	mov	r5,r2
    10bc:	00014840 	call	1484 <printf>
         printf("\nDE0_GPIO2_1 STATUS: ");
    10c0:	01000074 	movhi	r4,1
    10c4:	21367204 	addi	r4,r4,-9784
    10c8:	00014840 	call	1484 <printf>
         printf("%d",(int)digitalRead_GPIO(GPIO2_1,0));
    10cc:	01000084 	movi	r4,2
    10d0:	000b883a 	mov	r5,zero
    10d4:	00005e40 	call	5e4 <digitalRead_GPIO>
    10d8:	01000074 	movhi	r4,1
    10dc:	21367104 	addi	r4,r4,-9788
    10e0:	100b883a 	mov	r5,r2
    10e4:	00014840 	call	1484 <printf>
         printf("\n");
    10e8:	01000284 	movi	r4,10
    10ec:	00014c80 	call	14c8 <putchar>
      }

	  //==============================================================================RESET=
		if(STATE == 8)
    10f0:	d0a00003 	ldbu	r2,-32768(gp)
    10f4:	10803fcc 	andi	r2,r2,255
    10f8:	10800218 	cmpnei	r2,r2,8
    10fc:	1000371e 	bne	r2,zero,11dc <main+0x224>
		{
	         if(DEBUG) printf("\nCurrent STATE: ");
    1100:	d0a74d17 	ldw	r2,-25292(gp)
    1104:	10000326 	beq	r2,zero,1114 <main+0x15c>
    1108:	01000074 	movhi	r4,1
    110c:	21367804 	addi	r4,r4,-9760
    1110:	00014840 	call	1484 <printf>
	         if(DEBUG) printf("%d",(int)STATE);
    1114:	d0a74d17 	ldw	r2,-25292(gp)
    1118:	10000626 	beq	r2,zero,1134 <main+0x17c>
    111c:	d0a00003 	ldbu	r2,-32768(gp)
    1120:	10803fcc 	andi	r2,r2,255
    1124:	01000074 	movhi	r4,1
    1128:	21367104 	addi	r4,r4,-9788
    112c:	100b883a 	mov	r5,r2
    1130:	00014840 	call	1484 <printf>
	         if(DEBUG) printf("\n");
    1134:	d0a74d17 	ldw	r2,-25292(gp)
    1138:	10000226 	beq	r2,zero,1144 <main+0x18c>
    113c:	01000284 	movi	r4,10
    1140:	00014c80 	call	14c8 <putchar>

			 //SEND SIGNAL TO RASPI //PLAY SONG [1.mp3]
			 *RASPI_PIN = 0x1;
    1144:	00802034 	movhi	r2,128
    1148:	10800804 	addi	r2,r2,32
    114c:	00c00044 	movi	r3,1
    1150:	10c00005 	stb	r3,0(r2)

			//MSP430 SIGNAL [1/0]
			digitalWrite_GPIO(GPIO2_0,HIGH,0);			//SIGNAL SEND TO MSP430
    1154:	01000044 	movi	r4,1
    1158:	01400044 	movi	r5,1
    115c:	000d883a 	mov	r6,zero
    1160:	000050c0 	call	50c <digitalWrite_GPIO>
			digitalWrite_GPIO(GPIO2_1,LOW ,0);			//SIGNAL SEND TO MSP430
    1164:	01000084 	movi	r4,2
    1168:	000b883a 	mov	r5,zero
    116c:	000d883a 	mov	r6,zero
    1170:	000050c0 	call	50c <digitalWrite_GPIO>

			SEG_OUT(STATE,DEC,TRUE);				    //PRINT STATE ON 7SEG
    1174:	d0a00003 	ldbu	r2,-32768(gp)
    1178:	10803fcc 	andi	r2,r2,255
    117c:	1009883a 	mov	r4,r2
    1180:	01400404 	movi	r5,16
    1184:	01800044 	movi	r6,1
    1188:	00003b40 	call	3b4 <SEG_OUT>

			if(RESET(STATE) == TRUE) {
    118c:	d0a00003 	ldbu	r2,-32768(gp)
    1190:	10803fcc 	andi	r2,r2,255
    1194:	1009883a 	mov	r4,r2
    1198:	00007800 	call	780 <RESET>
    119c:	10800058 	cmpnei	r2,r2,1
    11a0:	10000e1e 	bne	r2,zero,11dc <main+0x224>
				digitalWrite_GPIO(GPIO2_1,LOW ,0);		//SIGNAL SEND TO MSP430
    11a4:	01000084 	movi	r4,2
    11a8:	000b883a 	mov	r5,zero
    11ac:	000d883a 	mov	r6,zero
    11b0:	000050c0 	call	50c <digitalWrite_GPIO>
				while(digitalRead_GPIO(GPIO2_1,0) == 0){DELAY_CYCLES(1);}//poll high
    11b4:	00000206 	br	11c0 <main+0x208>
    11b8:	01000044 	movi	r4,1
    11bc:	00001f80 	call	1f8 <DELAY_CYCLES>
    11c0:	01000084 	movi	r4,2
    11c4:	000b883a 	mov	r5,zero
    11c8:	00005e40 	call	5e4 <digitalRead_GPIO>
    11cc:	103ffa26 	beq	r2,zero,11b8 <main+0x200>
				STATE++;
    11d0:	d0a00003 	ldbu	r2,-32768(gp)
    11d4:	10800044 	addi	r2,r2,1
    11d8:	d0a00005 	stb	r2,-32768(gp)
		}
		else{}
	  //===========================================================================RESET=END=

	  //==============================================================================READY=
		if(STATE == 0)
    11dc:	d0a00003 	ldbu	r2,-32768(gp)
    11e0:	10803fcc 	andi	r2,r2,255
    11e4:	1000301e 	bne	r2,zero,12a8 <main+0x2f0>
		{
			 if(DEBUG) printf("\nCurrent STATE: ");
    11e8:	d0a74d17 	ldw	r2,-25292(gp)
    11ec:	10000326 	beq	r2,zero,11fc <main+0x244>
    11f0:	01000074 	movhi	r4,1
    11f4:	21367804 	addi	r4,r4,-9760
    11f8:	00014840 	call	1484 <printf>
			 if(DEBUG) printf("%d",(int)STATE);
    11fc:	d0a74d17 	ldw	r2,-25292(gp)
    1200:	10000626 	beq	r2,zero,121c <main+0x264>
    1204:	d0a00003 	ldbu	r2,-32768(gp)
    1208:	10803fcc 	andi	r2,r2,255
    120c:	01000074 	movhi	r4,1
    1210:	21367104 	addi	r4,r4,-9788
    1214:	100b883a 	mov	r5,r2
    1218:	00014840 	call	1484 <printf>
			 if(DEBUG) printf("\n");
    121c:	d0a74d17 	ldw	r2,-25292(gp)
    1220:	10000226 	beq	r2,zero,122c <main+0x274>
    1224:	01000284 	movi	r4,10
    1228:	00014c80 	call	14c8 <putchar>

			digitalWrite_GPIO(GPIO2_0,HIGH,0);			//SIGNAL SEND TO MSP430
    122c:	01000044 	movi	r4,1
    1230:	01400044 	movi	r5,1
    1234:	000d883a 	mov	r6,zero
    1238:	000050c0 	call	50c <digitalWrite_GPIO>
			digitalWrite_GPIO(GPIO2_1,HIGH,0);			//SIGNAL SEND TO MSP430
    123c:	01000084 	movi	r4,2
    1240:	01400044 	movi	r5,1
    1244:	000d883a 	mov	r6,zero
    1248:	000050c0 	call	50c <digitalWrite_GPIO>



			SEG_OUT(STATE,DEC,TRUE);				//PRINT STATE ON 7SEG
    124c:	d0a00003 	ldbu	r2,-32768(gp)
    1250:	10803fcc 	andi	r2,r2,255
    1254:	1009883a 	mov	r4,r2
    1258:	01400404 	movi	r5,16
    125c:	01800044 	movi	r6,1
    1260:	00003b40 	call	3b4 <SEG_OUT>

			if(READY(STATE) == TRUE) {
    1264:	d0a00003 	ldbu	r2,-32768(gp)
    1268:	10803fcc 	andi	r2,r2,255
    126c:	1009883a 	mov	r4,r2
    1270:	00008140 	call	814 <READY>
    1274:	10800058 	cmpnei	r2,r2,1
    1278:	10000b1e 	bne	r2,zero,12a8 <main+0x2f0>
				while(digitalRead_GPIO(GPIO2_0,0) == 1){DELAY_CYCLES(1);}	//COMMENT WHEN DEBUG //POLL LOW FROM MSP430 ON P2_5/GPIO2_0 //BALL ENTER //PROB
    127c:	00000206 	br	1288 <main+0x2d0>
    1280:	01000044 	movi	r4,1
    1284:	00001f80 	call	1f8 <DELAY_CYCLES>
    1288:	01000044 	movi	r4,1
    128c:	000b883a 	mov	r5,zero
    1290:	00005e40 	call	5e4 <digitalRead_GPIO>
    1294:	10800060 	cmpeqi	r2,r2,1
    1298:	103ff91e 	bne	r2,zero,1280 <main+0x2c8>
				//DELAY_CYCLES(1000);
				STATE++;
    129c:	d0a00003 	ldbu	r2,-32768(gp)
    12a0:	10800044 	addi	r2,r2,1
    12a4:	d0a00005 	stb	r2,-32768(gp)
		}

	  //===========================================================================READY=END=

      //=============================================================================STATES =
		if(STATE>0 && STATE <8)
    12a8:	d0a00003 	ldbu	r2,-32768(gp)
    12ac:	10803fcc 	andi	r2,r2,255
    12b0:	10005d26 	beq	r2,zero,1428 <main+0x470>
    12b4:	d0a00003 	ldbu	r2,-32768(gp)
    12b8:	10803fcc 	andi	r2,r2,255
    12bc:	10800228 	cmpgeui	r2,r2,8
    12c0:	1000591e 	bne	r2,zero,1428 <main+0x470>
		{
			 if(DEBUG) printf("\nCurrent STATE: ");
    12c4:	d0a74d17 	ldw	r2,-25292(gp)
    12c8:	10000326 	beq	r2,zero,12d8 <main+0x320>
    12cc:	01000074 	movhi	r4,1
    12d0:	21367804 	addi	r4,r4,-9760
    12d4:	00014840 	call	1484 <printf>
			 if(1) printf("%d",(int)STATE);
    12d8:	d0a00003 	ldbu	r2,-32768(gp)
    12dc:	10803fcc 	andi	r2,r2,255
    12e0:	01000074 	movhi	r4,1
    12e4:	21367104 	addi	r4,r4,-9788
    12e8:	100b883a 	mov	r5,r2
    12ec:	00014840 	call	1484 <printf>
			 if(1) printf("\n");
    12f0:	01000284 	movi	r4,10
    12f4:	00014c80 	call	14c8 <putchar>

			//MSP430 SIGNAL [1/0]
			 if(STATE != 7 ){digitalWrite_GPIO(GPIO2_0, LOW,0);}
    12f8:	d0a00003 	ldbu	r2,-32768(gp)
    12fc:	10803fcc 	andi	r2,r2,255
    1300:	108001e0 	cmpeqi	r2,r2,7
    1304:	1000041e 	bne	r2,zero,1318 <main+0x360>
    1308:	01000044 	movi	r4,1
    130c:	000b883a 	mov	r5,zero
    1310:	000d883a 	mov	r6,zero
    1314:	000050c0 	call	50c <digitalWrite_GPIO>

			 if(STATE == 1 || STATE == 3 || STATE == 5)
    1318:	d0a00003 	ldbu	r2,-32768(gp)
    131c:	10803fcc 	andi	r2,r2,255
    1320:	10800060 	cmpeqi	r2,r2,1
    1324:	1000081e 	bne	r2,zero,1348 <main+0x390>
    1328:	d0a00003 	ldbu	r2,-32768(gp)
    132c:	10803fcc 	andi	r2,r2,255
    1330:	108000e0 	cmpeqi	r2,r2,3
    1334:	1000041e 	bne	r2,zero,1348 <main+0x390>
    1338:	d0a00003 	ldbu	r2,-32768(gp)
    133c:	10803fcc 	andi	r2,r2,255
    1340:	10800158 	cmpnei	r2,r2,5
    1344:	10000d1e 	bne	r2,zero,137c <main+0x3c4>
			 {
				 digitalWrite_GPIO(GPIO2_1 ,HIGH,0) ;			//SIGNAL SEND TO MSP430
    1348:	01000084 	movi	r4,2
    134c:	01400044 	movi	r5,1
    1350:	000d883a 	mov	r6,zero
    1354:	000050c0 	call	50c <digitalWrite_GPIO>
				 if(MACHINE(STATE))
    1358:	d0a00003 	ldbu	r2,-32768(gp)
    135c:	10803fcc 	andi	r2,r2,255
    1360:	1009883a 	mov	r4,r2
    1364:	000085c0 	call	85c <MACHINE>
    1368:	10002f26 	beq	r2,zero,1428 <main+0x470>
					 STATE = STATE + 1;
    136c:	d0a00003 	ldbu	r2,-32768(gp)
    1370:	10800044 	addi	r2,r2,1
    1374:	d0a00005 	stb	r2,-32768(gp)
			 if(STATE != 7 ){digitalWrite_GPIO(GPIO2_0, LOW,0);}

			 if(STATE == 1 || STATE == 3 || STATE == 5)
			 {
				 digitalWrite_GPIO(GPIO2_1 ,HIGH,0) ;			//SIGNAL SEND TO MSP430
				 if(MACHINE(STATE))
    1378:	00002b06 	br	1428 <main+0x470>
					 STATE = STATE + 1;
			 }

			 else if(STATE == 2 || STATE == 4 || STATE == 6)
    137c:	d0a00003 	ldbu	r2,-32768(gp)
    1380:	10803fcc 	andi	r2,r2,255
    1384:	108000a0 	cmpeqi	r2,r2,2
    1388:	1000081e 	bne	r2,zero,13ac <main+0x3f4>
    138c:	d0a00003 	ldbu	r2,-32768(gp)
    1390:	10803fcc 	andi	r2,r2,255
    1394:	10800120 	cmpeqi	r2,r2,4
    1398:	1000041e 	bne	r2,zero,13ac <main+0x3f4>
    139c:	d0a00003 	ldbu	r2,-32768(gp)
    13a0:	10803fcc 	andi	r2,r2,255
    13a4:	10800198 	cmpnei	r2,r2,6
    13a8:	10000d1e 	bne	r2,zero,13e0 <main+0x428>
			 {
				 digitalWrite_GPIO(GPIO2_1 ,LOW,0) ;			//SIGNAL SEND TO MSP430
    13ac:	01000084 	movi	r4,2
    13b0:	000b883a 	mov	r5,zero
    13b4:	000d883a 	mov	r6,zero
    13b8:	000050c0 	call	50c <digitalWrite_GPIO>
				 if(MACHINE(STATE))
    13bc:	d0a00003 	ldbu	r2,-32768(gp)
    13c0:	10803fcc 	andi	r2,r2,255
    13c4:	1009883a 	mov	r4,r2
    13c8:	000085c0 	call	85c <MACHINE>
    13cc:	10001626 	beq	r2,zero,1428 <main+0x470>
					 STATE = STATE + 1;
    13d0:	d0a00003 	ldbu	r2,-32768(gp)
    13d4:	10800044 	addi	r2,r2,1
    13d8:	d0a00005 	stb	r2,-32768(gp)
			 }

			 else if(STATE == 2 || STATE == 4 || STATE == 6)
			 {
				 digitalWrite_GPIO(GPIO2_1 ,LOW,0) ;			//SIGNAL SEND TO MSP430
				 if(MACHINE(STATE))
    13dc:	00001206 	br	1428 <main+0x470>
					 STATE = STATE + 1;
			 }

			 else if(STATE == 7 )
    13e0:	d0a00003 	ldbu	r2,-32768(gp)
    13e4:	10803fcc 	andi	r2,r2,255
    13e8:	108001d8 	cmpnei	r2,r2,7
    13ec:	10000e1e 	bne	r2,zero,1428 <main+0x470>
			 {
				 digitalWrite_GPIO(GPIO2_0, HIGH,0) ;			//SIGNAL SEND TO MSP430
    13f0:	01000044 	movi	r4,1
    13f4:	01400044 	movi	r5,1
    13f8:	000d883a 	mov	r6,zero
    13fc:	000050c0 	call	50c <digitalWrite_GPIO>
				 if(MACHINE(STATE))
    1400:	d0a00003 	ldbu	r2,-32768(gp)
    1404:	10803fcc 	andi	r2,r2,255
    1408:	1009883a 	mov	r4,r2
    140c:	000085c0 	call	85c <MACHINE>
    1410:	10000526 	beq	r2,zero,1428 <main+0x470>
					 STATE = STATE + 1;
    1414:	d0a00003 	ldbu	r2,-32768(gp)
    1418:	10800044 	addi	r2,r2,1
    141c:	d0a00005 	stb	r2,-32768(gp)
    1420:	00000106 	br	1428 <main+0x470>
    //DEBUG MSP430=========================================================================END=


//==== MAIN STATE MACHINE ================================================================================================

  while(*SW_switch_ptr != 0x80 && STATE<9)
    1424:	0001883a 	nop
    1428:	00840034 	movhi	r2,4096
    142c:	10801004 	addi	r2,r2,64
    1430:	10800003 	ldbu	r2,0(r2)
    1434:	10803fcc 	andi	r2,r2,255
    1438:	10802020 	cmpeqi	r2,r2,128
    143c:	1000041e 	bne	r2,zero,1450 <main+0x498>
    1440:	d0a00003 	ldbu	r2,-32768(gp)
    1444:	10803fcc 	andi	r2,r2,255
    1448:	10800270 	cmpltui	r2,r2,9
    144c:	103f101e 	bne	r2,zero,1090 <main+0xd8>
		}
	   //=============================================================================STATES =

		else{};
  }
  STATE = 0;
    1450:	d0200005 	stb	zero,-32768(gp)

}
    1454:	003ede06 	br	fd0 <main+0x18>

00001458 <_printf_r>:
    1458:	defffd04 	addi	sp,sp,-12
    145c:	dfc00015 	stw	ra,0(sp)
    1460:	d9800115 	stw	r6,4(sp)
    1464:	d9c00215 	stw	r7,8(sp)
    1468:	280d883a 	mov	r6,r5
    146c:	21400217 	ldw	r5,8(r4)
    1470:	d9c00104 	addi	r7,sp,4
    1474:	00015dc0 	call	15dc <___vfprintf_internal_r>
    1478:	dfc00017 	ldw	ra,0(sp)
    147c:	dec00304 	addi	sp,sp,12
    1480:	f800283a 	ret

00001484 <printf>:
    1484:	defffc04 	addi	sp,sp,-16
    1488:	dfc00015 	stw	ra,0(sp)
    148c:	d9400115 	stw	r5,4(sp)
    1490:	d9800215 	stw	r6,8(sp)
    1494:	d9c00315 	stw	r7,12(sp)
    1498:	00800074 	movhi	r2,1
    149c:	10beb504 	addi	r2,r2,-1324
    14a0:	10800017 	ldw	r2,0(r2)
    14a4:	200b883a 	mov	r5,r4
    14a8:	d9800104 	addi	r6,sp,4
    14ac:	11000217 	ldw	r4,8(r2)
    14b0:	00034580 	call	3458 <__vfprintf_internal>
    14b4:	dfc00017 	ldw	ra,0(sp)
    14b8:	dec00404 	addi	sp,sp,16
    14bc:	f800283a 	ret

000014c0 <_putchar_r>:
    14c0:	21800217 	ldw	r6,8(r4)
    14c4:	0007c941 	jmpi	7c94 <_putc_r>

000014c8 <putchar>:
    14c8:	00800074 	movhi	r2,1
    14cc:	10beb504 	addi	r2,r2,-1324
    14d0:	10800017 	ldw	r2,0(r2)
    14d4:	200b883a 	mov	r5,r4
    14d8:	11800217 	ldw	r6,8(r2)
    14dc:	1009883a 	mov	r4,r2
    14e0:	0007c941 	jmpi	7c94 <_putc_r>

000014e4 <_sprintf_r>:
    14e4:	deffe704 	addi	sp,sp,-100
    14e8:	2807883a 	mov	r3,r5
    14ec:	dfc01715 	stw	ra,92(sp)
    14f0:	d9c01815 	stw	r7,96(sp)
    14f4:	00a00034 	movhi	r2,32768
    14f8:	10bfffc4 	addi	r2,r2,-1
    14fc:	02008204 	movi	r8,520
    1500:	d8800215 	stw	r2,8(sp)
    1504:	d8800515 	stw	r2,20(sp)
    1508:	d80b883a 	mov	r5,sp
    150c:	d9c01804 	addi	r7,sp,96
    1510:	00bfffc4 	movi	r2,-1
    1514:	d8c00015 	stw	r3,0(sp)
    1518:	d8c00415 	stw	r3,16(sp)
    151c:	da00030d 	sth	r8,12(sp)
    1520:	d880038d 	sth	r2,14(sp)
    1524:	00015dc0 	call	15dc <___vfprintf_internal_r>
    1528:	d8c00017 	ldw	r3,0(sp)
    152c:	18000005 	stb	zero,0(r3)
    1530:	dfc01717 	ldw	ra,92(sp)
    1534:	dec01904 	addi	sp,sp,100
    1538:	f800283a 	ret

0000153c <sprintf>:
    153c:	deffe604 	addi	sp,sp,-104
    1540:	2007883a 	mov	r3,r4
    1544:	dfc01715 	stw	ra,92(sp)
    1548:	d9801815 	stw	r6,96(sp)
    154c:	d9c01915 	stw	r7,100(sp)
    1550:	00800074 	movhi	r2,1
    1554:	10beb504 	addi	r2,r2,-1324
    1558:	11000017 	ldw	r4,0(r2)
    155c:	00a00034 	movhi	r2,32768
    1560:	10bfffc4 	addi	r2,r2,-1
    1564:	280d883a 	mov	r6,r5
    1568:	02008204 	movi	r8,520
    156c:	d8800215 	stw	r2,8(sp)
    1570:	d8800515 	stw	r2,20(sp)
    1574:	d80b883a 	mov	r5,sp
    1578:	d9c01804 	addi	r7,sp,96
    157c:	00bfffc4 	movi	r2,-1
    1580:	d8c00015 	stw	r3,0(sp)
    1584:	d8c00415 	stw	r3,16(sp)
    1588:	da00030d 	sth	r8,12(sp)
    158c:	d880038d 	sth	r2,14(sp)
    1590:	00015dc0 	call	15dc <___vfprintf_internal_r>
    1594:	d8c00017 	ldw	r3,0(sp)
    1598:	18000005 	stb	zero,0(r3)
    159c:	dfc01717 	ldw	ra,92(sp)
    15a0:	dec01a04 	addi	sp,sp,104
    15a4:	f800283a 	ret

000015a8 <__sprint_r>:
    15a8:	30800217 	ldw	r2,8(r6)
    15ac:	defffe04 	addi	sp,sp,-8
    15b0:	dc000015 	stw	r16,0(sp)
    15b4:	dfc00115 	stw	ra,4(sp)
    15b8:	3021883a 	mov	r16,r6
    15bc:	10000226 	beq	r2,zero,15c8 <__sprint_r+0x20>
    15c0:	00057580 	call	5758 <__sfvwrite_r>
    15c4:	80000215 	stw	zero,8(r16)
    15c8:	80000115 	stw	zero,4(r16)
    15cc:	dfc00117 	ldw	ra,4(sp)
    15d0:	dc000017 	ldw	r16,0(sp)
    15d4:	dec00204 	addi	sp,sp,8
    15d8:	f800283a 	ret

000015dc <___vfprintf_internal_r>:
    15dc:	defeb904 	addi	sp,sp,-1308
    15e0:	dc013d15 	stw	r16,1268(sp)
    15e4:	d9013015 	stw	r4,1216(sp)
    15e8:	dfc14615 	stw	ra,1304(sp)
    15ec:	df014515 	stw	fp,1300(sp)
    15f0:	ddc14415 	stw	r23,1296(sp)
    15f4:	dd814315 	stw	r22,1292(sp)
    15f8:	dd414215 	stw	r21,1288(sp)
    15fc:	dd014115 	stw	r20,1284(sp)
    1600:	dcc14015 	stw	r19,1280(sp)
    1604:	dc813f15 	stw	r18,1276(sp)
    1608:	dc413e15 	stw	r17,1272(sp)
    160c:	d9412915 	stw	r5,1188(sp)
    1610:	3021883a 	mov	r16,r6
    1614:	d9c12d15 	stw	r7,1204(sp)
    1618:	0005e440 	call	5e44 <_localeconv_r>
    161c:	10800017 	ldw	r2,0(r2)
    1620:	d9013017 	ldw	r4,1216(sp)
    1624:	d8013315 	stw	zero,1228(sp)
    1628:	d8813715 	stw	r2,1244(sp)
    162c:	d8013415 	stw	zero,1232(sp)
    1630:	20000226 	beq	r4,zero,163c <___vfprintf_internal_r+0x60>
    1634:	20800e17 	ldw	r2,56(r4)
    1638:	10014b26 	beq	r2,zero,1b68 <___vfprintf_internal_r+0x58c>
    163c:	d8c12917 	ldw	r3,1188(sp)
    1640:	1880030b 	ldhu	r2,12(r3)
    1644:	10c0020c 	andi	r3,r2,8
    1648:	18ffffcc 	andi	r3,r3,65535
    164c:	18e0001c 	xori	r3,r3,32768
    1650:	18e00004 	addi	r3,r3,-32768
    1654:	1800ed26 	beq	r3,zero,1a0c <___vfprintf_internal_r+0x430>
    1658:	d9012917 	ldw	r4,1188(sp)
    165c:	20c00417 	ldw	r3,16(r4)
    1660:	1800ea26 	beq	r3,zero,1a0c <___vfprintf_internal_r+0x430>
    1664:	1100068c 	andi	r4,r2,26
    1668:	00c00284 	movi	r3,10
    166c:	20c0f026 	beq	r4,r3,1a30 <___vfprintf_internal_r+0x454>
    1670:	d9010dc4 	addi	r4,sp,1079
    1674:	d8810e04 	addi	r2,sp,1080
    1678:	dc413017 	ldw	r17,1216(sp)
    167c:	d8c00404 	addi	r3,sp,16
    1680:	d9012615 	stw	r4,1176(sp)
    1684:	1109c83a 	sub	r4,r2,r4
    1688:	d8812715 	stw	r2,1180(sp)
    168c:	d8c11b15 	stw	r3,1132(sp)
    1690:	d8011d15 	stw	zero,1140(sp)
    1694:	d8011c15 	stw	zero,1136(sp)
    1698:	802b883a 	mov	r21,r16
    169c:	d8013215 	stw	zero,1224(sp)
    16a0:	d8013615 	stw	zero,1240(sp)
    16a4:	d8013515 	stw	zero,1236(sp)
    16a8:	d8012c15 	stw	zero,1200(sp)
    16ac:	1813883a 	mov	r9,r3
    16b0:	d9013915 	stw	r4,1252(sp)
    16b4:	a8800007 	ldb	r2,0(r21)
    16b8:	1002f326 	beq	r2,zero,2288 <___vfprintf_internal_r+0xcac>
    16bc:	00c00944 	movi	r3,37
    16c0:	a825883a 	mov	r18,r21
    16c4:	10c0021e 	bne	r2,r3,16d0 <___vfprintf_internal_r+0xf4>
    16c8:	00001406 	br	171c <___vfprintf_internal_r+0x140>
    16cc:	10c00326 	beq	r2,r3,16dc <___vfprintf_internal_r+0x100>
    16d0:	94800044 	addi	r18,r18,1
    16d4:	90800007 	ldb	r2,0(r18)
    16d8:	103ffc1e 	bne	r2,zero,16cc <___vfprintf_internal_r+0xf0>
    16dc:	9561c83a 	sub	r16,r18,r21
    16e0:	80000e26 	beq	r16,zero,171c <___vfprintf_internal_r+0x140>
    16e4:	da011d17 	ldw	r8,1140(sp)
    16e8:	d8c11c17 	ldw	r3,1136(sp)
    16ec:	4d400015 	stw	r21,0(r9)
    16f0:	4c000115 	stw	r16,4(r9)
    16f4:	4411883a 	add	r8,r8,r16
    16f8:	18c00044 	addi	r3,r3,1
    16fc:	da011d15 	stw	r8,1140(sp)
    1700:	d8c11c15 	stw	r3,1136(sp)
    1704:	008001c4 	movi	r2,7
    1708:	10c11016 	blt	r2,r3,1b4c <___vfprintf_internal_r+0x570>
    170c:	4a400204 	addi	r9,r9,8
    1710:	d8812c17 	ldw	r2,1200(sp)
    1714:	1405883a 	add	r2,r2,r16
    1718:	d8812c15 	stw	r2,1200(sp)
    171c:	90800007 	ldb	r2,0(r18)
    1720:	1000ee26 	beq	r2,zero,1adc <___vfprintf_internal_r+0x500>
    1724:	95400044 	addi	r21,r18,1
    1728:	94800047 	ldb	r18,1(r18)
    172c:	073fffc4 	movi	fp,-1
    1730:	e007883a 	mov	r3,fp
    1734:	d8012585 	stb	zero,1174(sp)
    1738:	d8012e15 	stw	zero,1208(sp)
    173c:	0021883a 	mov	r16,zero
    1740:	05001604 	movi	r20,88
    1744:	04c00244 	movi	r19,9
    1748:	4839883a 	mov	fp,r9
    174c:	ad400044 	addi	r21,r21,1
    1750:	90bff804 	addi	r2,r18,-32
    1754:	a080462e 	bgeu	r20,r2,1870 <___vfprintf_internal_r+0x294>
    1758:	e013883a 	mov	r9,fp
    175c:	9000df26 	beq	r18,zero,1adc <___vfprintf_internal_r+0x500>
    1760:	00c00044 	movi	r3,1
    1764:	d8c12815 	stw	r3,1184(sp)
    1768:	dc810405 	stb	r18,1040(sp)
    176c:	d8012585 	stb	zero,1174(sp)
    1770:	d8c12b15 	stw	r3,1196(sp)
    1774:	dcc10404 	addi	r19,sp,1040
    1778:	d8013115 	stw	zero,1220(sp)
    177c:	80c0008c 	andi	r3,r16,2
    1780:	d8c12a15 	stw	r3,1192(sp)
    1784:	18000326 	beq	r3,zero,1794 <___vfprintf_internal_r+0x1b8>
    1788:	d8c12817 	ldw	r3,1184(sp)
    178c:	18c00084 	addi	r3,r3,2
    1790:	d8c12815 	stw	r3,1184(sp)
    1794:	80c0210c 	andi	r3,r16,132
    1798:	d8c12f15 	stw	r3,1212(sp)
    179c:	1802251e 	bne	r3,zero,2034 <___vfprintf_internal_r+0xa58>
    17a0:	d9012e17 	ldw	r4,1208(sp)
    17a4:	d8c12817 	ldw	r3,1184(sp)
    17a8:	20edc83a 	sub	r22,r4,r3
    17ac:	0582210e 	bge	zero,r22,2034 <___vfprintf_internal_r+0xa58>
    17b0:	02800404 	movi	r10,16
    17b4:	da011d17 	ldw	r8,1140(sp)
    17b8:	d8c11c17 	ldw	r3,1136(sp)
    17bc:	05c00074 	movhi	r23,1
    17c0:	bdf68d84 	addi	r23,r23,-9674
    17c4:	5580200e 	bge	r10,r22,1848 <___vfprintf_internal_r+0x26c>
    17c8:	dc813815 	stw	r18,1248(sp)
    17cc:	5039883a 	mov	fp,r10
    17d0:	b825883a 	mov	r18,r23
    17d4:	050001c4 	movi	r20,7
    17d8:	b02f883a 	mov	r23,r22
    17dc:	802d883a 	mov	r22,r16
    17e0:	dc012917 	ldw	r16,1188(sp)
    17e4:	00000306 	br	17f4 <___vfprintf_internal_r+0x218>
    17e8:	bdfffc04 	addi	r23,r23,-16
    17ec:	4a400204 	addi	r9,r9,8
    17f0:	e5c0110e 	bge	fp,r23,1838 <___vfprintf_internal_r+0x25c>
    17f4:	4c800015 	stw	r18,0(r9)
    17f8:	4f000115 	stw	fp,4(r9)
    17fc:	42000404 	addi	r8,r8,16
    1800:	18c00044 	addi	r3,r3,1
    1804:	da011d15 	stw	r8,1140(sp)
    1808:	d8c11c15 	stw	r3,1136(sp)
    180c:	a0fff60e 	bge	r20,r3,17e8 <___vfprintf_internal_r+0x20c>
    1810:	8809883a 	mov	r4,r17
    1814:	800b883a 	mov	r5,r16
    1818:	d9811b04 	addi	r6,sp,1132
    181c:	00015a80 	call	15a8 <__sprint_r>
    1820:	1000b41e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    1824:	bdfffc04 	addi	r23,r23,-16
    1828:	da011d17 	ldw	r8,1140(sp)
    182c:	d8c11c17 	ldw	r3,1136(sp)
    1830:	da400404 	addi	r9,sp,16
    1834:	e5ffef16 	blt	fp,r23,17f4 <___vfprintf_internal_r+0x218>
    1838:	b021883a 	mov	r16,r22
    183c:	b82d883a 	mov	r22,r23
    1840:	902f883a 	mov	r23,r18
    1844:	dc813817 	ldw	r18,1248(sp)
    1848:	4dc00015 	stw	r23,0(r9)
    184c:	4d800115 	stw	r22,4(r9)
    1850:	4591883a 	add	r8,r8,r22
    1854:	18c00044 	addi	r3,r3,1
    1858:	da011d15 	stw	r8,1140(sp)
    185c:	d8c11c15 	stw	r3,1136(sp)
    1860:	008001c4 	movi	r2,7
    1864:	10c3fe16 	blt	r2,r3,2860 <___vfprintf_internal_r+0x1284>
    1868:	4a400204 	addi	r9,r9,8
    186c:	0001f306 	br	203c <___vfprintf_internal_r+0xa60>
    1870:	1085883a 	add	r2,r2,r2
    1874:	1085883a 	add	r2,r2,r2
    1878:	01000034 	movhi	r4,0
    187c:	21062304 	addi	r4,r4,6284
    1880:	1105883a 	add	r2,r2,r4
    1884:	10800017 	ldw	r2,0(r2)
    1888:	1000683a 	jmp	r2
    188c:	00001f68 	cmpgeui	zero,zero,125
    1890:	00001758 	cmpnei	zero,zero,93
    1894:	00001758 	cmpnei	zero,zero,93
    1898:	00001f80 	call	1f8 <DELAY_CYCLES>
    189c:	00001758 	cmpnei	zero,zero,93
    18a0:	00001758 	cmpnei	zero,zero,93
    18a4:	00001758 	cmpnei	zero,zero,93
    18a8:	00001758 	cmpnei	zero,zero,93
    18ac:	00001758 	cmpnei	zero,zero,93
    18b0:	00001758 	cmpnei	zero,zero,93
    18b4:	00001e38 	rdprs	zero,zero,120
    18b8:	00001fcc 	andi	zero,zero,127
    18bc:	00001758 	cmpnei	zero,zero,93
    18c0:	00001a00 	call	1a0 <alt_irq_handler+0xb4>
    18c4:	00001da0 	cmpeqi	zero,zero,118
    18c8:	00001758 	cmpnei	zero,zero,93
    18cc:	00001f8c 	andi	zero,zero,126
    18d0:	00001f98 	cmpnei	zero,zero,126
    18d4:	00001f98 	cmpnei	zero,zero,126
    18d8:	00001f98 	cmpnei	zero,zero,126
    18dc:	00001f98 	cmpnei	zero,zero,126
    18e0:	00001f98 	cmpnei	zero,zero,126
    18e4:	00001f98 	cmpnei	zero,zero,126
    18e8:	00001f98 	cmpnei	zero,zero,126
    18ec:	00001f98 	cmpnei	zero,zero,126
    18f0:	00001f98 	cmpnei	zero,zero,126
    18f4:	00001758 	cmpnei	zero,zero,93
    18f8:	00001758 	cmpnei	zero,zero,93
    18fc:	00001758 	cmpnei	zero,zero,93
    1900:	00001758 	cmpnei	zero,zero,93
    1904:	00001758 	cmpnei	zero,zero,93
    1908:	00001758 	cmpnei	zero,zero,93
    190c:	00001758 	cmpnei	zero,zero,93
    1910:	00001758 	cmpnei	zero,zero,93
    1914:	00001758 	cmpnei	zero,zero,93
    1918:	00001758 	cmpnei	zero,zero,93
    191c:	00001b70 	cmpltui	zero,zero,109
    1920:	00001c30 	cmpltui	zero,zero,112
    1924:	00001758 	cmpnei	zero,zero,93
    1928:	00001c30 	cmpltui	zero,zero,112
    192c:	00001758 	cmpnei	zero,zero,93
    1930:	00001758 	cmpnei	zero,zero,93
    1934:	00001758 	cmpnei	zero,zero,93
    1938:	00001758 	cmpnei	zero,zero,93
    193c:	00001cc4 	movi	zero,115
    1940:	00001758 	cmpnei	zero,zero,93
    1944:	00001758 	cmpnei	zero,zero,93
    1948:	00001cd0 	cmplti	zero,zero,115
    194c:	00001758 	cmpnei	zero,zero,93
    1950:	00001758 	cmpnei	zero,zero,93
    1954:	00001758 	cmpnei	zero,zero,93
    1958:	00001758 	cmpnei	zero,zero,93
    195c:	00001758 	cmpnei	zero,zero,93
    1960:	00001d08 	cmpgei	zero,zero,116
    1964:	00001758 	cmpnei	zero,zero,93
    1968:	00001758 	cmpnei	zero,zero,93
    196c:	00001d44 	movi	zero,117
    1970:	00001758 	cmpnei	zero,zero,93
    1974:	00001758 	cmpnei	zero,zero,93
    1978:	00001758 	cmpnei	zero,zero,93
    197c:	00001758 	cmpnei	zero,zero,93
    1980:	00001758 	cmpnei	zero,zero,93
    1984:	00001758 	cmpnei	zero,zero,93
    1988:	00001758 	cmpnei	zero,zero,93
    198c:	00001758 	cmpnei	zero,zero,93
    1990:	00001758 	cmpnei	zero,zero,93
    1994:	00001758 	cmpnei	zero,zero,93
    1998:	00001fdc 	xori	zero,zero,127
    199c:	00002010 	cmplti	zero,zero,128
    19a0:	00001c30 	cmpltui	zero,zero,112
    19a4:	00001c30 	cmpltui	zero,zero,112
    19a8:	00001c30 	cmpltui	zero,zero,112
    19ac:	00001f5c 	xori	zero,zero,125
    19b0:	00002010 	cmplti	zero,zero,128
    19b4:	00001758 	cmpnei	zero,zero,93
    19b8:	00001758 	cmpnei	zero,zero,93
    19bc:	00001de8 	cmpgeui	zero,zero,119
    19c0:	00001758 	cmpnei	zero,zero,93
    19c4:	00001e00 	call	1e0 <_start+0x24>
    19c8:	0000201c 	xori	zero,zero,128
    19cc:	00001e60 	cmpeqi	zero,zero,121
    19d0:	00001eb0 	cmpltui	zero,zero,122
    19d4:	00001758 	cmpnei	zero,zero,93
    19d8:	00001ebc 	xorhi	zero,zero,122
    19dc:	00001758 	cmpnei	zero,zero,93
    19e0:	00002028 	cmpgeui	zero,zero,128
    19e4:	00001758 	cmpnei	zero,zero,93
    19e8:	00001758 	cmpnei	zero,zero,93
    19ec:	00001f20 	cmpeqi	zero,zero,124
    19f0:	d9012e17 	ldw	r4,1208(sp)
    19f4:	d8812d15 	stw	r2,1204(sp)
    19f8:	0109c83a 	sub	r4,zero,r4
    19fc:	d9012e15 	stw	r4,1208(sp)
    1a00:	84000114 	ori	r16,r16,4
    1a04:	ac800007 	ldb	r18,0(r21)
    1a08:	003f5006 	br	174c <___vfprintf_internal_r+0x170>
    1a0c:	d9013017 	ldw	r4,1216(sp)
    1a10:	d9412917 	ldw	r5,1188(sp)
    1a14:	000347c0 	call	347c <__swsetup_r>
    1a18:	10003d1e 	bne	r2,zero,1b10 <___vfprintf_internal_r+0x534>
    1a1c:	d8c12917 	ldw	r3,1188(sp)
    1a20:	1880030b 	ldhu	r2,12(r3)
    1a24:	00c00284 	movi	r3,10
    1a28:	1100068c 	andi	r4,r2,26
    1a2c:	20ff101e 	bne	r4,r3,1670 <___vfprintf_internal_r+0x94>
    1a30:	d9012917 	ldw	r4,1188(sp)
    1a34:	20c0038b 	ldhu	r3,14(r4)
    1a38:	193fffcc 	andi	r4,r3,65535
    1a3c:	2120001c 	xori	r4,r4,32768
    1a40:	21200004 	addi	r4,r4,-32768
    1a44:	203f0a16 	blt	r4,zero,1670 <___vfprintf_internal_r+0x94>
    1a48:	d9012917 	ldw	r4,1188(sp)
    1a4c:	d9c12d17 	ldw	r7,1204(sp)
    1a50:	10bfff4c 	andi	r2,r2,65533
    1a54:	22800717 	ldw	r10,28(r4)
    1a58:	22400917 	ldw	r9,36(r4)
    1a5c:	d9013017 	ldw	r4,1216(sp)
    1a60:	02010004 	movi	r8,1024
    1a64:	d881070d 	sth	r2,1052(sp)
    1a68:	d9410404 	addi	r5,sp,1040
    1a6c:	d8800404 	addi	r2,sp,16
    1a70:	800d883a 	mov	r6,r16
    1a74:	d8c1078d 	sth	r3,1054(sp)
    1a78:	da810b15 	stw	r10,1068(sp)
    1a7c:	da410d15 	stw	r9,1076(sp)
    1a80:	d8810415 	stw	r2,1040(sp)
    1a84:	d8810815 	stw	r2,1056(sp)
    1a88:	da010615 	stw	r8,1048(sp)
    1a8c:	da010915 	stw	r8,1060(sp)
    1a90:	d8010a15 	stw	zero,1064(sp)
    1a94:	00015dc0 	call	15dc <___vfprintf_internal_r>
    1a98:	d8812c15 	stw	r2,1200(sp)
    1a9c:	10000416 	blt	r2,zero,1ab0 <___vfprintf_internal_r+0x4d4>
    1aa0:	d9013017 	ldw	r4,1216(sp)
    1aa4:	d9410404 	addi	r5,sp,1040
    1aa8:	0004e480 	call	4e48 <_fflush_r>
    1aac:	1006501e 	bne	r2,zero,33f0 <___vfprintf_internal_r+0x1e14>
    1ab0:	d881070b 	ldhu	r2,1052(sp)
    1ab4:	1080100c 	andi	r2,r2,64
    1ab8:	10bfffcc 	andi	r2,r2,65535
    1abc:	10a0001c 	xori	r2,r2,32768
    1ac0:	10a00004 	addi	r2,r2,-32768
    1ac4:	10001426 	beq	r2,zero,1b18 <___vfprintf_internal_r+0x53c>
    1ac8:	d8c12917 	ldw	r3,1188(sp)
    1acc:	1880030b 	ldhu	r2,12(r3)
    1ad0:	10801014 	ori	r2,r2,64
    1ad4:	1880030d 	sth	r2,12(r3)
    1ad8:	00000f06 	br	1b18 <___vfprintf_internal_r+0x53c>
    1adc:	d8811d17 	ldw	r2,1140(sp)
    1ae0:	10000426 	beq	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    1ae4:	d9013017 	ldw	r4,1216(sp)
    1ae8:	d9412917 	ldw	r5,1188(sp)
    1aec:	d9811b04 	addi	r6,sp,1132
    1af0:	00015a80 	call	15a8 <__sprint_r>
    1af4:	d8c12917 	ldw	r3,1188(sp)
    1af8:	1880030b 	ldhu	r2,12(r3)
    1afc:	1080100c 	andi	r2,r2,64
    1b00:	10bfffcc 	andi	r2,r2,65535
    1b04:	10a0001c 	xori	r2,r2,32768
    1b08:	10a00004 	addi	r2,r2,-32768
    1b0c:	10000226 	beq	r2,zero,1b18 <___vfprintf_internal_r+0x53c>
    1b10:	00bfffc4 	movi	r2,-1
    1b14:	d8812c15 	stw	r2,1200(sp)
    1b18:	d8812c17 	ldw	r2,1200(sp)
    1b1c:	dfc14617 	ldw	ra,1304(sp)
    1b20:	df014517 	ldw	fp,1300(sp)
    1b24:	ddc14417 	ldw	r23,1296(sp)
    1b28:	dd814317 	ldw	r22,1292(sp)
    1b2c:	dd414217 	ldw	r21,1288(sp)
    1b30:	dd014117 	ldw	r20,1284(sp)
    1b34:	dcc14017 	ldw	r19,1280(sp)
    1b38:	dc813f17 	ldw	r18,1276(sp)
    1b3c:	dc413e17 	ldw	r17,1272(sp)
    1b40:	dc013d17 	ldw	r16,1268(sp)
    1b44:	dec14704 	addi	sp,sp,1308
    1b48:	f800283a 	ret
    1b4c:	d9412917 	ldw	r5,1188(sp)
    1b50:	8809883a 	mov	r4,r17
    1b54:	d9811b04 	addi	r6,sp,1132
    1b58:	00015a80 	call	15a8 <__sprint_r>
    1b5c:	103fe51e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    1b60:	da400404 	addi	r9,sp,16
    1b64:	003eea06 	br	1710 <___vfprintf_internal_r+0x134>
    1b68:	00051040 	call	5104 <__sinit>
    1b6c:	003eb306 	br	163c <___vfprintf_internal_r+0x60>
    1b70:	e013883a 	mov	r9,fp
    1b74:	84000414 	ori	r16,r16,16
    1b78:	1839883a 	mov	fp,r3
    1b7c:	8080080c 	andi	r2,r16,32
    1b80:	10034426 	beq	r2,zero,2894 <___vfprintf_internal_r+0x12b8>
    1b84:	d8c12d17 	ldw	r3,1204(sp)
    1b88:	18800117 	ldw	r2,4(r3)
    1b8c:	1dc00017 	ldw	r23,0(r3)
    1b90:	18c00204 	addi	r3,r3,8
    1b94:	d8c12d15 	stw	r3,1204(sp)
    1b98:	102d883a 	mov	r22,r2
    1b9c:	1003020e 	bge	r2,zero,27a8 <___vfprintf_internal_r+0x11cc>
    1ba0:	05efc83a 	sub	r23,zero,r23
    1ba4:	b804c03a 	cmpne	r2,r23,zero
    1ba8:	05adc83a 	sub	r22,zero,r22
    1bac:	b0adc83a 	sub	r22,r22,r2
    1bb0:	00800b44 	movi	r2,45
    1bb4:	d8812585 	stb	r2,1174(sp)
    1bb8:	00c00044 	movi	r3,1
    1bbc:	bd84b03a 	or	r2,r23,r22
    1bc0:	e0000216 	blt	fp,zero,1bcc <___vfprintf_internal_r+0x5f0>
    1bc4:	013fdfc4 	movi	r4,-129
    1bc8:	8120703a 	and	r16,r16,r4
    1bcc:	1001cc1e 	bne	r2,zero,2300 <___vfprintf_internal_r+0xd24>
    1bd0:	e001cb1e 	bne	fp,zero,2300 <___vfprintf_internal_r+0xd24>
    1bd4:	18c03fcc 	andi	r3,r3,255
    1bd8:	1802ca1e 	bne	r3,zero,2704 <___vfprintf_internal_r+0x1128>
    1bdc:	8080004c 	andi	r2,r16,1
    1be0:	1002c826 	beq	r2,zero,2704 <___vfprintf_internal_r+0x1128>
    1be4:	d8c13917 	ldw	r3,1252(sp)
    1be8:	00800c04 	movi	r2,48
    1bec:	d8810dc5 	stb	r2,1079(sp)
    1bf0:	d8c12b15 	stw	r3,1196(sp)
    1bf4:	dcc10dc4 	addi	r19,sp,1079
    1bf8:	d8812b17 	ldw	r2,1196(sp)
    1bfc:	d8812815 	stw	r2,1184(sp)
    1c00:	1700010e 	bge	r2,fp,1c08 <___vfprintf_internal_r+0x62c>
    1c04:	df012815 	stw	fp,1184(sp)
    1c08:	d8812583 	ldbu	r2,1174(sp)
    1c0c:	df013115 	stw	fp,1220(sp)
    1c10:	10803fcc 	andi	r2,r2,255
    1c14:	1080201c 	xori	r2,r2,128
    1c18:	10bfe004 	addi	r2,r2,-128
    1c1c:	103ed726 	beq	r2,zero,177c <___vfprintf_internal_r+0x1a0>
    1c20:	d8c12817 	ldw	r3,1184(sp)
    1c24:	18c00044 	addi	r3,r3,1
    1c28:	d8c12815 	stw	r3,1184(sp)
    1c2c:	003ed306 	br	177c <___vfprintf_internal_r+0x1a0>
    1c30:	8080020c 	andi	r2,r16,8
    1c34:	e013883a 	mov	r9,fp
    1c38:	1839883a 	mov	fp,r3
    1c3c:	1003a626 	beq	r2,zero,2ad8 <___vfprintf_internal_r+0x14fc>
    1c40:	d9012d17 	ldw	r4,1204(sp)
    1c44:	25800017 	ldw	r22,0(r4)
    1c48:	25000117 	ldw	r20,4(r4)
    1c4c:	21000204 	addi	r4,r4,8
    1c50:	d9012d15 	stw	r4,1204(sp)
    1c54:	dd813315 	stw	r22,1228(sp)
    1c58:	dd013415 	stw	r20,1232(sp)
    1c5c:	b009883a 	mov	r4,r22
    1c60:	a00b883a 	mov	r5,r20
    1c64:	da413c15 	stw	r9,1264(sp)
    1c68:	000843c0 	call	843c <__isinfd>
    1c6c:	da413c17 	ldw	r9,1264(sp)
    1c70:	b009883a 	mov	r4,r22
    1c74:	a00b883a 	mov	r5,r20
    1c78:	10041d26 	beq	r2,zero,2cf0 <___vfprintf_internal_r+0x1714>
    1c7c:	000d883a 	mov	r6,zero
    1c80:	000f883a 	mov	r7,zero
    1c84:	000a3f40 	call	a3f4 <__ltdf2>
    1c88:	da413c17 	ldw	r9,1264(sp)
    1c8c:	1004da16 	blt	r2,zero,2ff8 <___vfprintf_internal_r+0x1a1c>
    1c90:	d8812583 	ldbu	r2,1174(sp)
    1c94:	00c011c4 	movi	r3,71
    1c98:	1c83d116 	blt	r3,r18,2be0 <___vfprintf_internal_r+0x1604>
    1c9c:	04c00074 	movhi	r19,1
    1ca0:	9cf67d04 	addi	r19,r19,-9740
    1ca4:	00c000c4 	movi	r3,3
    1ca8:	d8c12815 	stw	r3,1184(sp)
    1cac:	00ffdfc4 	movi	r3,-129
    1cb0:	80e0703a 	and	r16,r16,r3
    1cb4:	d8c12817 	ldw	r3,1184(sp)
    1cb8:	d8013115 	stw	zero,1220(sp)
    1cbc:	d8c12b15 	stw	r3,1196(sp)
    1cc0:	003fd306 	br	1c10 <___vfprintf_internal_r+0x634>
    1cc4:	84000214 	ori	r16,r16,8
    1cc8:	ac800007 	ldb	r18,0(r21)
    1ccc:	003e9f06 	br	174c <___vfprintf_internal_r+0x170>
    1cd0:	e013883a 	mov	r9,fp
    1cd4:	84000414 	ori	r16,r16,16
    1cd8:	1839883a 	mov	fp,r3
    1cdc:	8080080c 	andi	r2,r16,32
    1ce0:	10031d26 	beq	r2,zero,2958 <___vfprintf_internal_r+0x137c>
    1ce4:	d8812d17 	ldw	r2,1204(sp)
    1ce8:	0007883a 	mov	r3,zero
    1cec:	15c00017 	ldw	r23,0(r2)
    1cf0:	15800117 	ldw	r22,4(r2)
    1cf4:	10800204 	addi	r2,r2,8
    1cf8:	d8812d15 	stw	r2,1204(sp)
    1cfc:	d8012585 	stb	zero,1174(sp)
    1d00:	bd84b03a 	or	r2,r23,r22
    1d04:	003fae06 	br	1bc0 <___vfprintf_internal_r+0x5e4>
    1d08:	e013883a 	mov	r9,fp
    1d0c:	84000414 	ori	r16,r16,16
    1d10:	1839883a 	mov	fp,r3
    1d14:	8080080c 	andi	r2,r16,32
    1d18:	1002e726 	beq	r2,zero,28b8 <___vfprintf_internal_r+0x12dc>
    1d1c:	d8c12d17 	ldw	r3,1204(sp)
    1d20:	d9012d17 	ldw	r4,1204(sp)
    1d24:	1dc00017 	ldw	r23,0(r3)
    1d28:	1d800117 	ldw	r22,4(r3)
    1d2c:	21000204 	addi	r4,r4,8
    1d30:	00c00044 	movi	r3,1
    1d34:	d9012d15 	stw	r4,1204(sp)
    1d38:	bd84b03a 	or	r2,r23,r22
    1d3c:	d8012585 	stb	zero,1174(sp)
    1d40:	003f9f06 	br	1bc0 <___vfprintf_internal_r+0x5e4>
    1d44:	e013883a 	mov	r9,fp
    1d48:	1839883a 	mov	fp,r3
    1d4c:	00c00074 	movhi	r3,1
    1d50:	18f68104 	addi	r3,r3,-9724
    1d54:	d8c13615 	stw	r3,1240(sp)
    1d58:	8080080c 	andi	r2,r16,32
    1d5c:	10007726 	beq	r2,zero,1f3c <___vfprintf_internal_r+0x960>
    1d60:	d9012d17 	ldw	r4,1204(sp)
    1d64:	25c00017 	ldw	r23,0(r4)
    1d68:	25800117 	ldw	r22,4(r4)
    1d6c:	21000204 	addi	r4,r4,8
    1d70:	d9012d15 	stw	r4,1204(sp)
    1d74:	8080004c 	andi	r2,r16,1
    1d78:	1002c226 	beq	r2,zero,2884 <___vfprintf_internal_r+0x12a8>
    1d7c:	bd84b03a 	or	r2,r23,r22
    1d80:	10035d26 	beq	r2,zero,2af8 <___vfprintf_internal_r+0x151c>
    1d84:	00c00c04 	movi	r3,48
    1d88:	d8c12505 	stb	r3,1172(sp)
    1d8c:	dc812545 	stb	r18,1173(sp)
    1d90:	84000094 	ori	r16,r16,2
    1d94:	00c00084 	movi	r3,2
    1d98:	d8012585 	stb	zero,1174(sp)
    1d9c:	003f8806 	br	1bc0 <___vfprintf_internal_r+0x5e4>
    1da0:	ac800007 	ldb	r18,0(r21)
    1da4:	00c00a84 	movi	r3,42
    1da8:	adc00044 	addi	r23,r21,1
    1dac:	90c57526 	beq	r18,r3,3384 <___vfprintf_internal_r+0x1da8>
    1db0:	95bff404 	addi	r22,r18,-48
    1db4:	0009883a 	mov	r4,zero
    1db8:	9d84ff36 	bltu	r19,r22,31b8 <___vfprintf_internal_r+0x1bdc>
    1dbc:	01400284 	movi	r5,10
    1dc0:	000a8440 	call	a844 <__mulsi3>
    1dc4:	bc800007 	ldb	r18,0(r23)
    1dc8:	b089883a 	add	r4,r22,r2
    1dcc:	bdc00044 	addi	r23,r23,1
    1dd0:	95bff404 	addi	r22,r18,-48
    1dd4:	9dbff92e 	bgeu	r19,r22,1dbc <___vfprintf_internal_r+0x7e0>
    1dd8:	2007883a 	mov	r3,r4
    1ddc:	20044316 	blt	r4,zero,2eec <___vfprintf_internal_r+0x1910>
    1de0:	b82b883a 	mov	r21,r23
    1de4:	003e5a06 	br	1750 <___vfprintf_internal_r+0x174>
    1de8:	ac800007 	ldb	r18,0(r21)
    1dec:	01001b04 	movi	r4,108
    1df0:	a805883a 	mov	r2,r21
    1df4:	91045526 	beq	r18,r4,2f4c <___vfprintf_internal_r+0x1970>
    1df8:	84000414 	ori	r16,r16,16
    1dfc:	003e5306 	br	174c <___vfprintf_internal_r+0x170>
    1e00:	8080080c 	andi	r2,r16,32
    1e04:	e013883a 	mov	r9,fp
    1e08:	10034026 	beq	r2,zero,2b0c <___vfprintf_internal_r+0x1530>
    1e0c:	d9012d17 	ldw	r4,1204(sp)
    1e10:	20800017 	ldw	r2,0(r4)
    1e14:	d9012c17 	ldw	r4,1200(sp)
    1e18:	2007d7fa 	srai	r3,r4,31
    1e1c:	d9012d17 	ldw	r4,1204(sp)
    1e20:	10c00115 	stw	r3,4(r2)
    1e24:	21000104 	addi	r4,r4,4
    1e28:	d9012d15 	stw	r4,1204(sp)
    1e2c:	d9012c17 	ldw	r4,1200(sp)
    1e30:	11000015 	stw	r4,0(r2)
    1e34:	003e1f06 	br	16b4 <___vfprintf_internal_r+0xd8>
    1e38:	d9012d17 	ldw	r4,1204(sp)
    1e3c:	21000017 	ldw	r4,0(r4)
    1e40:	d9012e15 	stw	r4,1208(sp)
    1e44:	d9012d17 	ldw	r4,1204(sp)
    1e48:	20800104 	addi	r2,r4,4
    1e4c:	d9012e17 	ldw	r4,1208(sp)
    1e50:	203ee716 	blt	r4,zero,19f0 <___vfprintf_internal_r+0x414>
    1e54:	d8812d15 	stw	r2,1204(sp)
    1e58:	ac800007 	ldb	r18,0(r21)
    1e5c:	003e3b06 	br	174c <___vfprintf_internal_r+0x170>
    1e60:	e013883a 	mov	r9,fp
    1e64:	1839883a 	mov	fp,r3
    1e68:	d8c12d17 	ldw	r3,1204(sp)
    1e6c:	00800c04 	movi	r2,48
    1e70:	01000074 	movhi	r4,1
    1e74:	21368604 	addi	r4,r4,-9704
    1e78:	1dc00017 	ldw	r23,0(r3)
    1e7c:	18c00104 	addi	r3,r3,4
    1e80:	d8812505 	stb	r2,1172(sp)
    1e84:	00801e04 	movi	r2,120
    1e88:	d8812545 	stb	r2,1173(sp)
    1e8c:	d8c12d15 	stw	r3,1204(sp)
    1e90:	002d883a 	mov	r22,zero
    1e94:	84000094 	ori	r16,r16,2
    1e98:	d9013615 	stw	r4,1240(sp)
    1e9c:	00c00084 	movi	r3,2
    1ea0:	04801e04 	movi	r18,120
    1ea4:	b805883a 	mov	r2,r23
    1ea8:	d8012585 	stb	zero,1174(sp)
    1eac:	003f4406 	br	1bc0 <___vfprintf_internal_r+0x5e4>
    1eb0:	84000814 	ori	r16,r16,32
    1eb4:	ac800007 	ldb	r18,0(r21)
    1eb8:	003e2406 	br	174c <___vfprintf_internal_r+0x170>
    1ebc:	d8812d17 	ldw	r2,1204(sp)
    1ec0:	d8012585 	stb	zero,1174(sp)
    1ec4:	e013883a 	mov	r9,fp
    1ec8:	14c00017 	ldw	r19,0(r2)
    1ecc:	1839883a 	mov	fp,r3
    1ed0:	15c00104 	addi	r23,r2,4
    1ed4:	98045526 	beq	r19,zero,302c <___vfprintf_internal_r+0x1a50>
    1ed8:	9809883a 	mov	r4,r19
    1edc:	18043116 	blt	r3,zero,2fa4 <___vfprintf_internal_r+0x19c8>
    1ee0:	000b883a 	mov	r5,zero
    1ee4:	180d883a 	mov	r6,r3
    1ee8:	da413c15 	stw	r9,1264(sp)
    1eec:	00067a40 	call	67a4 <memchr>
    1ef0:	da413c17 	ldw	r9,1264(sp)
    1ef4:	10047a26 	beq	r2,zero,30e0 <___vfprintf_internal_r+0x1b04>
    1ef8:	14c5c83a 	sub	r2,r2,r19
    1efc:	d8812b15 	stw	r2,1196(sp)
    1f00:	e083d40e 	bge	fp,r2,2e54 <___vfprintf_internal_r+0x1878>
    1f04:	df012815 	stw	fp,1184(sp)
    1f08:	e004e416 	blt	fp,zero,329c <___vfprintf_internal_r+0x1cc0>
    1f0c:	d8812583 	ldbu	r2,1174(sp)
    1f10:	df012b15 	stw	fp,1196(sp)
    1f14:	ddc12d15 	stw	r23,1204(sp)
    1f18:	d8013115 	stw	zero,1220(sp)
    1f1c:	003f3c06 	br	1c10 <___vfprintf_internal_r+0x634>
    1f20:	00800074 	movhi	r2,1
    1f24:	10b68604 	addi	r2,r2,-9704
    1f28:	d8813615 	stw	r2,1240(sp)
    1f2c:	8080080c 	andi	r2,r16,32
    1f30:	e013883a 	mov	r9,fp
    1f34:	1839883a 	mov	fp,r3
    1f38:	103f891e 	bne	r2,zero,1d60 <___vfprintf_internal_r+0x784>
    1f3c:	8080040c 	andi	r2,r16,16
    1f40:	1002c326 	beq	r2,zero,2a50 <___vfprintf_internal_r+0x1474>
    1f44:	d8812d17 	ldw	r2,1204(sp)
    1f48:	002d883a 	mov	r22,zero
    1f4c:	15c00017 	ldw	r23,0(r2)
    1f50:	10800104 	addi	r2,r2,4
    1f54:	d8812d15 	stw	r2,1204(sp)
    1f58:	003f8606 	br	1d74 <___vfprintf_internal_r+0x798>
    1f5c:	84001014 	ori	r16,r16,64
    1f60:	ac800007 	ldb	r18,0(r21)
    1f64:	003df906 	br	174c <___vfprintf_internal_r+0x170>
    1f68:	d8812587 	ldb	r2,1174(sp)
    1f6c:	1002e51e 	bne	r2,zero,2b04 <___vfprintf_internal_r+0x1528>
    1f70:	00800804 	movi	r2,32
    1f74:	d8812585 	stb	r2,1174(sp)
    1f78:	ac800007 	ldb	r18,0(r21)
    1f7c:	003df306 	br	174c <___vfprintf_internal_r+0x170>
    1f80:	84000054 	ori	r16,r16,1
    1f84:	ac800007 	ldb	r18,0(r21)
    1f88:	003df006 	br	174c <___vfprintf_internal_r+0x170>
    1f8c:	84002014 	ori	r16,r16,128
    1f90:	ac800007 	ldb	r18,0(r21)
    1f94:	003ded06 	br	174c <___vfprintf_internal_r+0x170>
    1f98:	0009883a 	mov	r4,zero
    1f9c:	95bff404 	addi	r22,r18,-48
    1fa0:	182f883a 	mov	r23,r3
    1fa4:	01400284 	movi	r5,10
    1fa8:	000a8440 	call	a844 <__mulsi3>
    1fac:	ac800007 	ldb	r18,0(r21)
    1fb0:	1589883a 	add	r4,r2,r22
    1fb4:	ad400044 	addi	r21,r21,1
    1fb8:	95bff404 	addi	r22,r18,-48
    1fbc:	9dbff92e 	bgeu	r19,r22,1fa4 <___vfprintf_internal_r+0x9c8>
    1fc0:	b807883a 	mov	r3,r23
    1fc4:	d9012e15 	stw	r4,1208(sp)
    1fc8:	003de106 	br	1750 <___vfprintf_internal_r+0x174>
    1fcc:	00800ac4 	movi	r2,43
    1fd0:	d8812585 	stb	r2,1174(sp)
    1fd4:	ac800007 	ldb	r18,0(r21)
    1fd8:	003ddc06 	br	174c <___vfprintf_internal_r+0x170>
    1fdc:	d8c12d17 	ldw	r3,1204(sp)
    1fe0:	d9012d17 	ldw	r4,1204(sp)
    1fe4:	e013883a 	mov	r9,fp
    1fe8:	18800017 	ldw	r2,0(r3)
    1fec:	21000104 	addi	r4,r4,4
    1ff0:	00c00044 	movi	r3,1
    1ff4:	d8c12815 	stw	r3,1184(sp)
    1ff8:	d8012585 	stb	zero,1174(sp)
    1ffc:	d8810405 	stb	r2,1040(sp)
    2000:	d9012d15 	stw	r4,1204(sp)
    2004:	d8c12b15 	stw	r3,1196(sp)
    2008:	dcc10404 	addi	r19,sp,1040
    200c:	003dda06 	br	1778 <___vfprintf_internal_r+0x19c>
    2010:	e013883a 	mov	r9,fp
    2014:	1839883a 	mov	fp,r3
    2018:	003ed806 	br	1b7c <___vfprintf_internal_r+0x5a0>
    201c:	e013883a 	mov	r9,fp
    2020:	1839883a 	mov	fp,r3
    2024:	003f2d06 	br	1cdc <___vfprintf_internal_r+0x700>
    2028:	e013883a 	mov	r9,fp
    202c:	1839883a 	mov	fp,r3
    2030:	003f3806 	br	1d14 <___vfprintf_internal_r+0x738>
    2034:	da011d17 	ldw	r8,1140(sp)
    2038:	d8c11c17 	ldw	r3,1136(sp)
    203c:	d8812587 	ldb	r2,1174(sp)
    2040:	10000b26 	beq	r2,zero,2070 <___vfprintf_internal_r+0xa94>
    2044:	d8812584 	addi	r2,sp,1174
    2048:	48800015 	stw	r2,0(r9)
    204c:	00800044 	movi	r2,1
    2050:	48800115 	stw	r2,4(r9)
    2054:	4091883a 	add	r8,r8,r2
    2058:	1887883a 	add	r3,r3,r2
    205c:	da011d15 	stw	r8,1140(sp)
    2060:	d8c11c15 	stw	r3,1136(sp)
    2064:	008001c4 	movi	r2,7
    2068:	10c18e16 	blt	r2,r3,26a4 <___vfprintf_internal_r+0x10c8>
    206c:	4a400204 	addi	r9,r9,8
    2070:	d9012a17 	ldw	r4,1192(sp)
    2074:	20000b26 	beq	r4,zero,20a4 <___vfprintf_internal_r+0xac8>
    2078:	d8812504 	addi	r2,sp,1172
    207c:	48800015 	stw	r2,0(r9)
    2080:	00800084 	movi	r2,2
    2084:	48800115 	stw	r2,4(r9)
    2088:	4091883a 	add	r8,r8,r2
    208c:	18c00044 	addi	r3,r3,1
    2090:	da011d15 	stw	r8,1140(sp)
    2094:	d8c11c15 	stw	r3,1136(sp)
    2098:	008001c4 	movi	r2,7
    209c:	10c17816 	blt	r2,r3,2680 <___vfprintf_internal_r+0x10a4>
    20a0:	4a400204 	addi	r9,r9,8
    20a4:	d9012f17 	ldw	r4,1212(sp)
    20a8:	00802004 	movi	r2,128
    20ac:	2080fc26 	beq	r4,r2,24a0 <___vfprintf_internal_r+0xec4>
    20b0:	d8813117 	ldw	r2,1220(sp)
    20b4:	d9012b17 	ldw	r4,1196(sp)
    20b8:	112fc83a 	sub	r23,r2,r4
    20bc:	05c02a0e 	bge	zero,r23,2168 <___vfprintf_internal_r+0xb8c>
    20c0:	07000404 	movi	fp,16
    20c4:	05000074 	movhi	r20,1
    20c8:	a5369184 	addi	r20,r20,-9658
    20cc:	e5c01d0e 	bge	fp,r23,2144 <___vfprintf_internal_r+0xb68>
    20d0:	dc812a15 	stw	r18,1192(sp)
    20d4:	058001c4 	movi	r22,7
    20d8:	a025883a 	mov	r18,r20
    20dc:	8029883a 	mov	r20,r16
    20e0:	dc012917 	ldw	r16,1188(sp)
    20e4:	00000306 	br	20f4 <___vfprintf_internal_r+0xb18>
    20e8:	bdfffc04 	addi	r23,r23,-16
    20ec:	4a400204 	addi	r9,r9,8
    20f0:	e5c0110e 	bge	fp,r23,2138 <___vfprintf_internal_r+0xb5c>
    20f4:	4c800015 	stw	r18,0(r9)
    20f8:	4f000115 	stw	fp,4(r9)
    20fc:	42000404 	addi	r8,r8,16
    2100:	18c00044 	addi	r3,r3,1
    2104:	da011d15 	stw	r8,1140(sp)
    2108:	d8c11c15 	stw	r3,1136(sp)
    210c:	b0fff60e 	bge	r22,r3,20e8 <___vfprintf_internal_r+0xb0c>
    2110:	8809883a 	mov	r4,r17
    2114:	800b883a 	mov	r5,r16
    2118:	d9811b04 	addi	r6,sp,1132
    211c:	00015a80 	call	15a8 <__sprint_r>
    2120:	103e741e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    2124:	bdfffc04 	addi	r23,r23,-16
    2128:	da011d17 	ldw	r8,1140(sp)
    212c:	d8c11c17 	ldw	r3,1136(sp)
    2130:	da400404 	addi	r9,sp,16
    2134:	e5ffef16 	blt	fp,r23,20f4 <___vfprintf_internal_r+0xb18>
    2138:	a021883a 	mov	r16,r20
    213c:	9029883a 	mov	r20,r18
    2140:	dc812a17 	ldw	r18,1192(sp)
    2144:	4d000015 	stw	r20,0(r9)
    2148:	4dc00115 	stw	r23,4(r9)
    214c:	45d1883a 	add	r8,r8,r23
    2150:	18c00044 	addi	r3,r3,1
    2154:	da011d15 	stw	r8,1140(sp)
    2158:	d8c11c15 	stw	r3,1136(sp)
    215c:	008001c4 	movi	r2,7
    2160:	10c13e16 	blt	r2,r3,265c <___vfprintf_internal_r+0x1080>
    2164:	4a400204 	addi	r9,r9,8
    2168:	8080400c 	andi	r2,r16,256
    216c:	1000831e 	bne	r2,zero,237c <___vfprintf_internal_r+0xda0>
    2170:	d8812b17 	ldw	r2,1196(sp)
    2174:	4cc00015 	stw	r19,0(r9)
    2178:	48800115 	stw	r2,4(r9)
    217c:	4091883a 	add	r8,r8,r2
    2180:	18c00044 	addi	r3,r3,1
    2184:	da011d15 	stw	r8,1140(sp)
    2188:	d8c11c15 	stw	r3,1136(sp)
    218c:	008001c4 	movi	r2,7
    2190:	10c05316 	blt	r2,r3,22e0 <___vfprintf_internal_r+0xd04>
    2194:	4a400204 	addi	r9,r9,8
    2198:	8400010c 	andi	r16,r16,4
    219c:	80002e26 	beq	r16,zero,2258 <___vfprintf_internal_r+0xc7c>
    21a0:	d8812e17 	ldw	r2,1208(sp)
    21a4:	d8c12817 	ldw	r3,1184(sp)
    21a8:	10e1c83a 	sub	r16,r2,r3
    21ac:	04002a0e 	bge	zero,r16,2258 <___vfprintf_internal_r+0xc7c>
    21b0:	04800404 	movi	r18,16
    21b4:	d8c11c17 	ldw	r3,1136(sp)
    21b8:	05c00074 	movhi	r23,1
    21bc:	bdf68d84 	addi	r23,r23,-9674
    21c0:	9400170e 	bge	r18,r16,2220 <___vfprintf_internal_r+0xc44>
    21c4:	04c001c4 	movi	r19,7
    21c8:	dd012917 	ldw	r20,1188(sp)
    21cc:	00000306 	br	21dc <___vfprintf_internal_r+0xc00>
    21d0:	843ffc04 	addi	r16,r16,-16
    21d4:	4a400204 	addi	r9,r9,8
    21d8:	9400110e 	bge	r18,r16,2220 <___vfprintf_internal_r+0xc44>
    21dc:	4dc00015 	stw	r23,0(r9)
    21e0:	4c800115 	stw	r18,4(r9)
    21e4:	42000404 	addi	r8,r8,16
    21e8:	18c00044 	addi	r3,r3,1
    21ec:	da011d15 	stw	r8,1140(sp)
    21f0:	d8c11c15 	stw	r3,1136(sp)
    21f4:	98fff60e 	bge	r19,r3,21d0 <___vfprintf_internal_r+0xbf4>
    21f8:	8809883a 	mov	r4,r17
    21fc:	a00b883a 	mov	r5,r20
    2200:	d9811b04 	addi	r6,sp,1132
    2204:	00015a80 	call	15a8 <__sprint_r>
    2208:	103e3a1e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    220c:	843ffc04 	addi	r16,r16,-16
    2210:	da011d17 	ldw	r8,1140(sp)
    2214:	d8c11c17 	ldw	r3,1136(sp)
    2218:	da400404 	addi	r9,sp,16
    221c:	943fef16 	blt	r18,r16,21dc <___vfprintf_internal_r+0xc00>
    2220:	4dc00015 	stw	r23,0(r9)
    2224:	4c000115 	stw	r16,4(r9)
    2228:	8211883a 	add	r8,r16,r8
    222c:	18c00044 	addi	r3,r3,1
    2230:	da011d15 	stw	r8,1140(sp)
    2234:	d8c11c15 	stw	r3,1136(sp)
    2238:	008001c4 	movi	r2,7
    223c:	10c0060e 	bge	r2,r3,2258 <___vfprintf_internal_r+0xc7c>
    2240:	d9412917 	ldw	r5,1188(sp)
    2244:	8809883a 	mov	r4,r17
    2248:	d9811b04 	addi	r6,sp,1132
    224c:	00015a80 	call	15a8 <__sprint_r>
    2250:	103e281e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    2254:	da011d17 	ldw	r8,1140(sp)
    2258:	dd012817 	ldw	r20,1184(sp)
    225c:	d9012e17 	ldw	r4,1208(sp)
    2260:	a100010e 	bge	r20,r4,2268 <___vfprintf_internal_r+0xc8c>
    2264:	2029883a 	mov	r20,r4
    2268:	d8812c17 	ldw	r2,1200(sp)
    226c:	1505883a 	add	r2,r2,r20
    2270:	d8812c15 	stw	r2,1200(sp)
    2274:	4000b91e 	bne	r8,zero,255c <___vfprintf_internal_r+0xf80>
    2278:	d8011c15 	stw	zero,1136(sp)
    227c:	a8800007 	ldb	r2,0(r21)
    2280:	da400404 	addi	r9,sp,16
    2284:	103d0d1e 	bne	r2,zero,16bc <___vfprintf_internal_r+0xe0>
    2288:	a825883a 	mov	r18,r21
    228c:	003d2306 	br	171c <___vfprintf_internal_r+0x140>
    2290:	d9412917 	ldw	r5,1188(sp)
    2294:	8809883a 	mov	r4,r17
    2298:	d9811b04 	addi	r6,sp,1132
    229c:	00015a80 	call	15a8 <__sprint_r>
    22a0:	103e141e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    22a4:	da011d17 	ldw	r8,1140(sp)
    22a8:	da400404 	addi	r9,sp,16
    22ac:	8080004c 	andi	r2,r16,1
    22b0:	103fb926 	beq	r2,zero,2198 <___vfprintf_internal_r+0xbbc>
    22b4:	d8c11c17 	ldw	r3,1136(sp)
    22b8:	d9013717 	ldw	r4,1244(sp)
    22bc:	00800044 	movi	r2,1
    22c0:	48800115 	stw	r2,4(r9)
    22c4:	49000015 	stw	r4,0(r9)
    22c8:	4091883a 	add	r8,r8,r2
    22cc:	1887883a 	add	r3,r3,r2
    22d0:	da011d15 	stw	r8,1140(sp)
    22d4:	d8c11c15 	stw	r3,1136(sp)
    22d8:	008001c4 	movi	r2,7
    22dc:	10ffad0e 	bge	r2,r3,2194 <___vfprintf_internal_r+0xbb8>
    22e0:	d9412917 	ldw	r5,1188(sp)
    22e4:	8809883a 	mov	r4,r17
    22e8:	d9811b04 	addi	r6,sp,1132
    22ec:	00015a80 	call	15a8 <__sprint_r>
    22f0:	103e001e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    22f4:	da400404 	addi	r9,sp,16
    22f8:	da011d17 	ldw	r8,1140(sp)
    22fc:	003fa606 	br	2198 <___vfprintf_internal_r+0xbbc>
    2300:	18803fcc 	andi	r2,r3,255
    2304:	00c00044 	movi	r3,1
    2308:	10c10126 	beq	r2,r3,2710 <___vfprintf_internal_r+0x1134>
    230c:	00c00084 	movi	r3,2
    2310:	10c0ed26 	beq	r2,r3,26c8 <___vfprintf_internal_r+0x10ec>
    2314:	d8c10dc4 	addi	r3,sp,1079
    2318:	b808d0fa 	srli	r4,r23,3
    231c:	b00a977a 	slli	r5,r22,29
    2320:	b02cd0fa 	srli	r22,r22,3
    2324:	bdc001cc 	andi	r23,r23,7
    2328:	b8800c04 	addi	r2,r23,48
    232c:	292eb03a 	or	r23,r5,r4
    2330:	18800005 	stb	r2,0(r3)
    2334:	bd88b03a 	or	r4,r23,r22
    2338:	1827883a 	mov	r19,r3
    233c:	18ffffc4 	addi	r3,r3,-1
    2340:	203ff51e 	bne	r4,zero,2318 <___vfprintf_internal_r+0xd3c>
    2344:	8100004c 	andi	r4,r16,1
    2348:	980b883a 	mov	r5,r19
    234c:	20000726 	beq	r4,zero,236c <___vfprintf_internal_r+0xd90>
    2350:	10803fcc 	andi	r2,r2,255
    2354:	1080201c 	xori	r2,r2,128
    2358:	10bfe004 	addi	r2,r2,-128
    235c:	01000c04 	movi	r4,48
    2360:	11000226 	beq	r2,r4,236c <___vfprintf_internal_r+0xd90>
    2364:	1827883a 	mov	r19,r3
    2368:	293fffc5 	stb	r4,-1(r5)
    236c:	d8812717 	ldw	r2,1180(sp)
    2370:	14c5c83a 	sub	r2,r2,r19
    2374:	d8812b15 	stw	r2,1196(sp)
    2378:	003e1f06 	br	1bf8 <___vfprintf_internal_r+0x61c>
    237c:	00801944 	movi	r2,101
    2380:	14807c0e 	bge	r2,r18,2574 <___vfprintf_internal_r+0xf98>
    2384:	d9013317 	ldw	r4,1228(sp)
    2388:	d9413417 	ldw	r5,1232(sp)
    238c:	000d883a 	mov	r6,zero
    2390:	000f883a 	mov	r7,zero
    2394:	d8c13b15 	stw	r3,1260(sp)
    2398:	da013a15 	stw	r8,1256(sp)
    239c:	da413c15 	stw	r9,1264(sp)
    23a0:	000a2740 	call	a274 <__eqdf2>
    23a4:	d8c13b17 	ldw	r3,1260(sp)
    23a8:	da013a17 	ldw	r8,1256(sp)
    23ac:	da413c17 	ldw	r9,1264(sp)
    23b0:	1001001e 	bne	r2,zero,27b4 <___vfprintf_internal_r+0x11d8>
    23b4:	00800074 	movhi	r2,1
    23b8:	10b68d04 	addi	r2,r2,-9676
    23bc:	48800015 	stw	r2,0(r9)
    23c0:	00800044 	movi	r2,1
    23c4:	48800115 	stw	r2,4(r9)
    23c8:	4091883a 	add	r8,r8,r2
    23cc:	1887883a 	add	r3,r3,r2
    23d0:	da011d15 	stw	r8,1140(sp)
    23d4:	d8c11c15 	stw	r3,1136(sp)
    23d8:	008001c4 	movi	r2,7
    23dc:	10c20316 	blt	r2,r3,2bec <___vfprintf_internal_r+0x1610>
    23e0:	4a400204 	addi	r9,r9,8
    23e4:	d8812417 	ldw	r2,1168(sp)
    23e8:	d8c13217 	ldw	r3,1224(sp)
    23ec:	10c00216 	blt	r2,r3,23f8 <___vfprintf_internal_r+0xe1c>
    23f0:	8080004c 	andi	r2,r16,1
    23f4:	103f6826 	beq	r2,zero,2198 <___vfprintf_internal_r+0xbbc>
    23f8:	d8c11c17 	ldw	r3,1136(sp)
    23fc:	d9013717 	ldw	r4,1244(sp)
    2400:	00800044 	movi	r2,1
    2404:	48800115 	stw	r2,4(r9)
    2408:	49000015 	stw	r4,0(r9)
    240c:	4091883a 	add	r8,r8,r2
    2410:	1887883a 	add	r3,r3,r2
    2414:	da011d15 	stw	r8,1140(sp)
    2418:	d8c11c15 	stw	r3,1136(sp)
    241c:	008001c4 	movi	r2,7
    2420:	10c2ce16 	blt	r2,r3,2f5c <___vfprintf_internal_r+0x1980>
    2424:	4a400204 	addi	r9,r9,8
    2428:	d8813217 	ldw	r2,1224(sp)
    242c:	14bfffc4 	addi	r18,r2,-1
    2430:	04bf590e 	bge	zero,r18,2198 <___vfprintf_internal_r+0xbbc>
    2434:	04c00404 	movi	r19,16
    2438:	d8c11c17 	ldw	r3,1136(sp)
    243c:	05000074 	movhi	r20,1
    2440:	a5369184 	addi	r20,r20,-9658
    2444:	9c818a0e 	bge	r19,r18,2a70 <___vfprintf_internal_r+0x1494>
    2448:	058001c4 	movi	r22,7
    244c:	ddc12917 	ldw	r23,1188(sp)
    2450:	00000306 	br	2460 <___vfprintf_internal_r+0xe84>
    2454:	4a400204 	addi	r9,r9,8
    2458:	94bffc04 	addi	r18,r18,-16
    245c:	9c81840e 	bge	r19,r18,2a70 <___vfprintf_internal_r+0x1494>
    2460:	4d000015 	stw	r20,0(r9)
    2464:	4cc00115 	stw	r19,4(r9)
    2468:	42000404 	addi	r8,r8,16
    246c:	18c00044 	addi	r3,r3,1
    2470:	da011d15 	stw	r8,1140(sp)
    2474:	d8c11c15 	stw	r3,1136(sp)
    2478:	b0fff60e 	bge	r22,r3,2454 <___vfprintf_internal_r+0xe78>
    247c:	8809883a 	mov	r4,r17
    2480:	b80b883a 	mov	r5,r23
    2484:	d9811b04 	addi	r6,sp,1132
    2488:	00015a80 	call	15a8 <__sprint_r>
    248c:	103d991e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    2490:	da011d17 	ldw	r8,1140(sp)
    2494:	d8c11c17 	ldw	r3,1136(sp)
    2498:	da400404 	addi	r9,sp,16
    249c:	003fee06 	br	2458 <___vfprintf_internal_r+0xe7c>
    24a0:	d8812e17 	ldw	r2,1208(sp)
    24a4:	d9012817 	ldw	r4,1184(sp)
    24a8:	112fc83a 	sub	r23,r2,r4
    24ac:	05ff000e 	bge	zero,r23,20b0 <___vfprintf_internal_r+0xad4>
    24b0:	07000404 	movi	fp,16
    24b4:	05000074 	movhi	r20,1
    24b8:	a5369184 	addi	r20,r20,-9658
    24bc:	e5c01d0e 	bge	fp,r23,2534 <___vfprintf_internal_r+0xf58>
    24c0:	dc812a15 	stw	r18,1192(sp)
    24c4:	058001c4 	movi	r22,7
    24c8:	a025883a 	mov	r18,r20
    24cc:	8029883a 	mov	r20,r16
    24d0:	dc012917 	ldw	r16,1188(sp)
    24d4:	00000306 	br	24e4 <___vfprintf_internal_r+0xf08>
    24d8:	bdfffc04 	addi	r23,r23,-16
    24dc:	4a400204 	addi	r9,r9,8
    24e0:	e5c0110e 	bge	fp,r23,2528 <___vfprintf_internal_r+0xf4c>
    24e4:	4c800015 	stw	r18,0(r9)
    24e8:	4f000115 	stw	fp,4(r9)
    24ec:	42000404 	addi	r8,r8,16
    24f0:	18c00044 	addi	r3,r3,1
    24f4:	da011d15 	stw	r8,1140(sp)
    24f8:	d8c11c15 	stw	r3,1136(sp)
    24fc:	b0fff60e 	bge	r22,r3,24d8 <___vfprintf_internal_r+0xefc>
    2500:	8809883a 	mov	r4,r17
    2504:	800b883a 	mov	r5,r16
    2508:	d9811b04 	addi	r6,sp,1132
    250c:	00015a80 	call	15a8 <__sprint_r>
    2510:	103d781e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    2514:	bdfffc04 	addi	r23,r23,-16
    2518:	da011d17 	ldw	r8,1140(sp)
    251c:	d8c11c17 	ldw	r3,1136(sp)
    2520:	da400404 	addi	r9,sp,16
    2524:	e5ffef16 	blt	fp,r23,24e4 <___vfprintf_internal_r+0xf08>
    2528:	a021883a 	mov	r16,r20
    252c:	9029883a 	mov	r20,r18
    2530:	dc812a17 	ldw	r18,1192(sp)
    2534:	4d000015 	stw	r20,0(r9)
    2538:	4dc00115 	stw	r23,4(r9)
    253c:	45d1883a 	add	r8,r8,r23
    2540:	18c00044 	addi	r3,r3,1
    2544:	da011d15 	stw	r8,1140(sp)
    2548:	d8c11c15 	stw	r3,1136(sp)
    254c:	008001c4 	movi	r2,7
    2550:	10c13616 	blt	r2,r3,2a2c <___vfprintf_internal_r+0x1450>
    2554:	4a400204 	addi	r9,r9,8
    2558:	003ed506 	br	20b0 <___vfprintf_internal_r+0xad4>
    255c:	d9412917 	ldw	r5,1188(sp)
    2560:	8809883a 	mov	r4,r17
    2564:	d9811b04 	addi	r6,sp,1132
    2568:	00015a80 	call	15a8 <__sprint_r>
    256c:	103f4226 	beq	r2,zero,2278 <___vfprintf_internal_r+0xc9c>
    2570:	003d6006 	br	1af4 <___vfprintf_internal_r+0x518>
    2574:	d9013217 	ldw	r4,1224(sp)
    2578:	00800044 	movi	r2,1
    257c:	4cc00015 	stw	r19,0(r9)
    2580:	1101000e 	bge	r2,r4,2984 <___vfprintf_internal_r+0x13a8>
    2584:	00800044 	movi	r2,1
    2588:	48800115 	stw	r2,4(r9)
    258c:	4091883a 	add	r8,r8,r2
    2590:	1887883a 	add	r3,r3,r2
    2594:	da011d15 	stw	r8,1140(sp)
    2598:	d8c11c15 	stw	r3,1136(sp)
    259c:	008001c4 	movi	r2,7
    25a0:	10c10c16 	blt	r2,r3,29d4 <___vfprintf_internal_r+0x13f8>
    25a4:	4a400204 	addi	r9,r9,8
    25a8:	d8813717 	ldw	r2,1244(sp)
    25ac:	48800015 	stw	r2,0(r9)
    25b0:	00800044 	movi	r2,1
    25b4:	48800115 	stw	r2,4(r9)
    25b8:	4091883a 	add	r8,r8,r2
    25bc:	1887883a 	add	r3,r3,r2
    25c0:	da011d15 	stw	r8,1140(sp)
    25c4:	d8c11c15 	stw	r3,1136(sp)
    25c8:	008001c4 	movi	r2,7
    25cc:	10c10a16 	blt	r2,r3,29f8 <___vfprintf_internal_r+0x141c>
    25d0:	4c800204 	addi	r18,r9,8
    25d4:	d9013317 	ldw	r4,1228(sp)
    25d8:	d9413417 	ldw	r5,1232(sp)
    25dc:	000d883a 	mov	r6,zero
    25e0:	000f883a 	mov	r7,zero
    25e4:	d8c13b15 	stw	r3,1260(sp)
    25e8:	da013a15 	stw	r8,1256(sp)
    25ec:	000a2d00 	call	a2d0 <__nedf2>
    25f0:	d8c13b17 	ldw	r3,1260(sp)
    25f4:	da013a17 	ldw	r8,1256(sp)
    25f8:	1000ba26 	beq	r2,zero,28e4 <___vfprintf_internal_r+0x1308>
    25fc:	d9013217 	ldw	r4,1224(sp)
    2600:	9cc00044 	addi	r19,r19,1
    2604:	94c00015 	stw	r19,0(r18)
    2608:	20bfffc4 	addi	r2,r4,-1
    260c:	90800115 	stw	r2,4(r18)
    2610:	4091883a 	add	r8,r8,r2
    2614:	18c00044 	addi	r3,r3,1
    2618:	da011d15 	stw	r8,1140(sp)
    261c:	d8c11c15 	stw	r3,1136(sp)
    2620:	008001c4 	movi	r2,7
    2624:	10c0e216 	blt	r2,r3,29b0 <___vfprintf_internal_r+0x13d4>
    2628:	94800204 	addi	r18,r18,8
    262c:	d9013517 	ldw	r4,1236(sp)
    2630:	d8811fc4 	addi	r2,sp,1151
    2634:	90800015 	stw	r2,0(r18)
    2638:	91000115 	stw	r4,4(r18)
    263c:	4111883a 	add	r8,r8,r4
    2640:	18c00044 	addi	r3,r3,1
    2644:	da011d15 	stw	r8,1140(sp)
    2648:	d8c11c15 	stw	r3,1136(sp)
    264c:	008001c4 	movi	r2,7
    2650:	10ff2316 	blt	r2,r3,22e0 <___vfprintf_internal_r+0xd04>
    2654:	92400204 	addi	r9,r18,8
    2658:	003ecf06 	br	2198 <___vfprintf_internal_r+0xbbc>
    265c:	d9412917 	ldw	r5,1188(sp)
    2660:	8809883a 	mov	r4,r17
    2664:	d9811b04 	addi	r6,sp,1132
    2668:	00015a80 	call	15a8 <__sprint_r>
    266c:	103d211e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    2670:	da011d17 	ldw	r8,1140(sp)
    2674:	d8c11c17 	ldw	r3,1136(sp)
    2678:	da400404 	addi	r9,sp,16
    267c:	003eba06 	br	2168 <___vfprintf_internal_r+0xb8c>
    2680:	d9412917 	ldw	r5,1188(sp)
    2684:	8809883a 	mov	r4,r17
    2688:	d9811b04 	addi	r6,sp,1132
    268c:	00015a80 	call	15a8 <__sprint_r>
    2690:	103d181e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    2694:	da011d17 	ldw	r8,1140(sp)
    2698:	d8c11c17 	ldw	r3,1136(sp)
    269c:	da400404 	addi	r9,sp,16
    26a0:	003e8006 	br	20a4 <___vfprintf_internal_r+0xac8>
    26a4:	d9412917 	ldw	r5,1188(sp)
    26a8:	8809883a 	mov	r4,r17
    26ac:	d9811b04 	addi	r6,sp,1132
    26b0:	00015a80 	call	15a8 <__sprint_r>
    26b4:	103d0f1e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    26b8:	da011d17 	ldw	r8,1140(sp)
    26bc:	d8c11c17 	ldw	r3,1136(sp)
    26c0:	da400404 	addi	r9,sp,16
    26c4:	003e6a06 	br	2070 <___vfprintf_internal_r+0xa94>
    26c8:	d9413617 	ldw	r5,1240(sp)
    26cc:	d8810dc4 	addi	r2,sp,1079
    26d0:	b8c003cc 	andi	r3,r23,15
    26d4:	b008973a 	slli	r4,r22,28
    26d8:	28c7883a 	add	r3,r5,r3
    26dc:	b82ed13a 	srli	r23,r23,4
    26e0:	18c00003 	ldbu	r3,0(r3)
    26e4:	b02cd13a 	srli	r22,r22,4
    26e8:	25eeb03a 	or	r23,r4,r23
    26ec:	10c00005 	stb	r3,0(r2)
    26f0:	bd86b03a 	or	r3,r23,r22
    26f4:	1027883a 	mov	r19,r2
    26f8:	10bfffc4 	addi	r2,r2,-1
    26fc:	183ff41e 	bne	r3,zero,26d0 <___vfprintf_internal_r+0x10f4>
    2700:	003f1a06 	br	236c <___vfprintf_internal_r+0xd90>
    2704:	d8012b15 	stw	zero,1196(sp)
    2708:	dcc10e04 	addi	r19,sp,1080
    270c:	003d3a06 	br	1bf8 <___vfprintf_internal_r+0x61c>
    2710:	b0025426 	beq	r22,zero,3064 <___vfprintf_internal_r+0x1a88>
    2714:	b807883a 	mov	r3,r23
    2718:	d8810dc4 	addi	r2,sp,1079
    271c:	882f883a 	mov	r23,r17
    2720:	04c00244 	movi	r19,9
    2724:	8023883a 	mov	r17,r16
    2728:	da412815 	stw	r9,1184(sp)
    272c:	1821883a 	mov	r16,r3
    2730:	8009883a 	mov	r4,r16
    2734:	b00b883a 	mov	r5,r22
    2738:	01800284 	movi	r6,10
    273c:	000f883a 	mov	r7,zero
    2740:	1029883a 	mov	r20,r2
    2744:	00093ac0 	call	93ac <__umoddi3>
    2748:	10800c04 	addi	r2,r2,48
    274c:	8009883a 	mov	r4,r16
    2750:	b00b883a 	mov	r5,r22
    2754:	a0800005 	stb	r2,0(r20)
    2758:	01800284 	movi	r6,10
    275c:	000f883a 	mov	r7,zero
    2760:	0008d5c0 	call	8d5c <__udivdi3>
    2764:	1021883a 	mov	r16,r2
    2768:	182d883a 	mov	r22,r3
    276c:	a0bfffc4 	addi	r2,r20,-1
    2770:	183fef1e 	bne	r3,zero,2730 <___vfprintf_internal_r+0x1154>
    2774:	9c3fee36 	bltu	r19,r16,2730 <___vfprintf_internal_r+0x1154>
    2778:	da412817 	ldw	r9,1184(sp)
    277c:	8005883a 	mov	r2,r16
    2780:	8821883a 	mov	r16,r17
    2784:	b823883a 	mov	r17,r23
    2788:	102f883a 	mov	r23,r2
    278c:	d8812717 	ldw	r2,1180(sp)
    2790:	a4ffffc4 	addi	r19,r20,-1
    2794:	bdc00c04 	addi	r23,r23,48
    2798:	14c5c83a 	sub	r2,r2,r19
    279c:	a5ffffc5 	stb	r23,-1(r20)
    27a0:	d8812b15 	stw	r2,1196(sp)
    27a4:	003d1406 	br	1bf8 <___vfprintf_internal_r+0x61c>
    27a8:	00c00044 	movi	r3,1
    27ac:	bd84b03a 	or	r2,r23,r22
    27b0:	003d0306 	br	1bc0 <___vfprintf_internal_r+0x5e4>
    27b4:	dc812417 	ldw	r18,1168(sp)
    27b8:	0481140e 	bge	zero,r18,2c0c <___vfprintf_internal_r+0x1630>
    27bc:	d9013217 	ldw	r4,1224(sp)
    27c0:	4cc00015 	stw	r19,0(r9)
    27c4:	9100ec16 	blt	r18,r4,2b78 <___vfprintf_internal_r+0x159c>
    27c8:	49000115 	stw	r4,4(r9)
    27cc:	4111883a 	add	r8,r8,r4
    27d0:	18c00044 	addi	r3,r3,1
    27d4:	da011d15 	stw	r8,1140(sp)
    27d8:	d8c11c15 	stw	r3,1136(sp)
    27dc:	008001c4 	movi	r2,7
    27e0:	10c23616 	blt	r2,r3,30bc <___vfprintf_internal_r+0x1ae0>
    27e4:	4a400204 	addi	r9,r9,8
    27e8:	d8813217 	ldw	r2,1224(sp)
    27ec:	90a5c83a 	sub	r18,r18,r2
    27f0:	04beae0e 	bge	zero,r18,22ac <___vfprintf_internal_r+0xcd0>
    27f4:	04c00404 	movi	r19,16
    27f8:	d8c11c17 	ldw	r3,1136(sp)
    27fc:	05000074 	movhi	r20,1
    2800:	a5369184 	addi	r20,r20,-9658
    2804:	9c81dd0e 	bge	r19,r18,2f7c <___vfprintf_internal_r+0x19a0>
    2808:	058001c4 	movi	r22,7
    280c:	ddc12917 	ldw	r23,1188(sp)
    2810:	00000306 	br	2820 <___vfprintf_internal_r+0x1244>
    2814:	4a400204 	addi	r9,r9,8
    2818:	94bffc04 	addi	r18,r18,-16
    281c:	9c81d70e 	bge	r19,r18,2f7c <___vfprintf_internal_r+0x19a0>
    2820:	4d000015 	stw	r20,0(r9)
    2824:	4cc00115 	stw	r19,4(r9)
    2828:	42000404 	addi	r8,r8,16
    282c:	18c00044 	addi	r3,r3,1
    2830:	da011d15 	stw	r8,1140(sp)
    2834:	d8c11c15 	stw	r3,1136(sp)
    2838:	b0fff60e 	bge	r22,r3,2814 <___vfprintf_internal_r+0x1238>
    283c:	8809883a 	mov	r4,r17
    2840:	b80b883a 	mov	r5,r23
    2844:	d9811b04 	addi	r6,sp,1132
    2848:	00015a80 	call	15a8 <__sprint_r>
    284c:	103ca91e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    2850:	da011d17 	ldw	r8,1140(sp)
    2854:	d8c11c17 	ldw	r3,1136(sp)
    2858:	da400404 	addi	r9,sp,16
    285c:	003fee06 	br	2818 <___vfprintf_internal_r+0x123c>
    2860:	d9412917 	ldw	r5,1188(sp)
    2864:	8809883a 	mov	r4,r17
    2868:	d9811b04 	addi	r6,sp,1132
    286c:	00015a80 	call	15a8 <__sprint_r>
    2870:	103ca01e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    2874:	da011d17 	ldw	r8,1140(sp)
    2878:	d8c11c17 	ldw	r3,1136(sp)
    287c:	da400404 	addi	r9,sp,16
    2880:	003dee06 	br	203c <___vfprintf_internal_r+0xa60>
    2884:	00c00084 	movi	r3,2
    2888:	bd84b03a 	or	r2,r23,r22
    288c:	d8012585 	stb	zero,1174(sp)
    2890:	003ccb06 	br	1bc0 <___vfprintf_internal_r+0x5e4>
    2894:	8080040c 	andi	r2,r16,16
    2898:	1000ae26 	beq	r2,zero,2b54 <___vfprintf_internal_r+0x1578>
    289c:	d9012d17 	ldw	r4,1204(sp)
    28a0:	25c00017 	ldw	r23,0(r4)
    28a4:	21000104 	addi	r4,r4,4
    28a8:	d9012d15 	stw	r4,1204(sp)
    28ac:	b82dd7fa 	srai	r22,r23,31
    28b0:	b005883a 	mov	r2,r22
    28b4:	003cb906 	br	1b9c <___vfprintf_internal_r+0x5c0>
    28b8:	8080040c 	andi	r2,r16,16
    28bc:	10007026 	beq	r2,zero,2a80 <___vfprintf_internal_r+0x14a4>
    28c0:	d8812d17 	ldw	r2,1204(sp)
    28c4:	002d883a 	mov	r22,zero
    28c8:	00c00044 	movi	r3,1
    28cc:	15c00017 	ldw	r23,0(r2)
    28d0:	10800104 	addi	r2,r2,4
    28d4:	d8812d15 	stw	r2,1204(sp)
    28d8:	d8012585 	stb	zero,1174(sp)
    28dc:	b805883a 	mov	r2,r23
    28e0:	003cb706 	br	1bc0 <___vfprintf_internal_r+0x5e4>
    28e4:	d8813217 	ldw	r2,1224(sp)
    28e8:	14ffffc4 	addi	r19,r2,-1
    28ec:	04ff4f0e 	bge	zero,r19,262c <___vfprintf_internal_r+0x1050>
    28f0:	05800404 	movi	r22,16
    28f4:	05000074 	movhi	r20,1
    28f8:	a5369184 	addi	r20,r20,-9658
    28fc:	b4c0470e 	bge	r22,r19,2a1c <___vfprintf_internal_r+0x1440>
    2900:	05c001c4 	movi	r23,7
    2904:	df012917 	ldw	fp,1188(sp)
    2908:	00000306 	br	2918 <___vfprintf_internal_r+0x133c>
    290c:	94800204 	addi	r18,r18,8
    2910:	9cfffc04 	addi	r19,r19,-16
    2914:	b4c0410e 	bge	r22,r19,2a1c <___vfprintf_internal_r+0x1440>
    2918:	95000015 	stw	r20,0(r18)
    291c:	95800115 	stw	r22,4(r18)
    2920:	42000404 	addi	r8,r8,16
    2924:	18c00044 	addi	r3,r3,1
    2928:	da011d15 	stw	r8,1140(sp)
    292c:	d8c11c15 	stw	r3,1136(sp)
    2930:	b8fff60e 	bge	r23,r3,290c <___vfprintf_internal_r+0x1330>
    2934:	8809883a 	mov	r4,r17
    2938:	e00b883a 	mov	r5,fp
    293c:	d9811b04 	addi	r6,sp,1132
    2940:	00015a80 	call	15a8 <__sprint_r>
    2944:	103c6b1e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    2948:	da011d17 	ldw	r8,1140(sp)
    294c:	d8c11c17 	ldw	r3,1136(sp)
    2950:	dc800404 	addi	r18,sp,16
    2954:	003fee06 	br	2910 <___vfprintf_internal_r+0x1334>
    2958:	8080040c 	andi	r2,r16,16
    295c:	10005326 	beq	r2,zero,2aac <___vfprintf_internal_r+0x14d0>
    2960:	d8c12d17 	ldw	r3,1204(sp)
    2964:	002d883a 	mov	r22,zero
    2968:	1dc00017 	ldw	r23,0(r3)
    296c:	18c00104 	addi	r3,r3,4
    2970:	d8c12d15 	stw	r3,1204(sp)
    2974:	b805883a 	mov	r2,r23
    2978:	0007883a 	mov	r3,zero
    297c:	d8012585 	stb	zero,1174(sp)
    2980:	003c8f06 	br	1bc0 <___vfprintf_internal_r+0x5e4>
    2984:	8088703a 	and	r4,r16,r2
    2988:	203efe1e 	bne	r4,zero,2584 <___vfprintf_internal_r+0xfa8>
    298c:	48800115 	stw	r2,4(r9)
    2990:	42000044 	addi	r8,r8,1
    2994:	18c00044 	addi	r3,r3,1
    2998:	da011d15 	stw	r8,1140(sp)
    299c:	d8c11c15 	stw	r3,1136(sp)
    29a0:	008001c4 	movi	r2,7
    29a4:	10c00216 	blt	r2,r3,29b0 <___vfprintf_internal_r+0x13d4>
    29a8:	4c800204 	addi	r18,r9,8
    29ac:	003f1f06 	br	262c <___vfprintf_internal_r+0x1050>
    29b0:	d9412917 	ldw	r5,1188(sp)
    29b4:	8809883a 	mov	r4,r17
    29b8:	d9811b04 	addi	r6,sp,1132
    29bc:	00015a80 	call	15a8 <__sprint_r>
    29c0:	103c4c1e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    29c4:	dc800404 	addi	r18,sp,16
    29c8:	da011d17 	ldw	r8,1140(sp)
    29cc:	d8c11c17 	ldw	r3,1136(sp)
    29d0:	003f1606 	br	262c <___vfprintf_internal_r+0x1050>
    29d4:	d9412917 	ldw	r5,1188(sp)
    29d8:	8809883a 	mov	r4,r17
    29dc:	d9811b04 	addi	r6,sp,1132
    29e0:	00015a80 	call	15a8 <__sprint_r>
    29e4:	103c431e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    29e8:	da011d17 	ldw	r8,1140(sp)
    29ec:	d8c11c17 	ldw	r3,1136(sp)
    29f0:	da400404 	addi	r9,sp,16
    29f4:	003eec06 	br	25a8 <___vfprintf_internal_r+0xfcc>
    29f8:	d9412917 	ldw	r5,1188(sp)
    29fc:	8809883a 	mov	r4,r17
    2a00:	d9811b04 	addi	r6,sp,1132
    2a04:	00015a80 	call	15a8 <__sprint_r>
    2a08:	103c3a1e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    2a0c:	da011d17 	ldw	r8,1140(sp)
    2a10:	d8c11c17 	ldw	r3,1136(sp)
    2a14:	dc800404 	addi	r18,sp,16
    2a18:	003eee06 	br	25d4 <___vfprintf_internal_r+0xff8>
    2a1c:	95000015 	stw	r20,0(r18)
    2a20:	94c00115 	stw	r19,4(r18)
    2a24:	44d1883a 	add	r8,r8,r19
    2a28:	003efa06 	br	2614 <___vfprintf_internal_r+0x1038>
    2a2c:	d9412917 	ldw	r5,1188(sp)
    2a30:	8809883a 	mov	r4,r17
    2a34:	d9811b04 	addi	r6,sp,1132
    2a38:	00015a80 	call	15a8 <__sprint_r>
    2a3c:	103c2d1e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    2a40:	da011d17 	ldw	r8,1140(sp)
    2a44:	d8c11c17 	ldw	r3,1136(sp)
    2a48:	da400404 	addi	r9,sp,16
    2a4c:	003d9806 	br	20b0 <___vfprintf_internal_r+0xad4>
    2a50:	8080100c 	andi	r2,r16,64
    2a54:	10011626 	beq	r2,zero,2eb0 <___vfprintf_internal_r+0x18d4>
    2a58:	d8c12d17 	ldw	r3,1204(sp)
    2a5c:	002d883a 	mov	r22,zero
    2a60:	1dc0000b 	ldhu	r23,0(r3)
    2a64:	18c00104 	addi	r3,r3,4
    2a68:	d8c12d15 	stw	r3,1204(sp)
    2a6c:	003cc106 	br	1d74 <___vfprintf_internal_r+0x798>
    2a70:	4d000015 	stw	r20,0(r9)
    2a74:	4c800115 	stw	r18,4(r9)
    2a78:	4491883a 	add	r8,r8,r18
    2a7c:	003dc006 	br	2180 <___vfprintf_internal_r+0xba4>
    2a80:	8080100c 	andi	r2,r16,64
    2a84:	10010126 	beq	r2,zero,2e8c <___vfprintf_internal_r+0x18b0>
    2a88:	d8c12d17 	ldw	r3,1204(sp)
    2a8c:	002d883a 	mov	r22,zero
    2a90:	1dc0000b 	ldhu	r23,0(r3)
    2a94:	18c00104 	addi	r3,r3,4
    2a98:	d8c12d15 	stw	r3,1204(sp)
    2a9c:	b805883a 	mov	r2,r23
    2aa0:	00c00044 	movi	r3,1
    2aa4:	d8012585 	stb	zero,1174(sp)
    2aa8:	003c4506 	br	1bc0 <___vfprintf_internal_r+0x5e4>
    2aac:	8080100c 	andi	r2,r16,64
    2ab0:	10010526 	beq	r2,zero,2ec8 <___vfprintf_internal_r+0x18ec>
    2ab4:	d9012d17 	ldw	r4,1204(sp)
    2ab8:	002d883a 	mov	r22,zero
    2abc:	0007883a 	mov	r3,zero
    2ac0:	25c0000b 	ldhu	r23,0(r4)
    2ac4:	21000104 	addi	r4,r4,4
    2ac8:	d9012d15 	stw	r4,1204(sp)
    2acc:	b805883a 	mov	r2,r23
    2ad0:	d8012585 	stb	zero,1174(sp)
    2ad4:	003c3a06 	br	1bc0 <___vfprintf_internal_r+0x5e4>
    2ad8:	d8812d17 	ldw	r2,1204(sp)
    2adc:	15800017 	ldw	r22,0(r2)
    2ae0:	15000117 	ldw	r20,4(r2)
    2ae4:	10800204 	addi	r2,r2,8
    2ae8:	d8812d15 	stw	r2,1204(sp)
    2aec:	dd813315 	stw	r22,1228(sp)
    2af0:	dd013415 	stw	r20,1232(sp)
    2af4:	003c5906 	br	1c5c <___vfprintf_internal_r+0x680>
    2af8:	00c00084 	movi	r3,2
    2afc:	d8012585 	stb	zero,1174(sp)
    2b00:	003c2f06 	br	1bc0 <___vfprintf_internal_r+0x5e4>
    2b04:	ac800007 	ldb	r18,0(r21)
    2b08:	003b1006 	br	174c <___vfprintf_internal_r+0x170>
    2b0c:	8080040c 	andi	r2,r16,16
    2b10:	1000091e 	bne	r2,zero,2b38 <___vfprintf_internal_r+0x155c>
    2b14:	8400100c 	andi	r16,r16,64
    2b18:	80000726 	beq	r16,zero,2b38 <___vfprintf_internal_r+0x155c>
    2b1c:	d8c12d17 	ldw	r3,1204(sp)
    2b20:	d9012c17 	ldw	r4,1200(sp)
    2b24:	18800017 	ldw	r2,0(r3)
    2b28:	18c00104 	addi	r3,r3,4
    2b2c:	d8c12d15 	stw	r3,1204(sp)
    2b30:	1100000d 	sth	r4,0(r2)
    2b34:	003adf06 	br	16b4 <___vfprintf_internal_r+0xd8>
    2b38:	d8c12d17 	ldw	r3,1204(sp)
    2b3c:	d9012c17 	ldw	r4,1200(sp)
    2b40:	18800017 	ldw	r2,0(r3)
    2b44:	18c00104 	addi	r3,r3,4
    2b48:	d8c12d15 	stw	r3,1204(sp)
    2b4c:	11000015 	stw	r4,0(r2)
    2b50:	003ad806 	br	16b4 <___vfprintf_internal_r+0xd8>
    2b54:	8080100c 	andi	r2,r16,64
    2b58:	1000c526 	beq	r2,zero,2e70 <___vfprintf_internal_r+0x1894>
    2b5c:	d8812d17 	ldw	r2,1204(sp)
    2b60:	15c0000f 	ldh	r23,0(r2)
    2b64:	10800104 	addi	r2,r2,4
    2b68:	d8812d15 	stw	r2,1204(sp)
    2b6c:	b82dd7fa 	srai	r22,r23,31
    2b70:	b005883a 	mov	r2,r22
    2b74:	003c0906 	br	1b9c <___vfprintf_internal_r+0x5c0>
    2b78:	4c800115 	stw	r18,4(r9)
    2b7c:	9211883a 	add	r8,r18,r8
    2b80:	18c00044 	addi	r3,r3,1
    2b84:	da011d15 	stw	r8,1140(sp)
    2b88:	d8c11c15 	stw	r3,1136(sp)
    2b8c:	008001c4 	movi	r2,7
    2b90:	10c14016 	blt	r2,r3,3094 <___vfprintf_internal_r+0x1ab8>
    2b94:	4a400204 	addi	r9,r9,8
    2b98:	d8813717 	ldw	r2,1244(sp)
    2b9c:	9ca7883a 	add	r19,r19,r18
    2ba0:	48800015 	stw	r2,0(r9)
    2ba4:	00800044 	movi	r2,1
    2ba8:	48800115 	stw	r2,4(r9)
    2bac:	4091883a 	add	r8,r8,r2
    2bb0:	1887883a 	add	r3,r3,r2
    2bb4:	da011d15 	stw	r8,1140(sp)
    2bb8:	d8c11c15 	stw	r3,1136(sp)
    2bbc:	008001c4 	movi	r2,7
    2bc0:	10c12c16 	blt	r2,r3,3074 <___vfprintf_internal_r+0x1a98>
    2bc4:	4a400204 	addi	r9,r9,8
    2bc8:	d9013217 	ldw	r4,1224(sp)
    2bcc:	da011d17 	ldw	r8,1140(sp)
    2bd0:	d8c11c17 	ldw	r3,1136(sp)
    2bd4:	24a5c83a 	sub	r18,r4,r18
    2bd8:	4cc00015 	stw	r19,0(r9)
    2bdc:	003fa506 	br	2a74 <___vfprintf_internal_r+0x1498>
    2be0:	04c00074 	movhi	r19,1
    2be4:	9cf67e04 	addi	r19,r19,-9736
    2be8:	003c2e06 	br	1ca4 <___vfprintf_internal_r+0x6c8>
    2bec:	d9412917 	ldw	r5,1188(sp)
    2bf0:	8809883a 	mov	r4,r17
    2bf4:	d9811b04 	addi	r6,sp,1132
    2bf8:	00015a80 	call	15a8 <__sprint_r>
    2bfc:	103bbd1e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    2c00:	da011d17 	ldw	r8,1140(sp)
    2c04:	da400404 	addi	r9,sp,16
    2c08:	003df606 	br	23e4 <___vfprintf_internal_r+0xe08>
    2c0c:	00800074 	movhi	r2,1
    2c10:	10b68d04 	addi	r2,r2,-9676
    2c14:	48800015 	stw	r2,0(r9)
    2c18:	00800044 	movi	r2,1
    2c1c:	48800115 	stw	r2,4(r9)
    2c20:	4091883a 	add	r8,r8,r2
    2c24:	1887883a 	add	r3,r3,r2
    2c28:	da011d15 	stw	r8,1140(sp)
    2c2c:	d8c11c15 	stw	r3,1136(sp)
    2c30:	008001c4 	movi	r2,7
    2c34:	10c0bc16 	blt	r2,r3,2f28 <___vfprintf_internal_r+0x194c>
    2c38:	4a400204 	addi	r9,r9,8
    2c3c:	9000041e 	bne	r18,zero,2c50 <___vfprintf_internal_r+0x1674>
    2c40:	d8c13217 	ldw	r3,1224(sp)
    2c44:	1800021e 	bne	r3,zero,2c50 <___vfprintf_internal_r+0x1674>
    2c48:	8080004c 	andi	r2,r16,1
    2c4c:	103d5226 	beq	r2,zero,2198 <___vfprintf_internal_r+0xbbc>
    2c50:	d8c11c17 	ldw	r3,1136(sp)
    2c54:	d9013717 	ldw	r4,1244(sp)
    2c58:	00800044 	movi	r2,1
    2c5c:	48800115 	stw	r2,4(r9)
    2c60:	49000015 	stw	r4,0(r9)
    2c64:	4091883a 	add	r8,r8,r2
    2c68:	1887883a 	add	r3,r3,r2
    2c6c:	da011d15 	stw	r8,1140(sp)
    2c70:	d8c11c15 	stw	r3,1136(sp)
    2c74:	008001c4 	movi	r2,7
    2c78:	10c14516 	blt	r2,r3,3190 <___vfprintf_internal_r+0x1bb4>
    2c7c:	4a400204 	addi	r9,r9,8
    2c80:	04a5c83a 	sub	r18,zero,r18
    2c84:	0480d70e 	bge	zero,r18,2fe4 <___vfprintf_internal_r+0x1a08>
    2c88:	05800404 	movi	r22,16
    2c8c:	05000074 	movhi	r20,1
    2c90:	a5369184 	addi	r20,r20,-9658
    2c94:	b480db0e 	bge	r22,r18,3004 <___vfprintf_internal_r+0x1a28>
    2c98:	05c001c4 	movi	r23,7
    2c9c:	df012917 	ldw	fp,1188(sp)
    2ca0:	00000306 	br	2cb0 <___vfprintf_internal_r+0x16d4>
    2ca4:	4a400204 	addi	r9,r9,8
    2ca8:	94bffc04 	addi	r18,r18,-16
    2cac:	b480d50e 	bge	r22,r18,3004 <___vfprintf_internal_r+0x1a28>
    2cb0:	4d000015 	stw	r20,0(r9)
    2cb4:	4d800115 	stw	r22,4(r9)
    2cb8:	42000404 	addi	r8,r8,16
    2cbc:	18c00044 	addi	r3,r3,1
    2cc0:	da011d15 	stw	r8,1140(sp)
    2cc4:	d8c11c15 	stw	r3,1136(sp)
    2cc8:	b8fff60e 	bge	r23,r3,2ca4 <___vfprintf_internal_r+0x16c8>
    2ccc:	8809883a 	mov	r4,r17
    2cd0:	e00b883a 	mov	r5,fp
    2cd4:	d9811b04 	addi	r6,sp,1132
    2cd8:	00015a80 	call	15a8 <__sprint_r>
    2cdc:	103b851e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    2ce0:	da011d17 	ldw	r8,1140(sp)
    2ce4:	d8c11c17 	ldw	r3,1136(sp)
    2ce8:	da400404 	addi	r9,sp,16
    2cec:	003fee06 	br	2ca8 <___vfprintf_internal_r+0x16cc>
    2cf0:	da413c15 	stw	r9,1264(sp)
    2cf4:	00084740 	call	8474 <__isnand>
    2cf8:	da413c17 	ldw	r9,1264(sp)
    2cfc:	10007e1e 	bne	r2,zero,2ef8 <___vfprintf_internal_r+0x191c>
    2d00:	00bfffc4 	movi	r2,-1
    2d04:	e0816a26 	beq	fp,r2,32b0 <___vfprintf_internal_r+0x1cd4>
    2d08:	008019c4 	movi	r2,103
    2d0c:	90816526 	beq	r18,r2,32a4 <___vfprintf_internal_r+0x1cc8>
    2d10:	008011c4 	movi	r2,71
    2d14:	90816326 	beq	r18,r2,32a4 <___vfprintf_internal_r+0x1cc8>
    2d18:	80c04014 	ori	r3,r16,256
    2d1c:	d8c12a15 	stw	r3,1192(sp)
    2d20:	a0016516 	blt	r20,zero,32b8 <___vfprintf_internal_r+0x1cdc>
    2d24:	d8012f05 	stb	zero,1212(sp)
    2d28:	00801984 	movi	r2,102
    2d2c:	9080f226 	beq	r18,r2,30f8 <___vfprintf_internal_r+0x1b1c>
    2d30:	00801184 	movi	r2,70
    2d34:	9080f026 	beq	r18,r2,30f8 <___vfprintf_internal_r+0x1b1c>
    2d38:	00801944 	movi	r2,101
    2d3c:	90818d26 	beq	r18,r2,3374 <___vfprintf_internal_r+0x1d98>
    2d40:	00801144 	movi	r2,69
    2d44:	90818b26 	beq	r18,r2,3374 <___vfprintf_internal_r+0x1d98>
    2d48:	e02f883a 	mov	r23,fp
    2d4c:	d8812404 	addi	r2,sp,1168
    2d50:	d8800115 	stw	r2,4(sp)
    2d54:	d8812304 	addi	r2,sp,1164
    2d58:	d8800215 	stw	r2,8(sp)
    2d5c:	d8812204 	addi	r2,sp,1160
    2d60:	ddc00015 	stw	r23,0(sp)
    2d64:	d8800315 	stw	r2,12(sp)
    2d68:	8809883a 	mov	r4,r17
    2d6c:	b00b883a 	mov	r5,r22
    2d70:	a00d883a 	mov	r6,r20
    2d74:	01c00084 	movi	r7,2
    2d78:	da413c15 	stw	r9,1264(sp)
    2d7c:	000382c0 	call	382c <_dtoa_r>
    2d80:	1027883a 	mov	r19,r2
    2d84:	008019c4 	movi	r2,103
    2d88:	da413c17 	ldw	r9,1264(sp)
    2d8c:	9081951e 	bne	r18,r2,33e4 <___vfprintf_internal_r+0x1e08>
    2d90:	8080004c 	andi	r2,r16,1
    2d94:	10017926 	beq	r2,zero,337c <___vfprintf_internal_r+0x1da0>
    2d98:	00801184 	movi	r2,70
    2d9c:	9dc7883a 	add	r3,r19,r23
    2da0:	9080e626 	beq	r18,r2,313c <___vfprintf_internal_r+0x1b60>
    2da4:	b009883a 	mov	r4,r22
    2da8:	a00b883a 	mov	r5,r20
    2dac:	000d883a 	mov	r6,zero
    2db0:	000f883a 	mov	r7,zero
    2db4:	d8c13b15 	stw	r3,1260(sp)
    2db8:	da413c15 	stw	r9,1264(sp)
    2dbc:	000a2740 	call	a274 <__eqdf2>
    2dc0:	d8c13b17 	ldw	r3,1260(sp)
    2dc4:	da413c17 	ldw	r9,1264(sp)
    2dc8:	10000726 	beq	r2,zero,2de8 <___vfprintf_internal_r+0x180c>
    2dcc:	d8812217 	ldw	r2,1160(sp)
    2dd0:	10c18a2e 	bgeu	r2,r3,33fc <___vfprintf_internal_r+0x1e20>
    2dd4:	01000c04 	movi	r4,48
    2dd8:	11000005 	stb	r4,0(r2)
    2ddc:	10800044 	addi	r2,r2,1
    2de0:	d8812215 	stw	r2,1160(sp)
    2de4:	10fffc1e 	bne	r2,r3,2dd8 <___vfprintf_internal_r+0x17fc>
    2de8:	1cc7c83a 	sub	r3,r3,r19
    2dec:	d8c13215 	stw	r3,1224(sp)
    2df0:	008019c4 	movi	r2,103
    2df4:	9080fa26 	beq	r18,r2,31e0 <___vfprintf_internal_r+0x1c04>
    2df8:	008011c4 	movi	r2,71
    2dfc:	9080f826 	beq	r18,r2,31e0 <___vfprintf_internal_r+0x1c04>
    2e00:	00801984 	movi	r2,102
    2e04:	90818e1e 	bne	r18,r2,3440 <___vfprintf_internal_r+0x1e64>
    2e08:	d8812417 	ldw	r2,1168(sp)
    2e0c:	d8812b15 	stw	r2,1196(sp)
    2e10:	00817c0e 	bge	zero,r2,3404 <___vfprintf_internal_r+0x1e28>
    2e14:	e000021e 	bne	fp,zero,2e20 <___vfprintf_internal_r+0x1844>
    2e18:	8400004c 	andi	r16,r16,1
    2e1c:	80000426 	beq	r16,zero,2e30 <___vfprintf_internal_r+0x1854>
    2e20:	d8812b17 	ldw	r2,1196(sp)
    2e24:	e2000044 	addi	r8,fp,1
    2e28:	1205883a 	add	r2,r2,r8
    2e2c:	d8812b15 	stw	r2,1196(sp)
    2e30:	d8812815 	stw	r2,1184(sp)
    2e34:	10010b16 	blt	r2,zero,3264 <___vfprintf_internal_r+0x1c88>
    2e38:	ddc12f07 	ldb	r23,1212(sp)
    2e3c:	b800e426 	beq	r23,zero,31d0 <___vfprintf_internal_r+0x1bf4>
    2e40:	00800b44 	movi	r2,45
    2e44:	d8812585 	stb	r2,1174(sp)
    2e48:	dc012a17 	ldw	r16,1192(sp)
    2e4c:	d8013115 	stw	zero,1220(sp)
    2e50:	003b7306 	br	1c20 <___vfprintf_internal_r+0x644>
    2e54:	d8812b17 	ldw	r2,1196(sp)
    2e58:	d8812815 	stw	r2,1184(sp)
    2e5c:	10005716 	blt	r2,zero,2fbc <___vfprintf_internal_r+0x19e0>
    2e60:	d8812583 	ldbu	r2,1174(sp)
    2e64:	ddc12d15 	stw	r23,1204(sp)
    2e68:	d8013115 	stw	zero,1220(sp)
    2e6c:	003b6806 	br	1c10 <___vfprintf_internal_r+0x634>
    2e70:	d8c12d17 	ldw	r3,1204(sp)
    2e74:	1dc00017 	ldw	r23,0(r3)
    2e78:	18c00104 	addi	r3,r3,4
    2e7c:	d8c12d15 	stw	r3,1204(sp)
    2e80:	b82dd7fa 	srai	r22,r23,31
    2e84:	b005883a 	mov	r2,r22
    2e88:	003b4406 	br	1b9c <___vfprintf_internal_r+0x5c0>
    2e8c:	d9012d17 	ldw	r4,1204(sp)
    2e90:	002d883a 	mov	r22,zero
    2e94:	00c00044 	movi	r3,1
    2e98:	25c00017 	ldw	r23,0(r4)
    2e9c:	21000104 	addi	r4,r4,4
    2ea0:	d9012d15 	stw	r4,1204(sp)
    2ea4:	b805883a 	mov	r2,r23
    2ea8:	d8012585 	stb	zero,1174(sp)
    2eac:	003b4406 	br	1bc0 <___vfprintf_internal_r+0x5e4>
    2eb0:	d9012d17 	ldw	r4,1204(sp)
    2eb4:	002d883a 	mov	r22,zero
    2eb8:	25c00017 	ldw	r23,0(r4)
    2ebc:	21000104 	addi	r4,r4,4
    2ec0:	d9012d15 	stw	r4,1204(sp)
    2ec4:	003bab06 	br	1d74 <___vfprintf_internal_r+0x798>
    2ec8:	d8812d17 	ldw	r2,1204(sp)
    2ecc:	002d883a 	mov	r22,zero
    2ed0:	0007883a 	mov	r3,zero
    2ed4:	15c00017 	ldw	r23,0(r2)
    2ed8:	10800104 	addi	r2,r2,4
    2edc:	d8812d15 	stw	r2,1204(sp)
    2ee0:	d8012585 	stb	zero,1174(sp)
    2ee4:	b805883a 	mov	r2,r23
    2ee8:	003b3506 	br	1bc0 <___vfprintf_internal_r+0x5e4>
    2eec:	00ffffc4 	movi	r3,-1
    2ef0:	b82b883a 	mov	r21,r23
    2ef4:	003a1606 	br	1750 <___vfprintf_internal_r+0x174>
    2ef8:	008011c4 	movi	r2,71
    2efc:	1480b116 	blt	r2,r18,31c4 <___vfprintf_internal_r+0x1be8>
    2f00:	04c00074 	movhi	r19,1
    2f04:	9cf67f04 	addi	r19,r19,-9732
    2f08:	00c000c4 	movi	r3,3
    2f0c:	00bfdfc4 	movi	r2,-129
    2f10:	80a0703a 	and	r16,r16,r2
    2f14:	d8c12815 	stw	r3,1184(sp)
    2f18:	d8812583 	ldbu	r2,1174(sp)
    2f1c:	d8c12b15 	stw	r3,1196(sp)
    2f20:	d8013115 	stw	zero,1220(sp)
    2f24:	003b3a06 	br	1c10 <___vfprintf_internal_r+0x634>
    2f28:	d9412917 	ldw	r5,1188(sp)
    2f2c:	8809883a 	mov	r4,r17
    2f30:	d9811b04 	addi	r6,sp,1132
    2f34:	00015a80 	call	15a8 <__sprint_r>
    2f38:	103aee1e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    2f3c:	dc812417 	ldw	r18,1168(sp)
    2f40:	da011d17 	ldw	r8,1140(sp)
    2f44:	da400404 	addi	r9,sp,16
    2f48:	003f3c06 	br	2c3c <___vfprintf_internal_r+0x1660>
    2f4c:	ad400044 	addi	r21,r21,1
    2f50:	84000814 	ori	r16,r16,32
    2f54:	14800047 	ldb	r18,1(r2)
    2f58:	0039fc06 	br	174c <___vfprintf_internal_r+0x170>
    2f5c:	d9412917 	ldw	r5,1188(sp)
    2f60:	8809883a 	mov	r4,r17
    2f64:	d9811b04 	addi	r6,sp,1132
    2f68:	00015a80 	call	15a8 <__sprint_r>
    2f6c:	103ae11e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    2f70:	da011d17 	ldw	r8,1140(sp)
    2f74:	da400404 	addi	r9,sp,16
    2f78:	003d2b06 	br	2428 <___vfprintf_internal_r+0xe4c>
    2f7c:	4d000015 	stw	r20,0(r9)
    2f80:	4c800115 	stw	r18,4(r9)
    2f84:	4491883a 	add	r8,r8,r18
    2f88:	18c00044 	addi	r3,r3,1
    2f8c:	da011d15 	stw	r8,1140(sp)
    2f90:	d8c11c15 	stw	r3,1136(sp)
    2f94:	008001c4 	movi	r2,7
    2f98:	10fcbd16 	blt	r2,r3,2290 <___vfprintf_internal_r+0xcb4>
    2f9c:	4a400204 	addi	r9,r9,8
    2fa0:	003cc206 	br	22ac <___vfprintf_internal_r+0xcd0>
    2fa4:	da413c15 	stw	r9,1264(sp)
    2fa8:	00086e80 	call	86e8 <strlen>
    2fac:	d8812b15 	stw	r2,1196(sp)
    2fb0:	d8812815 	stw	r2,1184(sp)
    2fb4:	da413c17 	ldw	r9,1264(sp)
    2fb8:	103fa90e 	bge	r2,zero,2e60 <___vfprintf_internal_r+0x1884>
    2fbc:	d8012815 	stw	zero,1184(sp)
    2fc0:	003fa706 	br	2e60 <___vfprintf_internal_r+0x1884>
    2fc4:	d9412917 	ldw	r5,1188(sp)
    2fc8:	8809883a 	mov	r4,r17
    2fcc:	d9811b04 	addi	r6,sp,1132
    2fd0:	00015a80 	call	15a8 <__sprint_r>
    2fd4:	103ac71e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    2fd8:	da011d17 	ldw	r8,1140(sp)
    2fdc:	d8c11c17 	ldw	r3,1136(sp)
    2fe0:	da400404 	addi	r9,sp,16
    2fe4:	d8813217 	ldw	r2,1224(sp)
    2fe8:	4cc00015 	stw	r19,0(r9)
    2fec:	48800115 	stw	r2,4(r9)
    2ff0:	4091883a 	add	r8,r8,r2
    2ff4:	003c6206 	br	2180 <___vfprintf_internal_r+0xba4>
    2ff8:	00800b44 	movi	r2,45
    2ffc:	d8812585 	stb	r2,1174(sp)
    3000:	003b2406 	br	1c94 <___vfprintf_internal_r+0x6b8>
    3004:	4d000015 	stw	r20,0(r9)
    3008:	4c800115 	stw	r18,4(r9)
    300c:	4491883a 	add	r8,r8,r18
    3010:	18c00044 	addi	r3,r3,1
    3014:	da011d15 	stw	r8,1140(sp)
    3018:	d8c11c15 	stw	r3,1136(sp)
    301c:	008001c4 	movi	r2,7
    3020:	10ffe816 	blt	r2,r3,2fc4 <___vfprintf_internal_r+0x19e8>
    3024:	4a400204 	addi	r9,r9,8
    3028:	003fee06 	br	2fe4 <___vfprintf_internal_r+0x1a08>
    302c:	d8c12b15 	stw	r3,1196(sp)
    3030:	00800184 	movi	r2,6
    3034:	10c0062e 	bgeu	r2,r3,3050 <___vfprintf_internal_r+0x1a74>
    3038:	d8812b15 	stw	r2,1196(sp)
    303c:	d8812815 	stw	r2,1184(sp)
    3040:	ddc12d15 	stw	r23,1204(sp)
    3044:	04c00074 	movhi	r19,1
    3048:	9cf68b04 	addi	r19,r19,-9684
    304c:	0039ca06 	br	1778 <___vfprintf_internal_r+0x19c>
    3050:	d8812b17 	ldw	r2,1196(sp)
    3054:	d8812815 	stw	r2,1184(sp)
    3058:	103ff90e 	bge	r2,zero,3040 <___vfprintf_internal_r+0x1a64>
    305c:	d8012815 	stw	zero,1184(sp)
    3060:	003ff706 	br	3040 <___vfprintf_internal_r+0x1a64>
    3064:	00800244 	movi	r2,9
    3068:	15fdaa36 	bltu	r2,r23,2714 <___vfprintf_internal_r+0x1138>
    306c:	dd010e04 	addi	r20,sp,1080
    3070:	003dc606 	br	278c <___vfprintf_internal_r+0x11b0>
    3074:	d9412917 	ldw	r5,1188(sp)
    3078:	8809883a 	mov	r4,r17
    307c:	d9811b04 	addi	r6,sp,1132
    3080:	00015a80 	call	15a8 <__sprint_r>
    3084:	103a9b1e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    3088:	dc812417 	ldw	r18,1168(sp)
    308c:	da400404 	addi	r9,sp,16
    3090:	003ecd06 	br	2bc8 <___vfprintf_internal_r+0x15ec>
    3094:	d9412917 	ldw	r5,1188(sp)
    3098:	8809883a 	mov	r4,r17
    309c:	d9811b04 	addi	r6,sp,1132
    30a0:	00015a80 	call	15a8 <__sprint_r>
    30a4:	103a931e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    30a8:	dc812417 	ldw	r18,1168(sp)
    30ac:	da011d17 	ldw	r8,1140(sp)
    30b0:	d8c11c17 	ldw	r3,1136(sp)
    30b4:	da400404 	addi	r9,sp,16
    30b8:	003eb706 	br	2b98 <___vfprintf_internal_r+0x15bc>
    30bc:	d9412917 	ldw	r5,1188(sp)
    30c0:	8809883a 	mov	r4,r17
    30c4:	d9811b04 	addi	r6,sp,1132
    30c8:	00015a80 	call	15a8 <__sprint_r>
    30cc:	103a891e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    30d0:	dc812417 	ldw	r18,1168(sp)
    30d4:	da011d17 	ldw	r8,1140(sp)
    30d8:	da400404 	addi	r9,sp,16
    30dc:	003dc206 	br	27e8 <___vfprintf_internal_r+0x120c>
    30e0:	df012815 	stw	fp,1184(sp)
    30e4:	d8812583 	ldbu	r2,1174(sp)
    30e8:	df012b15 	stw	fp,1196(sp)
    30ec:	ddc12d15 	stw	r23,1204(sp)
    30f0:	d8013115 	stw	zero,1220(sp)
    30f4:	003ac606 	br	1c10 <___vfprintf_internal_r+0x634>
    30f8:	d8812404 	addi	r2,sp,1168
    30fc:	d8800115 	stw	r2,4(sp)
    3100:	d8812304 	addi	r2,sp,1164
    3104:	d8800215 	stw	r2,8(sp)
    3108:	d8812204 	addi	r2,sp,1160
    310c:	df000015 	stw	fp,0(sp)
    3110:	d8800315 	stw	r2,12(sp)
    3114:	8809883a 	mov	r4,r17
    3118:	b00b883a 	mov	r5,r22
    311c:	a00d883a 	mov	r6,r20
    3120:	01c000c4 	movi	r7,3
    3124:	da413c15 	stw	r9,1264(sp)
    3128:	000382c0 	call	382c <_dtoa_r>
    312c:	da413c17 	ldw	r9,1264(sp)
    3130:	1027883a 	mov	r19,r2
    3134:	1707883a 	add	r3,r2,fp
    3138:	e02f883a 	mov	r23,fp
    313c:	99000007 	ldb	r4,0(r19)
    3140:	00800c04 	movi	r2,48
    3144:	20800326 	beq	r4,r2,3154 <___vfprintf_internal_r+0x1b78>
    3148:	da812417 	ldw	r10,1168(sp)
    314c:	1a87883a 	add	r3,r3,r10
    3150:	003f1406 	br	2da4 <___vfprintf_internal_r+0x17c8>
    3154:	b009883a 	mov	r4,r22
    3158:	a00b883a 	mov	r5,r20
    315c:	000d883a 	mov	r6,zero
    3160:	000f883a 	mov	r7,zero
    3164:	d8c13b15 	stw	r3,1260(sp)
    3168:	da413c15 	stw	r9,1264(sp)
    316c:	000a2d00 	call	a2d0 <__nedf2>
    3170:	d8c13b17 	ldw	r3,1260(sp)
    3174:	da413c17 	ldw	r9,1264(sp)
    3178:	103ff326 	beq	r2,zero,3148 <___vfprintf_internal_r+0x1b6c>
    317c:	00800044 	movi	r2,1
    3180:	15d5c83a 	sub	r10,r2,r23
    3184:	da812415 	stw	r10,1168(sp)
    3188:	1a87883a 	add	r3,r3,r10
    318c:	003f0506 	br	2da4 <___vfprintf_internal_r+0x17c8>
    3190:	d9412917 	ldw	r5,1188(sp)
    3194:	8809883a 	mov	r4,r17
    3198:	d9811b04 	addi	r6,sp,1132
    319c:	00015a80 	call	15a8 <__sprint_r>
    31a0:	103a541e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x518>
    31a4:	dc812417 	ldw	r18,1168(sp)
    31a8:	da011d17 	ldw	r8,1140(sp)
    31ac:	d8c11c17 	ldw	r3,1136(sp)
    31b0:	da400404 	addi	r9,sp,16
    31b4:	003eb206 	br	2c80 <___vfprintf_internal_r+0x16a4>
    31b8:	b82b883a 	mov	r21,r23
    31bc:	0007883a 	mov	r3,zero
    31c0:	00396306 	br	1750 <___vfprintf_internal_r+0x174>
    31c4:	04c00074 	movhi	r19,1
    31c8:	9cf68004 	addi	r19,r19,-9728
    31cc:	003f4e06 	br	2f08 <___vfprintf_internal_r+0x192c>
    31d0:	d8812583 	ldbu	r2,1174(sp)
    31d4:	dc012a17 	ldw	r16,1192(sp)
    31d8:	d8013115 	stw	zero,1220(sp)
    31dc:	003a8c06 	br	1c10 <___vfprintf_internal_r+0x634>
    31e0:	d8812417 	ldw	r2,1168(sp)
    31e4:	d8812b15 	stw	r2,1196(sp)
    31e8:	1029883a 	mov	r20,r2
    31ec:	00bfff44 	movi	r2,-3
    31f0:	a0800116 	blt	r20,r2,31f8 <___vfprintf_internal_r+0x1c1c>
    31f4:	e5001d0e 	bge	fp,r20,326c <___vfprintf_internal_r+0x1c90>
    31f8:	94bfff84 	addi	r18,r18,-2
    31fc:	a53fffc4 	addi	r20,r20,-1
    3200:	dd012415 	stw	r20,1168(sp)
    3204:	dc811fc5 	stb	r18,1151(sp)
    3208:	a0007216 	blt	r20,zero,33d4 <___vfprintf_internal_r+0x1df8>
    320c:	00800ac4 	movi	r2,43
    3210:	d8812005 	stb	r2,1152(sp)
    3214:	00800244 	movi	r2,9
    3218:	15003516 	blt	r2,r20,32f0 <___vfprintf_internal_r+0x1d14>
    321c:	00800c04 	movi	r2,48
    3220:	a5000c04 	addi	r20,r20,48
    3224:	d8812045 	stb	r2,1153(sp)
    3228:	dd012085 	stb	r20,1154(sp)
    322c:	d8c120c4 	addi	r3,sp,1155
    3230:	d8811fc4 	addi	r2,sp,1151
    3234:	1885c83a 	sub	r2,r3,r2
    3238:	d8c13217 	ldw	r3,1224(sp)
    323c:	d8813515 	stw	r2,1236(sp)
    3240:	1885883a 	add	r2,r3,r2
    3244:	d8812b15 	stw	r2,1196(sp)
    3248:	00800044 	movi	r2,1
    324c:	10c0580e 	bge	r2,r3,33b0 <___vfprintf_internal_r+0x1dd4>
    3250:	d8812b17 	ldw	r2,1196(sp)
    3254:	10800044 	addi	r2,r2,1
    3258:	d8812b15 	stw	r2,1196(sp)
    325c:	d8812815 	stw	r2,1184(sp)
    3260:	103ef50e 	bge	r2,zero,2e38 <___vfprintf_internal_r+0x185c>
    3264:	d8012815 	stw	zero,1184(sp)
    3268:	003ef306 	br	2e38 <___vfprintf_internal_r+0x185c>
    326c:	d8812b17 	ldw	r2,1196(sp)
    3270:	d8c13217 	ldw	r3,1224(sp)
    3274:	10c01416 	blt	r2,r3,32c8 <___vfprintf_internal_r+0x1cec>
    3278:	8400004c 	andi	r16,r16,1
    327c:	80000326 	beq	r16,zero,328c <___vfprintf_internal_r+0x1cb0>
    3280:	d8812b17 	ldw	r2,1196(sp)
    3284:	10800044 	addi	r2,r2,1
    3288:	d8812b15 	stw	r2,1196(sp)
    328c:	d8812815 	stw	r2,1184(sp)
    3290:	10001416 	blt	r2,zero,32e4 <___vfprintf_internal_r+0x1d08>
    3294:	048019c4 	movi	r18,103
    3298:	003ee706 	br	2e38 <___vfprintf_internal_r+0x185c>
    329c:	d8012815 	stw	zero,1184(sp)
    32a0:	003b1a06 	br	1f0c <___vfprintf_internal_r+0x930>
    32a4:	e03e9c1e 	bne	fp,zero,2d18 <___vfprintf_internal_r+0x173c>
    32a8:	07000044 	movi	fp,1
    32ac:	003e9a06 	br	2d18 <___vfprintf_internal_r+0x173c>
    32b0:	07000184 	movi	fp,6
    32b4:	003e9806 	br	2d18 <___vfprintf_internal_r+0x173c>
    32b8:	00c00b44 	movi	r3,45
    32bc:	a520003c 	xorhi	r20,r20,32768
    32c0:	d8c12f05 	stb	r3,1212(sp)
    32c4:	003e9806 	br	2d28 <___vfprintf_internal_r+0x174c>
    32c8:	05003f0e 	bge	zero,r20,33c8 <___vfprintf_internal_r+0x1dec>
    32cc:	05000044 	movi	r20,1
    32d0:	d8c13217 	ldw	r3,1224(sp)
    32d4:	a0e9883a 	add	r20,r20,r3
    32d8:	dd012b15 	stw	r20,1196(sp)
    32dc:	dd012815 	stw	r20,1184(sp)
    32e0:	a03fec0e 	bge	r20,zero,3294 <___vfprintf_internal_r+0x1cb8>
    32e4:	d8012815 	stw	zero,1184(sp)
    32e8:	048019c4 	movi	r18,103
    32ec:	003ed206 	br	2e38 <___vfprintf_internal_r+0x185c>
    32f0:	d8c11f84 	addi	r3,sp,1150
    32f4:	102f883a 	mov	r23,r2
    32f8:	4839883a 	mov	fp,r9
    32fc:	a009883a 	mov	r4,r20
    3300:	01400284 	movi	r5,10
    3304:	182d883a 	mov	r22,r3
    3308:	000a7d80 	call	a7d8 <__modsi3>
    330c:	10800c04 	addi	r2,r2,48
    3310:	a009883a 	mov	r4,r20
    3314:	b0800005 	stb	r2,0(r22)
    3318:	01400284 	movi	r5,10
    331c:	000a7880 	call	a788 <__divsi3>
    3320:	1029883a 	mov	r20,r2
    3324:	b0ffffc4 	addi	r3,r22,-1
    3328:	b8bff416 	blt	r23,r2,32fc <___vfprintf_internal_r+0x1d20>
    332c:	11400c04 	addi	r5,r2,48
    3330:	b17fffc5 	stb	r5,-1(r22)
    3334:	d8811fc4 	addi	r2,sp,1151
    3338:	e013883a 	mov	r9,fp
    333c:	18803e2e 	bgeu	r3,r2,3438 <___vfprintf_internal_r+0x1e5c>
    3340:	b007883a 	mov	r3,r22
    3344:	d9012044 	addi	r4,sp,1153
    3348:	00000206 	br	3354 <___vfprintf_internal_r+0x1d78>
    334c:	19400003 	ldbu	r5,0(r3)
    3350:	18c00044 	addi	r3,r3,1
    3354:	21400005 	stb	r5,0(r4)
    3358:	21000044 	addi	r4,r4,1
    335c:	10fffb1e 	bne	r2,r3,334c <___vfprintf_internal_r+0x1d70>
    3360:	d8c12004 	addi	r3,sp,1152
    3364:	1d87c83a 	sub	r3,r3,r22
    3368:	d9012044 	addi	r4,sp,1153
    336c:	20c7883a 	add	r3,r4,r3
    3370:	003fb006 	br	3234 <___vfprintf_internal_r+0x1c58>
    3374:	e5c00044 	addi	r23,fp,1
    3378:	003e7406 	br	2d4c <___vfprintf_internal_r+0x1770>
    337c:	d8c12217 	ldw	r3,1160(sp)
    3380:	003e9906 	br	2de8 <___vfprintf_internal_r+0x180c>
    3384:	d9012d17 	ldw	r4,1204(sp)
    3388:	ac800043 	ldbu	r18,1(r21)
    338c:	b82b883a 	mov	r21,r23
    3390:	20c00017 	ldw	r3,0(r4)
    3394:	20800104 	addi	r2,r4,4
    3398:	d8812d15 	stw	r2,1204(sp)
    339c:	18002116 	blt	r3,zero,3424 <___vfprintf_internal_r+0x1e48>
    33a0:	94803fcc 	andi	r18,r18,255
    33a4:	9480201c 	xori	r18,r18,128
    33a8:	94bfe004 	addi	r18,r18,-128
    33ac:	0038e706 	br	174c <___vfprintf_internal_r+0x170>
    33b0:	80a0703a 	and	r16,r16,r2
    33b4:	803fa61e 	bne	r16,zero,3250 <___vfprintf_internal_r+0x1c74>
    33b8:	d8812b17 	ldw	r2,1196(sp)
    33bc:	d8812815 	stw	r2,1184(sp)
    33c0:	103e9d0e 	bge	r2,zero,2e38 <___vfprintf_internal_r+0x185c>
    33c4:	003fa706 	br	3264 <___vfprintf_internal_r+0x1c88>
    33c8:	00800084 	movi	r2,2
    33cc:	1529c83a 	sub	r20,r2,r20
    33d0:	003fbf06 	br	32d0 <___vfprintf_internal_r+0x1cf4>
    33d4:	00800b44 	movi	r2,45
    33d8:	0529c83a 	sub	r20,zero,r20
    33dc:	d8812005 	stb	r2,1152(sp)
    33e0:	003f8c06 	br	3214 <___vfprintf_internal_r+0x1c38>
    33e4:	008011c4 	movi	r2,71
    33e8:	90be6926 	beq	r18,r2,2d90 <___vfprintf_internal_r+0x17b4>
    33ec:	003e6a06 	br	2d98 <___vfprintf_internal_r+0x17bc>
    33f0:	00bfffc4 	movi	r2,-1
    33f4:	d8812c15 	stw	r2,1200(sp)
    33f8:	0039ad06 	br	1ab0 <___vfprintf_internal_r+0x4d4>
    33fc:	1007883a 	mov	r3,r2
    3400:	003e7906 	br	2de8 <___vfprintf_internal_r+0x180c>
    3404:	e000021e 	bne	fp,zero,3410 <___vfprintf_internal_r+0x1e34>
    3408:	8400004c 	andi	r16,r16,1
    340c:	80000e26 	beq	r16,zero,3448 <___vfprintf_internal_r+0x1e6c>
    3410:	e7000084 	addi	fp,fp,2
    3414:	df012b15 	stw	fp,1196(sp)
    3418:	df012815 	stw	fp,1184(sp)
    341c:	e03e860e 	bge	fp,zero,2e38 <___vfprintf_internal_r+0x185c>
    3420:	003f9006 	br	3264 <___vfprintf_internal_r+0x1c88>
    3424:	94803fcc 	andi	r18,r18,255
    3428:	9480201c 	xori	r18,r18,128
    342c:	00ffffc4 	movi	r3,-1
    3430:	94bfe004 	addi	r18,r18,-128
    3434:	0038c506 	br	174c <___vfprintf_internal_r+0x170>
    3438:	d8c12044 	addi	r3,sp,1153
    343c:	003f7d06 	br	3234 <___vfprintf_internal_r+0x1c58>
    3440:	dd012417 	ldw	r20,1168(sp)
    3444:	003f6d06 	br	31fc <___vfprintf_internal_r+0x1c20>
    3448:	00c00044 	movi	r3,1
    344c:	d8c12815 	stw	r3,1184(sp)
    3450:	d8c12b15 	stw	r3,1196(sp)
    3454:	003e7806 	br	2e38 <___vfprintf_internal_r+0x185c>

00003458 <__vfprintf_internal>:
    3458:	00800074 	movhi	r2,1
    345c:	10beb504 	addi	r2,r2,-1324
    3460:	2007883a 	mov	r3,r4
    3464:	11000017 	ldw	r4,0(r2)
    3468:	2805883a 	mov	r2,r5
    346c:	300f883a 	mov	r7,r6
    3470:	180b883a 	mov	r5,r3
    3474:	100d883a 	mov	r6,r2
    3478:	00015dc1 	jmpi	15dc <___vfprintf_internal_r>

0000347c <__swsetup_r>:
    347c:	00800074 	movhi	r2,1
    3480:	10beb504 	addi	r2,r2,-1324
    3484:	10800017 	ldw	r2,0(r2)
    3488:	defffd04 	addi	sp,sp,-12
    348c:	dc400115 	stw	r17,4(sp)
    3490:	dc000015 	stw	r16,0(sp)
    3494:	dfc00215 	stw	ra,8(sp)
    3498:	2023883a 	mov	r17,r4
    349c:	2821883a 	mov	r16,r5
    34a0:	10000226 	beq	r2,zero,34ac <__swsetup_r+0x30>
    34a4:	10c00e17 	ldw	r3,56(r2)
    34a8:	18003d26 	beq	r3,zero,35a0 <__swsetup_r+0x124>
    34ac:	8080030b 	ldhu	r2,12(r16)
    34b0:	10c0020c 	andi	r3,r2,8
    34b4:	18ffffcc 	andi	r3,r3,65535
    34b8:	18e0001c 	xori	r3,r3,32768
    34bc:	18e00004 	addi	r3,r3,-32768
    34c0:	18001226 	beq	r3,zero,350c <__swsetup_r+0x90>
    34c4:	80c00417 	ldw	r3,16(r16)
    34c8:	18001f26 	beq	r3,zero,3548 <__swsetup_r+0xcc>
    34cc:	1100004c 	andi	r4,r2,1
    34d0:	2000261e 	bne	r4,zero,356c <__swsetup_r+0xf0>
    34d4:	1080008c 	andi	r2,r2,2
    34d8:	10bfffcc 	andi	r2,r2,65535
    34dc:	10a0001c 	xori	r2,r2,32768
    34e0:	10a00004 	addi	r2,r2,-32768
    34e4:	1000311e 	bne	r2,zero,35ac <__swsetup_r+0x130>
    34e8:	80800517 	ldw	r2,20(r16)
    34ec:	80800215 	stw	r2,8(r16)
    34f0:	18002326 	beq	r3,zero,3580 <__swsetup_r+0x104>
    34f4:	0005883a 	mov	r2,zero
    34f8:	dfc00217 	ldw	ra,8(sp)
    34fc:	dc400117 	ldw	r17,4(sp)
    3500:	dc000017 	ldw	r16,0(sp)
    3504:	dec00304 	addi	sp,sp,12
    3508:	f800283a 	ret
    350c:	10c0040c 	andi	r3,r2,16
    3510:	18ffffcc 	andi	r3,r3,65535
    3514:	18e0001c 	xori	r3,r3,32768
    3518:	18e00004 	addi	r3,r3,-32768
    351c:	18001e26 	beq	r3,zero,3598 <__swsetup_r+0x11c>
    3520:	10c0010c 	andi	r3,r2,4
    3524:	18ffffcc 	andi	r3,r3,65535
    3528:	18e0001c 	xori	r3,r3,32768
    352c:	18e00004 	addi	r3,r3,-32768
    3530:	1800211e 	bne	r3,zero,35b8 <__swsetup_r+0x13c>
    3534:	80c00417 	ldw	r3,16(r16)
    3538:	11400214 	ori	r5,r2,8
    353c:	8140030d 	sth	r5,12(r16)
    3540:	2805883a 	mov	r2,r5
    3544:	183fe11e 	bne	r3,zero,34cc <__swsetup_r+0x50>
    3548:	1140a00c 	andi	r5,r2,640
    354c:	01008004 	movi	r4,512
    3550:	293fde26 	beq	r5,r4,34cc <__swsetup_r+0x50>
    3554:	8809883a 	mov	r4,r17
    3558:	800b883a 	mov	r5,r16
    355c:	0005e780 	call	5e78 <__smakebuf_r>
    3560:	8080030b 	ldhu	r2,12(r16)
    3564:	80c00417 	ldw	r3,16(r16)
    3568:	003fd806 	br	34cc <__swsetup_r+0x50>
    356c:	80800517 	ldw	r2,20(r16)
    3570:	80000215 	stw	zero,8(r16)
    3574:	0085c83a 	sub	r2,zero,r2
    3578:	80800615 	stw	r2,24(r16)
    357c:	183fdd1e 	bne	r3,zero,34f4 <__swsetup_r+0x78>
    3580:	8080030b 	ldhu	r2,12(r16)
    3584:	1080200c 	andi	r2,r2,128
    3588:	10bfffcc 	andi	r2,r2,65535
    358c:	10a0001c 	xori	r2,r2,32768
    3590:	10a00004 	addi	r2,r2,-32768
    3594:	103fd826 	beq	r2,zero,34f8 <__swsetup_r+0x7c>
    3598:	00bfffc4 	movi	r2,-1
    359c:	003fd606 	br	34f8 <__swsetup_r+0x7c>
    35a0:	1009883a 	mov	r4,r2
    35a4:	00051040 	call	5104 <__sinit>
    35a8:	003fc006 	br	34ac <__swsetup_r+0x30>
    35ac:	0005883a 	mov	r2,zero
    35b0:	80800215 	stw	r2,8(r16)
    35b4:	003fce06 	br	34f0 <__swsetup_r+0x74>
    35b8:	81400c17 	ldw	r5,48(r16)
    35bc:	28000626 	beq	r5,zero,35d8 <__swsetup_r+0x15c>
    35c0:	80c01004 	addi	r3,r16,64
    35c4:	28c00326 	beq	r5,r3,35d4 <__swsetup_r+0x158>
    35c8:	8809883a 	mov	r4,r17
    35cc:	00054880 	call	5488 <_free_r>
    35d0:	8080030b 	ldhu	r2,12(r16)
    35d4:	80000c15 	stw	zero,48(r16)
    35d8:	80c00417 	ldw	r3,16(r16)
    35dc:	013ff6c4 	movi	r4,-37
    35e0:	2084703a 	and	r2,r4,r2
    35e4:	80000115 	stw	zero,4(r16)
    35e8:	80c00015 	stw	r3,0(r16)
    35ec:	003fd206 	br	3538 <__swsetup_r+0xbc>

000035f0 <quorem>:
    35f0:	defff204 	addi	sp,sp,-56
    35f4:	dd000815 	stw	r20,32(sp)
    35f8:	20800417 	ldw	r2,16(r4)
    35fc:	2d000417 	ldw	r20,16(r5)
    3600:	dcc00715 	stw	r19,28(sp)
    3604:	dfc00d15 	stw	ra,52(sp)
    3608:	df000c15 	stw	fp,48(sp)
    360c:	ddc00b15 	stw	r23,44(sp)
    3610:	dd800a15 	stw	r22,40(sp)
    3614:	dd400915 	stw	r21,36(sp)
    3618:	dc800615 	stw	r18,24(sp)
    361c:	dc400515 	stw	r17,20(sp)
    3620:	dc000415 	stw	r16,16(sp)
    3624:	d9400015 	stw	r5,0(sp)
    3628:	2027883a 	mov	r19,r4
    362c:	15007d16 	blt	r2,r20,3824 <quorem+0x234>
    3630:	a0800104 	addi	r2,r20,4
    3634:	1085883a 	add	r2,r2,r2
    3638:	1085883a 	add	r2,r2,r2
    363c:	28ad883a 	add	r22,r5,r2
    3640:	2085883a 	add	r2,r4,r2
    3644:	10800017 	ldw	r2,0(r2)
    3648:	b1400017 	ldw	r5,0(r22)
    364c:	a53fffc4 	addi	r20,r20,-1
    3650:	1009883a 	mov	r4,r2
    3654:	29400044 	addi	r5,r5,1
    3658:	d8800115 	stw	r2,4(sp)
    365c:	000a8340 	call	a834 <__udivsi3>
    3660:	1025883a 	mov	r18,r2
    3664:	d8800017 	ldw	r2,0(sp)
    3668:	9f000504 	addi	fp,r19,20
    366c:	14000504 	addi	r16,r2,20
    3670:	90003626 	beq	r18,zero,374c <quorem+0x15c>
    3674:	802b883a 	mov	r21,r16
    3678:	e023883a 	mov	r17,fp
    367c:	0007883a 	mov	r3,zero
    3680:	002f883a 	mov	r23,zero
    3684:	a9800017 	ldw	r6,0(r21)
    3688:	900b883a 	mov	r5,r18
    368c:	d8c00315 	stw	r3,12(sp)
    3690:	313fffcc 	andi	r4,r6,65535
    3694:	d9800215 	stw	r6,8(sp)
    3698:	000a8440 	call	a844 <__mulsi3>
    369c:	d9800217 	ldw	r6,8(sp)
    36a0:	d8c00317 	ldw	r3,12(sp)
    36a4:	900b883a 	mov	r5,r18
    36a8:	3008d43a 	srli	r4,r6,16
    36ac:	1887883a 	add	r3,r3,r2
    36b0:	d8c00315 	stw	r3,12(sp)
    36b4:	000a8440 	call	a844 <__mulsi3>
    36b8:	89400017 	ldw	r5,0(r17)
    36bc:	d8c00317 	ldw	r3,12(sp)
    36c0:	ad400104 	addi	r21,r21,4
    36c4:	293fffcc 	andi	r4,r5,65535
    36c8:	1810d43a 	srli	r8,r3,16
    36cc:	25c9883a 	add	r4,r4,r23
    36d0:	18ffffcc 	andi	r3,r3,65535
    36d4:	20c9c83a 	sub	r4,r4,r3
    36d8:	280cd43a 	srli	r6,r5,16
    36dc:	4085883a 	add	r2,r8,r2
    36e0:	2007d43a 	srai	r3,r4,16
    36e4:	117fffcc 	andi	r5,r2,65535
    36e8:	314bc83a 	sub	r5,r6,r5
    36ec:	28cb883a 	add	r5,r5,r3
    36f0:	8940008d 	sth	r5,2(r17)
    36f4:	8900000d 	sth	r4,0(r17)
    36f8:	1006d43a 	srli	r3,r2,16
    36fc:	282fd43a 	srai	r23,r5,16
    3700:	8c400104 	addi	r17,r17,4
    3704:	b57fdf2e 	bgeu	r22,r21,3684 <quorem+0x94>
    3708:	d8c00117 	ldw	r3,4(sp)
    370c:	18000f1e 	bne	r3,zero,374c <quorem+0x15c>
    3710:	a0800144 	addi	r2,r20,5
    3714:	1085883a 	add	r2,r2,r2
    3718:	1085883a 	add	r2,r2,r2
    371c:	9887883a 	add	r3,r19,r2
    3720:	18bfff04 	addi	r2,r3,-4
    3724:	e080082e 	bgeu	fp,r2,3748 <quorem+0x158>
    3728:	18ffff17 	ldw	r3,-4(r3)
    372c:	18000326 	beq	r3,zero,373c <quorem+0x14c>
    3730:	00000506 	br	3748 <quorem+0x158>
    3734:	10c00017 	ldw	r3,0(r2)
    3738:	1800031e 	bne	r3,zero,3748 <quorem+0x158>
    373c:	10bfff04 	addi	r2,r2,-4
    3740:	a53fffc4 	addi	r20,r20,-1
    3744:	e0bffb36 	bltu	fp,r2,3734 <quorem+0x144>
    3748:	9d000415 	stw	r20,16(r19)
    374c:	d9400017 	ldw	r5,0(sp)
    3750:	9809883a 	mov	r4,r19
    3754:	00075900 	call	7590 <__mcmp>
    3758:	10002516 	blt	r2,zero,37f0 <quorem+0x200>
    375c:	94800044 	addi	r18,r18,1
    3760:	e007883a 	mov	r3,fp
    3764:	000d883a 	mov	r6,zero
    3768:	18800017 	ldw	r2,0(r3)
    376c:	82000017 	ldw	r8,0(r16)
    3770:	84000104 	addi	r16,r16,4
    3774:	11ffffcc 	andi	r7,r2,65535
    3778:	413fffcc 	andi	r4,r8,65535
    377c:	398d883a 	add	r6,r7,r6
    3780:	310fc83a 	sub	r7,r6,r4
    3784:	4010d43a 	srli	r8,r8,16
    3788:	100cd43a 	srli	r6,r2,16
    378c:	3809d43a 	srai	r4,r7,16
    3790:	19c0000d 	sth	r7,0(r3)
    3794:	320dc83a 	sub	r6,r6,r8
    3798:	310d883a 	add	r6,r6,r4
    379c:	1980008d 	sth	r6,2(r3)
    37a0:	300dd43a 	srai	r6,r6,16
    37a4:	18c00104 	addi	r3,r3,4
    37a8:	b43fef2e 	bgeu	r22,r16,3768 <quorem+0x178>
    37ac:	a0800144 	addi	r2,r20,5
    37b0:	1085883a 	add	r2,r2,r2
    37b4:	1085883a 	add	r2,r2,r2
    37b8:	9885883a 	add	r2,r19,r2
    37bc:	10c00017 	ldw	r3,0(r2)
    37c0:	18000b1e 	bne	r3,zero,37f0 <quorem+0x200>
    37c4:	10ffff04 	addi	r3,r2,-4
    37c8:	e0c0082e 	bgeu	fp,r3,37ec <quorem+0x1fc>
    37cc:	10bfff17 	ldw	r2,-4(r2)
    37d0:	10000326 	beq	r2,zero,37e0 <quorem+0x1f0>
    37d4:	00000506 	br	37ec <quorem+0x1fc>
    37d8:	18800017 	ldw	r2,0(r3)
    37dc:	1000031e 	bne	r2,zero,37ec <quorem+0x1fc>
    37e0:	18ffff04 	addi	r3,r3,-4
    37e4:	a53fffc4 	addi	r20,r20,-1
    37e8:	e0fffb36 	bltu	fp,r3,37d8 <quorem+0x1e8>
    37ec:	9d000415 	stw	r20,16(r19)
    37f0:	9005883a 	mov	r2,r18
    37f4:	dfc00d17 	ldw	ra,52(sp)
    37f8:	df000c17 	ldw	fp,48(sp)
    37fc:	ddc00b17 	ldw	r23,44(sp)
    3800:	dd800a17 	ldw	r22,40(sp)
    3804:	dd400917 	ldw	r21,36(sp)
    3808:	dd000817 	ldw	r20,32(sp)
    380c:	dcc00717 	ldw	r19,28(sp)
    3810:	dc800617 	ldw	r18,24(sp)
    3814:	dc400517 	ldw	r17,20(sp)
    3818:	dc000417 	ldw	r16,16(sp)
    381c:	dec00e04 	addi	sp,sp,56
    3820:	f800283a 	ret
    3824:	0005883a 	mov	r2,zero
    3828:	003ff206 	br	37f4 <quorem+0x204>

0000382c <_dtoa_r>:
    382c:	20801017 	ldw	r2,64(r4)
    3830:	deffdf04 	addi	sp,sp,-132
    3834:	dcc01a15 	stw	r19,104(sp)
    3838:	dc801915 	stw	r18,100(sp)
    383c:	dc401815 	stw	r17,96(sp)
    3840:	dc001715 	stw	r16,92(sp)
    3844:	dfc02015 	stw	ra,128(sp)
    3848:	df001f15 	stw	fp,124(sp)
    384c:	ddc01e15 	stw	r23,120(sp)
    3850:	dd801d15 	stw	r22,116(sp)
    3854:	dd401c15 	stw	r21,112(sp)
    3858:	dd001b15 	stw	r20,108(sp)
    385c:	d9400315 	stw	r5,12(sp)
    3860:	d9c00415 	stw	r7,16(sp)
    3864:	2021883a 	mov	r16,r4
    3868:	3025883a 	mov	r18,r6
    386c:	dcc02317 	ldw	r19,140(sp)
    3870:	3023883a 	mov	r17,r6
    3874:	10000826 	beq	r2,zero,3898 <_dtoa_r+0x6c>
    3878:	20c01117 	ldw	r3,68(r4)
    387c:	01800044 	movi	r6,1
    3880:	100b883a 	mov	r5,r2
    3884:	30cc983a 	sll	r6,r6,r3
    3888:	10c00115 	stw	r3,4(r2)
    388c:	11800215 	stw	r6,8(r2)
    3890:	0006cec0 	call	6cec <_Bfree>
    3894:	80001015 	stw	zero,64(r16)
    3898:	90002f16 	blt	r18,zero,3958 <_dtoa_r+0x12c>
    389c:	98000015 	stw	zero,0(r19)
    38a0:	90dffc2c 	andhi	r3,r18,32752
    38a4:	009ffc34 	movhi	r2,32752
    38a8:	18801c26 	beq	r3,r2,391c <_dtoa_r+0xf0>
    38ac:	d9000317 	ldw	r4,12(sp)
    38b0:	880b883a 	mov	r5,r17
    38b4:	000d883a 	mov	r6,zero
    38b8:	000f883a 	mov	r7,zero
    38bc:	000a2740 	call	a274 <__eqdf2>
    38c0:	10002c1e 	bne	r2,zero,3974 <_dtoa_r+0x148>
    38c4:	d9002217 	ldw	r4,136(sp)
    38c8:	d9c02417 	ldw	r7,144(sp)
    38cc:	00800044 	movi	r2,1
    38d0:	20800015 	stw	r2,0(r4)
    38d4:	38019426 	beq	r7,zero,3f28 <_dtoa_r+0x6fc>
    38d8:	00800074 	movhi	r2,1
    38dc:	10b68d44 	addi	r2,r2,-9675
    38e0:	38800015 	stw	r2,0(r7)
    38e4:	15ffffc4 	addi	r23,r2,-1
    38e8:	b805883a 	mov	r2,r23
    38ec:	dfc02017 	ldw	ra,128(sp)
    38f0:	df001f17 	ldw	fp,124(sp)
    38f4:	ddc01e17 	ldw	r23,120(sp)
    38f8:	dd801d17 	ldw	r22,116(sp)
    38fc:	dd401c17 	ldw	r21,112(sp)
    3900:	dd001b17 	ldw	r20,108(sp)
    3904:	dcc01a17 	ldw	r19,104(sp)
    3908:	dc801917 	ldw	r18,100(sp)
    390c:	dc401817 	ldw	r17,96(sp)
    3910:	dc001717 	ldw	r16,92(sp)
    3914:	dec02104 	addi	sp,sp,132
    3918:	f800283a 	ret
    391c:	d8c02217 	ldw	r3,136(sp)
    3920:	d9000317 	ldw	r4,12(sp)
    3924:	0089c3c4 	movi	r2,9999
    3928:	18800015 	stw	r2,0(r3)
    392c:	20016c26 	beq	r4,zero,3ee0 <_dtoa_r+0x6b4>
    3930:	05c00074 	movhi	r23,1
    3934:	bdf69904 	addi	r23,r23,-9628
    3938:	d9c02417 	ldw	r7,144(sp)
    393c:	383fea26 	beq	r7,zero,38e8 <_dtoa_r+0xbc>
    3940:	b88000c7 	ldb	r2,3(r23)
    3944:	10016d1e 	bne	r2,zero,3efc <_dtoa_r+0x6d0>
    3948:	b88000c4 	addi	r2,r23,3
    394c:	d8c02417 	ldw	r3,144(sp)
    3950:	18800015 	stw	r2,0(r3)
    3954:	003fe406 	br	38e8 <_dtoa_r+0xbc>
    3958:	04600034 	movhi	r17,32768
    395c:	8c7fffc4 	addi	r17,r17,-1
    3960:	9462703a 	and	r17,r18,r17
    3964:	00800044 	movi	r2,1
    3968:	98800015 	stw	r2,0(r19)
    396c:	8825883a 	mov	r18,r17
    3970:	003fcb06 	br	38a0 <_dtoa_r+0x74>
    3974:	d9400317 	ldw	r5,12(sp)
    3978:	9028d53a 	srli	r20,r18,20
    397c:	d8800204 	addi	r2,sp,8
    3980:	d8800015 	stw	r2,0(sp)
    3984:	8009883a 	mov	r4,r16
    3988:	880d883a 	mov	r6,r17
    398c:	d9c00104 	addi	r7,sp,4
    3990:	00079380 	call	7938 <__d2b>
    3994:	a501ffcc 	andi	r20,r20,2047
    3998:	1039883a 	mov	fp,r2
    399c:	a001591e 	bne	r20,zero,3f04 <_dtoa_r+0x6d8>
    39a0:	dd400217 	ldw	r21,8(sp)
    39a4:	dd000117 	ldw	r20,4(sp)
    39a8:	00befbc4 	movi	r2,-1041
    39ac:	ad29883a 	add	r20,r21,r20
    39b0:	a082d216 	blt	r20,r2,44fc <_dtoa_r+0xcd0>
    39b4:	d8c00317 	ldw	r3,12(sp)
    39b8:	013f0384 	movi	r4,-1010
    39bc:	2509c83a 	sub	r4,r4,r20
    39c0:	a0810484 	addi	r2,r20,1042
    39c4:	9124983a 	sll	r18,r18,r4
    39c8:	1884d83a 	srl	r2,r3,r2
    39cc:	9088b03a 	or	r4,r18,r2
    39d0:	000a5f80 	call	a5f8 <__floatunsidf>
    39d4:	1009883a 	mov	r4,r2
    39d8:	017f8434 	movhi	r5,65040
    39dc:	00800044 	movi	r2,1
    39e0:	194b883a 	add	r5,r3,r5
    39e4:	a53fffc4 	addi	r20,r20,-1
    39e8:	d8800f15 	stw	r2,60(sp)
    39ec:	000d883a 	mov	r6,zero
    39f0:	01cffe34 	movhi	r7,16376
    39f4:	0009d7c0 	call	9d7c <__subdf3>
    39f8:	1009883a 	mov	r4,r2
    39fc:	180b883a 	mov	r5,r3
    3a00:	0198dbf4 	movhi	r6,25455
    3a04:	3190d844 	addi	r6,r6,17249
    3a08:	01cff4f4 	movhi	r7,16339
    3a0c:	39e1e9c4 	addi	r7,r7,-30809
    3a10:	0009ddc0 	call	9ddc <__muldf3>
    3a14:	180b883a 	mov	r5,r3
    3a18:	01a2d874 	movhi	r6,35681
    3a1c:	31b22cc4 	addi	r6,r6,-14157
    3a20:	01cff1f4 	movhi	r7,16327
    3a24:	39e28a04 	addi	r7,r7,-30168
    3a28:	1009883a 	mov	r4,r2
    3a2c:	0009d280 	call	9d28 <__adddf3>
    3a30:	a009883a 	mov	r4,r20
    3a34:	1027883a 	mov	r19,r2
    3a38:	1825883a 	mov	r18,r3
    3a3c:	000a4500 	call	a450 <__floatsidf>
    3a40:	1009883a 	mov	r4,r2
    3a44:	180b883a 	mov	r5,r3
    3a48:	019427f4 	movhi	r6,20639
    3a4c:	319e7ec4 	addi	r6,r6,31227
    3a50:	01cff4f4 	movhi	r7,16339
    3a54:	39d104c4 	addi	r7,r7,17427
    3a58:	0009ddc0 	call	9ddc <__muldf3>
    3a5c:	9809883a 	mov	r4,r19
    3a60:	900b883a 	mov	r5,r18
    3a64:	100d883a 	mov	r6,r2
    3a68:	180f883a 	mov	r7,r3
    3a6c:	0009d280 	call	9d28 <__adddf3>
    3a70:	1009883a 	mov	r4,r2
    3a74:	180b883a 	mov	r5,r3
    3a78:	1027883a 	mov	r19,r2
    3a7c:	1825883a 	mov	r18,r3
    3a80:	000a5240 	call	a524 <__fixdfsi>
    3a84:	9809883a 	mov	r4,r19
    3a88:	900b883a 	mov	r5,r18
    3a8c:	000d883a 	mov	r6,zero
    3a90:	000f883a 	mov	r7,zero
    3a94:	d8800615 	stw	r2,24(sp)
    3a98:	000a3f40 	call	a3f4 <__ltdf2>
    3a9c:	10027e16 	blt	r2,zero,4498 <_dtoa_r+0xc6c>
    3aa0:	d8c00617 	ldw	r3,24(sp)
    3aa4:	00800584 	movi	r2,22
    3aa8:	10c26c36 	bltu	r2,r3,445c <_dtoa_r+0xc30>
    3aac:	180490fa 	slli	r2,r3,3
    3ab0:	00c00074 	movhi	r3,1
    3ab4:	18f6bf04 	addi	r3,r3,-9476
    3ab8:	d9800317 	ldw	r6,12(sp)
    3abc:	1885883a 	add	r2,r3,r2
    3ac0:	11000017 	ldw	r4,0(r2)
    3ac4:	11400117 	ldw	r5,4(r2)
    3ac8:	880f883a 	mov	r7,r17
    3acc:	000a32c0 	call	a32c <__gtdf2>
    3ad0:	00828f0e 	bge	zero,r2,4510 <_dtoa_r+0xce4>
    3ad4:	d8800617 	ldw	r2,24(sp)
    3ad8:	d8000d15 	stw	zero,52(sp)
    3adc:	10bfffc4 	addi	r2,r2,-1
    3ae0:	d8800615 	stw	r2,24(sp)
    3ae4:	ad29c83a 	sub	r20,r21,r20
    3ae8:	a53fffc4 	addi	r20,r20,-1
    3aec:	a0026616 	blt	r20,zero,4488 <_dtoa_r+0xc5c>
    3af0:	dd000715 	stw	r20,28(sp)
    3af4:	d8000815 	stw	zero,32(sp)
    3af8:	d8800617 	ldw	r2,24(sp)
    3afc:	10025a16 	blt	r2,zero,4468 <_dtoa_r+0xc3c>
    3b00:	d8c00717 	ldw	r3,28(sp)
    3b04:	d8800b15 	stw	r2,44(sp)
    3b08:	d8000a15 	stw	zero,40(sp)
    3b0c:	1887883a 	add	r3,r3,r2
    3b10:	d8c00715 	stw	r3,28(sp)
    3b14:	d9c00417 	ldw	r7,16(sp)
    3b18:	00800244 	movi	r2,9
    3b1c:	11c10536 	bltu	r2,r7,3f34 <_dtoa_r+0x708>
    3b20:	00800144 	movi	r2,5
    3b24:	11c4c60e 	bge	r2,r7,4e40 <_dtoa_r+0x1614>
    3b28:	39ffff04 	addi	r7,r7,-4
    3b2c:	d9c00415 	stw	r7,16(sp)
    3b30:	0027883a 	mov	r19,zero
    3b34:	d9c00417 	ldw	r7,16(sp)
    3b38:	008000c4 	movi	r2,3
    3b3c:	3883a226 	beq	r7,r2,49c8 <_dtoa_r+0x119c>
    3b40:	11c2bc16 	blt	r2,r7,4634 <_dtoa_r+0xe08>
    3b44:	00800084 	movi	r2,2
    3b48:	3880fb1e 	bne	r7,r2,3f38 <_dtoa_r+0x70c>
    3b4c:	d8000c15 	stw	zero,48(sp)
    3b50:	d9002117 	ldw	r4,132(sp)
    3b54:	0103ae0e 	bge	zero,r4,4a10 <_dtoa_r+0x11e4>
    3b58:	2025883a 	mov	r18,r4
    3b5c:	d9000e15 	stw	r4,56(sp)
    3b60:	d9000915 	stw	r4,36(sp)
    3b64:	80001115 	stw	zero,68(r16)
    3b68:	008005c4 	movi	r2,23
    3b6c:	1484b22e 	bgeu	r2,r18,4e38 <_dtoa_r+0x160c>
    3b70:	00c00044 	movi	r3,1
    3b74:	00800104 	movi	r2,4
    3b78:	1085883a 	add	r2,r2,r2
    3b7c:	11000504 	addi	r4,r2,20
    3b80:	180b883a 	mov	r5,r3
    3b84:	18c00044 	addi	r3,r3,1
    3b88:	913ffb2e 	bgeu	r18,r4,3b78 <_dtoa_r+0x34c>
    3b8c:	81401115 	stw	r5,68(r16)
    3b90:	8009883a 	mov	r4,r16
    3b94:	0006c440 	call	6c44 <_Balloc>
    3b98:	102f883a 	mov	r23,r2
    3b9c:	80801015 	stw	r2,64(r16)
    3ba0:	00800384 	movi	r2,14
    3ba4:	1480f036 	bltu	r2,r18,3f68 <_dtoa_r+0x73c>
    3ba8:	9800ef26 	beq	r19,zero,3f68 <_dtoa_r+0x73c>
    3bac:	d8800617 	ldw	r2,24(sp)
    3bb0:	00839c0e 	bge	zero,r2,4a24 <_dtoa_r+0x11f8>
    3bb4:	d8c00617 	ldw	r3,24(sp)
    3bb8:	108003cc 	andi	r2,r2,15
    3bbc:	100490fa 	slli	r2,r2,3
    3bc0:	182bd13a 	srai	r21,r3,4
    3bc4:	00c00074 	movhi	r3,1
    3bc8:	18f6bf04 	addi	r3,r3,-9476
    3bcc:	1885883a 	add	r2,r3,r2
    3bd0:	a8c0040c 	andi	r3,r21,16
    3bd4:	12800017 	ldw	r10,0(r2)
    3bd8:	15800117 	ldw	r22,4(r2)
    3bdc:	18038726 	beq	r3,zero,49fc <_dtoa_r+0x11d0>
    3be0:	00800074 	movhi	r2,1
    3be4:	10b6b504 	addi	r2,r2,-9516
    3be8:	11800817 	ldw	r6,32(r2)
    3bec:	11c00917 	ldw	r7,36(r2)
    3bf0:	d9000317 	ldw	r4,12(sp)
    3bf4:	880b883a 	mov	r5,r17
    3bf8:	da801515 	stw	r10,84(sp)
    3bfc:	000a0c00 	call	a0c0 <__divdf3>
    3c00:	da801517 	ldw	r10,84(sp)
    3c04:	d8801015 	stw	r2,64(sp)
    3c08:	1829883a 	mov	r20,r3
    3c0c:	ad4003cc 	andi	r21,r21,15
    3c10:	048000c4 	movi	r18,3
    3c14:	a8001126 	beq	r21,zero,3c5c <_dtoa_r+0x430>
    3c18:	04c00074 	movhi	r19,1
    3c1c:	9cf6b504 	addi	r19,r19,-9516
    3c20:	5005883a 	mov	r2,r10
    3c24:	b007883a 	mov	r3,r22
    3c28:	a980004c 	andi	r6,r21,1
    3c2c:	1009883a 	mov	r4,r2
    3c30:	a82bd07a 	srai	r21,r21,1
    3c34:	180b883a 	mov	r5,r3
    3c38:	30000426 	beq	r6,zero,3c4c <_dtoa_r+0x420>
    3c3c:	99800017 	ldw	r6,0(r19)
    3c40:	99c00117 	ldw	r7,4(r19)
    3c44:	94800044 	addi	r18,r18,1
    3c48:	0009ddc0 	call	9ddc <__muldf3>
    3c4c:	9cc00204 	addi	r19,r19,8
    3c50:	a83ff51e 	bne	r21,zero,3c28 <_dtoa_r+0x3fc>
    3c54:	1015883a 	mov	r10,r2
    3c58:	182d883a 	mov	r22,r3
    3c5c:	d9001017 	ldw	r4,64(sp)
    3c60:	a00b883a 	mov	r5,r20
    3c64:	500d883a 	mov	r6,r10
    3c68:	b00f883a 	mov	r7,r22
    3c6c:	000a0c00 	call	a0c0 <__divdf3>
    3c70:	1027883a 	mov	r19,r2
    3c74:	1829883a 	mov	r20,r3
    3c78:	d8c00d17 	ldw	r3,52(sp)
    3c7c:	18000626 	beq	r3,zero,3c98 <_dtoa_r+0x46c>
    3c80:	9809883a 	mov	r4,r19
    3c84:	a00b883a 	mov	r5,r20
    3c88:	000d883a 	mov	r6,zero
    3c8c:	01cffc34 	movhi	r7,16368
    3c90:	000a3f40 	call	a3f4 <__ltdf2>
    3c94:	10040e16 	blt	r2,zero,4cd0 <_dtoa_r+0x14a4>
    3c98:	9009883a 	mov	r4,r18
    3c9c:	000a4500 	call	a450 <__floatsidf>
    3ca0:	1009883a 	mov	r4,r2
    3ca4:	180b883a 	mov	r5,r3
    3ca8:	980d883a 	mov	r6,r19
    3cac:	a00f883a 	mov	r7,r20
    3cb0:	0009ddc0 	call	9ddc <__muldf3>
    3cb4:	1009883a 	mov	r4,r2
    3cb8:	180b883a 	mov	r5,r3
    3cbc:	000d883a 	mov	r6,zero
    3cc0:	01d00734 	movhi	r7,16412
    3cc4:	0009d280 	call	9d28 <__adddf3>
    3cc8:	057f3034 	movhi	r21,64704
    3ccc:	1d6b883a 	add	r21,r3,r21
    3cd0:	d8c00917 	ldw	r3,36(sp)
    3cd4:	1025883a 	mov	r18,r2
    3cd8:	18031f26 	beq	r3,zero,4958 <_dtoa_r+0x112c>
    3cdc:	d8800617 	ldw	r2,24(sp)
    3ce0:	dac00917 	ldw	r11,36(sp)
    3ce4:	d8801315 	stw	r2,76(sp)
    3ce8:	d8c00c17 	ldw	r3,48(sp)
    3cec:	18039026 	beq	r3,zero,4b30 <_dtoa_r+0x1304>
    3cf0:	58bfffc4 	addi	r2,r11,-1
    3cf4:	100490fa 	slli	r2,r2,3
    3cf8:	00c00074 	movhi	r3,1
    3cfc:	18f6bf04 	addi	r3,r3,-9476
    3d00:	0009883a 	mov	r4,zero
    3d04:	1885883a 	add	r2,r3,r2
    3d08:	11800017 	ldw	r6,0(r2)
    3d0c:	11c00117 	ldw	r7,4(r2)
    3d10:	014ff834 	movhi	r5,16352
    3d14:	dac01615 	stw	r11,88(sp)
    3d18:	000a0c00 	call	a0c0 <__divdf3>
    3d1c:	900d883a 	mov	r6,r18
    3d20:	a80f883a 	mov	r7,r21
    3d24:	1009883a 	mov	r4,r2
    3d28:	180b883a 	mov	r5,r3
    3d2c:	0009d7c0 	call	9d7c <__subdf3>
    3d30:	a00b883a 	mov	r5,r20
    3d34:	9809883a 	mov	r4,r19
    3d38:	182b883a 	mov	r21,r3
    3d3c:	d8801015 	stw	r2,64(sp)
    3d40:	000a5240 	call	a524 <__fixdfsi>
    3d44:	1009883a 	mov	r4,r2
    3d48:	d8801515 	stw	r2,84(sp)
    3d4c:	000a4500 	call	a450 <__floatsidf>
    3d50:	9809883a 	mov	r4,r19
    3d54:	a00b883a 	mov	r5,r20
    3d58:	100d883a 	mov	r6,r2
    3d5c:	180f883a 	mov	r7,r3
    3d60:	0009d7c0 	call	9d7c <__subdf3>
    3d64:	da401517 	ldw	r9,84(sp)
    3d68:	d9001017 	ldw	r4,64(sp)
    3d6c:	a80b883a 	mov	r5,r21
    3d70:	4d000c04 	addi	r20,r9,48
    3d74:	bd000005 	stb	r20,0(r23)
    3d78:	100d883a 	mov	r6,r2
    3d7c:	180f883a 	mov	r7,r3
    3d80:	bd800044 	addi	r22,r23,1
    3d84:	1025883a 	mov	r18,r2
    3d88:	1827883a 	mov	r19,r3
    3d8c:	000a32c0 	call	a32c <__gtdf2>
    3d90:	00842216 	blt	zero,r2,4e1c <_dtoa_r+0x15f0>
    3d94:	0009883a 	mov	r4,zero
    3d98:	014ffc34 	movhi	r5,16368
    3d9c:	900d883a 	mov	r6,r18
    3da0:	980f883a 	mov	r7,r19
    3da4:	0009d7c0 	call	9d7c <__subdf3>
    3da8:	d9001017 	ldw	r4,64(sp)
    3dac:	a80b883a 	mov	r5,r21
    3db0:	100d883a 	mov	r6,r2
    3db4:	180f883a 	mov	r7,r3
    3db8:	000a32c0 	call	a32c <__gtdf2>
    3dbc:	dac01617 	ldw	r11,88(sp)
    3dc0:	00841316 	blt	zero,r2,4e10 <_dtoa_r+0x15e4>
    3dc4:	00800044 	movi	r2,1
    3dc8:	12c0670e 	bge	r2,r11,3f68 <_dtoa_r+0x73c>
    3dcc:	bad7883a 	add	r11,r23,r11
    3dd0:	df001115 	stw	fp,68(sp)
    3dd4:	dc401215 	stw	r17,72(sp)
    3dd8:	5839883a 	mov	fp,r11
    3ddc:	dc401017 	ldw	r17,64(sp)
    3de0:	00000806 	br	3e04 <_dtoa_r+0x5d8>
    3de4:	0009d7c0 	call	9d7c <__subdf3>
    3de8:	1009883a 	mov	r4,r2
    3dec:	180b883a 	mov	r5,r3
    3df0:	880d883a 	mov	r6,r17
    3df4:	a80f883a 	mov	r7,r21
    3df8:	000a3f40 	call	a3f4 <__ltdf2>
    3dfc:	1003ee16 	blt	r2,zero,4db8 <_dtoa_r+0x158c>
    3e00:	b703f126 	beq	r22,fp,4dc8 <_dtoa_r+0x159c>
    3e04:	8809883a 	mov	r4,r17
    3e08:	a80b883a 	mov	r5,r21
    3e0c:	000d883a 	mov	r6,zero
    3e10:	01d00934 	movhi	r7,16420
    3e14:	0009ddc0 	call	9ddc <__muldf3>
    3e18:	000d883a 	mov	r6,zero
    3e1c:	01d00934 	movhi	r7,16420
    3e20:	9009883a 	mov	r4,r18
    3e24:	980b883a 	mov	r5,r19
    3e28:	1023883a 	mov	r17,r2
    3e2c:	182b883a 	mov	r21,r3
    3e30:	0009ddc0 	call	9ddc <__muldf3>
    3e34:	180b883a 	mov	r5,r3
    3e38:	1009883a 	mov	r4,r2
    3e3c:	1825883a 	mov	r18,r3
    3e40:	1027883a 	mov	r19,r2
    3e44:	000a5240 	call	a524 <__fixdfsi>
    3e48:	1009883a 	mov	r4,r2
    3e4c:	1029883a 	mov	r20,r2
    3e50:	000a4500 	call	a450 <__floatsidf>
    3e54:	9809883a 	mov	r4,r19
    3e58:	900b883a 	mov	r5,r18
    3e5c:	100d883a 	mov	r6,r2
    3e60:	180f883a 	mov	r7,r3
    3e64:	0009d7c0 	call	9d7c <__subdf3>
    3e68:	a5000c04 	addi	r20,r20,48
    3e6c:	b5000005 	stb	r20,0(r22)
    3e70:	1009883a 	mov	r4,r2
    3e74:	180b883a 	mov	r5,r3
    3e78:	880d883a 	mov	r6,r17
    3e7c:	a80f883a 	mov	r7,r21
    3e80:	1025883a 	mov	r18,r2
    3e84:	1827883a 	mov	r19,r3
    3e88:	000a3f40 	call	a3f4 <__ltdf2>
    3e8c:	b5800044 	addi	r22,r22,1
    3e90:	0009883a 	mov	r4,zero
    3e94:	014ffc34 	movhi	r5,16368
    3e98:	900d883a 	mov	r6,r18
    3e9c:	980f883a 	mov	r7,r19
    3ea0:	103fd00e 	bge	r2,zero,3de4 <_dtoa_r+0x5b8>
    3ea4:	d9001317 	ldw	r4,76(sp)
    3ea8:	df001117 	ldw	fp,68(sp)
    3eac:	d9000615 	stw	r4,24(sp)
    3eb0:	8009883a 	mov	r4,r16
    3eb4:	e00b883a 	mov	r5,fp
    3eb8:	0006cec0 	call	6cec <_Bfree>
    3ebc:	d9c00617 	ldw	r7,24(sp)
    3ec0:	d8c02217 	ldw	r3,136(sp)
    3ec4:	d9002417 	ldw	r4,144(sp)
    3ec8:	b0000005 	stb	zero,0(r22)
    3ecc:	38800044 	addi	r2,r7,1
    3ed0:	18800015 	stw	r2,0(r3)
    3ed4:	203e8426 	beq	r4,zero,38e8 <_dtoa_r+0xbc>
    3ed8:	25800015 	stw	r22,0(r4)
    3edc:	003e8206 	br	38e8 <_dtoa_r+0xbc>
    3ee0:	00800434 	movhi	r2,16
    3ee4:	10bfffc4 	addi	r2,r2,-1
    3ee8:	90a4703a 	and	r18,r18,r2
    3eec:	903e901e 	bne	r18,zero,3930 <_dtoa_r+0x104>
    3ef0:	05c00074 	movhi	r23,1
    3ef4:	bdf69604 	addi	r23,r23,-9640
    3ef8:	003e8f06 	br	3938 <_dtoa_r+0x10c>
    3efc:	b8800204 	addi	r2,r23,8
    3f00:	003e9206 	br	394c <_dtoa_r+0x120>
    3f04:	01400434 	movhi	r5,16
    3f08:	297fffc4 	addi	r5,r5,-1
    3f0c:	894a703a 	and	r5,r17,r5
    3f10:	d9000317 	ldw	r4,12(sp)
    3f14:	294ffc34 	orhi	r5,r5,16368
    3f18:	a53f0044 	addi	r20,r20,-1023
    3f1c:	dd400217 	ldw	r21,8(sp)
    3f20:	d8000f15 	stw	zero,60(sp)
    3f24:	003eb106 	br	39ec <_dtoa_r+0x1c0>
    3f28:	05c00074 	movhi	r23,1
    3f2c:	bdf68d04 	addi	r23,r23,-9676
    3f30:	003e6d06 	br	38e8 <_dtoa_r+0xbc>
    3f34:	d8000415 	stw	zero,16(sp)
    3f38:	80001115 	stw	zero,68(r16)
    3f3c:	8009883a 	mov	r4,r16
    3f40:	000b883a 	mov	r5,zero
    3f44:	0006c440 	call	6c44 <_Balloc>
    3f48:	01ffffc4 	movi	r7,-1
    3f4c:	102f883a 	mov	r23,r2
    3f50:	80801015 	stw	r2,64(r16)
    3f54:	00800044 	movi	r2,1
    3f58:	d9c00915 	stw	r7,36(sp)
    3f5c:	d8002115 	stw	zero,132(sp)
    3f60:	d9c00e15 	stw	r7,56(sp)
    3f64:	d8800c15 	stw	r2,48(sp)
    3f68:	d8800117 	ldw	r2,4(sp)
    3f6c:	10008b16 	blt	r2,zero,419c <_dtoa_r+0x970>
    3f70:	d9000617 	ldw	r4,24(sp)
    3f74:	00c00384 	movi	r3,14
    3f78:	19008816 	blt	r3,r4,419c <_dtoa_r+0x970>
    3f7c:	200490fa 	slli	r2,r4,3
    3f80:	d9c02117 	ldw	r7,132(sp)
    3f84:	00c00074 	movhi	r3,1
    3f88:	18f6bf04 	addi	r3,r3,-9476
    3f8c:	1885883a 	add	r2,r3,r2
    3f90:	14800017 	ldw	r18,0(r2)
    3f94:	14c00117 	ldw	r19,4(r2)
    3f98:	3801c916 	blt	r7,zero,46c0 <_dtoa_r+0xe94>
    3f9c:	d9000317 	ldw	r4,12(sp)
    3fa0:	900d883a 	mov	r6,r18
    3fa4:	980f883a 	mov	r7,r19
    3fa8:	880b883a 	mov	r5,r17
    3fac:	000a0c00 	call	a0c0 <__divdf3>
    3fb0:	180b883a 	mov	r5,r3
    3fb4:	1009883a 	mov	r4,r2
    3fb8:	000a5240 	call	a524 <__fixdfsi>
    3fbc:	1009883a 	mov	r4,r2
    3fc0:	102b883a 	mov	r21,r2
    3fc4:	000a4500 	call	a450 <__floatsidf>
    3fc8:	1009883a 	mov	r4,r2
    3fcc:	180b883a 	mov	r5,r3
    3fd0:	900d883a 	mov	r6,r18
    3fd4:	980f883a 	mov	r7,r19
    3fd8:	0009ddc0 	call	9ddc <__muldf3>
    3fdc:	d9000317 	ldw	r4,12(sp)
    3fe0:	880b883a 	mov	r5,r17
    3fe4:	100d883a 	mov	r6,r2
    3fe8:	180f883a 	mov	r7,r3
    3fec:	0009d7c0 	call	9d7c <__subdf3>
    3ff0:	d9c00917 	ldw	r7,36(sp)
    3ff4:	1009883a 	mov	r4,r2
    3ff8:	a8800c04 	addi	r2,r21,48
    3ffc:	b8800005 	stb	r2,0(r23)
    4000:	01800044 	movi	r6,1
    4004:	180b883a 	mov	r5,r3
    4008:	2005883a 	mov	r2,r4
    400c:	bd800044 	addi	r22,r23,1
    4010:	39803726 	beq	r7,r6,40f0 <_dtoa_r+0x8c4>
    4014:	000d883a 	mov	r6,zero
    4018:	01d00934 	movhi	r7,16420
    401c:	0009ddc0 	call	9ddc <__muldf3>
    4020:	1009883a 	mov	r4,r2
    4024:	180b883a 	mov	r5,r3
    4028:	000d883a 	mov	r6,zero
    402c:	000f883a 	mov	r7,zero
    4030:	1029883a 	mov	r20,r2
    4034:	1823883a 	mov	r17,r3
    4038:	000a2740 	call	a274 <__eqdf2>
    403c:	103f9c26 	beq	r2,zero,3eb0 <_dtoa_r+0x684>
    4040:	dd400917 	ldw	r21,36(sp)
    4044:	dc000415 	stw	r16,16(sp)
    4048:	00000906 	br	4070 <_dtoa_r+0x844>
    404c:	0009ddc0 	call	9ddc <__muldf3>
    4050:	1009883a 	mov	r4,r2
    4054:	180b883a 	mov	r5,r3
    4058:	000d883a 	mov	r6,zero
    405c:	000f883a 	mov	r7,zero
    4060:	1029883a 	mov	r20,r2
    4064:	1823883a 	mov	r17,r3
    4068:	000a2740 	call	a274 <__eqdf2>
    406c:	10022926 	beq	r2,zero,4914 <_dtoa_r+0x10e8>
    4070:	900d883a 	mov	r6,r18
    4074:	980f883a 	mov	r7,r19
    4078:	a009883a 	mov	r4,r20
    407c:	880b883a 	mov	r5,r17
    4080:	000a0c00 	call	a0c0 <__divdf3>
    4084:	180b883a 	mov	r5,r3
    4088:	1009883a 	mov	r4,r2
    408c:	000a5240 	call	a524 <__fixdfsi>
    4090:	1009883a 	mov	r4,r2
    4094:	1021883a 	mov	r16,r2
    4098:	000a4500 	call	a450 <__floatsidf>
    409c:	1009883a 	mov	r4,r2
    40a0:	180b883a 	mov	r5,r3
    40a4:	900d883a 	mov	r6,r18
    40a8:	980f883a 	mov	r7,r19
    40ac:	0009ddc0 	call	9ddc <__muldf3>
    40b0:	a009883a 	mov	r4,r20
    40b4:	880b883a 	mov	r5,r17
    40b8:	100d883a 	mov	r6,r2
    40bc:	180f883a 	mov	r7,r3
    40c0:	0009d7c0 	call	9d7c <__subdf3>
    40c4:	82400c04 	addi	r9,r16,48
    40c8:	b2400005 	stb	r9,0(r22)
    40cc:	b5800044 	addi	r22,r22,1
    40d0:	b5d3c83a 	sub	r9,r22,r23
    40d4:	000d883a 	mov	r6,zero
    40d8:	01d00934 	movhi	r7,16420
    40dc:	1009883a 	mov	r4,r2
    40e0:	180b883a 	mov	r5,r3
    40e4:	aa7fd91e 	bne	r21,r9,404c <_dtoa_r+0x820>
    40e8:	802b883a 	mov	r21,r16
    40ec:	dc000417 	ldw	r16,16(sp)
    40f0:	1009883a 	mov	r4,r2
    40f4:	180b883a 	mov	r5,r3
    40f8:	100d883a 	mov	r6,r2
    40fc:	180f883a 	mov	r7,r3
    4100:	0009d280 	call	9d28 <__adddf3>
    4104:	9009883a 	mov	r4,r18
    4108:	980b883a 	mov	r5,r19
    410c:	100d883a 	mov	r6,r2
    4110:	180f883a 	mov	r7,r3
    4114:	1023883a 	mov	r17,r2
    4118:	1829883a 	mov	r20,r3
    411c:	000a3f40 	call	a3f4 <__ltdf2>
    4120:	10000816 	blt	r2,zero,4144 <_dtoa_r+0x918>
    4124:	9009883a 	mov	r4,r18
    4128:	980b883a 	mov	r5,r19
    412c:	880d883a 	mov	r6,r17
    4130:	a00f883a 	mov	r7,r20
    4134:	000a2740 	call	a274 <__eqdf2>
    4138:	103f5d1e 	bne	r2,zero,3eb0 <_dtoa_r+0x684>
    413c:	ad40004c 	andi	r21,r21,1
    4140:	a83f5b26 	beq	r21,zero,3eb0 <_dtoa_r+0x684>
    4144:	b53fffc3 	ldbu	r20,-1(r22)
    4148:	b0ffff84 	addi	r3,r22,-2
    414c:	01400e44 	movi	r5,57
    4150:	00000306 	br	4160 <_dtoa_r+0x934>
    4154:	1d000003 	ldbu	r20,0(r3)
    4158:	102d883a 	mov	r22,r2
    415c:	18ffffc4 	addi	r3,r3,-1
    4160:	a1003fcc 	andi	r4,r20,255
    4164:	2100201c 	xori	r4,r4,128
    4168:	213fe004 	addi	r4,r4,-128
    416c:	b0bfffc4 	addi	r2,r22,-1
    4170:	2142ca1e 	bne	r4,r5,4c9c <_dtoa_r+0x1470>
    4174:	b8bff71e 	bne	r23,r2,4154 <_dtoa_r+0x928>
    4178:	d8800617 	ldw	r2,24(sp)
    417c:	05000c44 	movi	r20,49
    4180:	10800044 	addi	r2,r2,1
    4184:	d8800615 	stw	r2,24(sp)
    4188:	00800c04 	movi	r2,48
    418c:	b8800005 	stb	r2,0(r23)
    4190:	b805883a 	mov	r2,r23
    4194:	15000005 	stb	r20,0(r2)
    4198:	003f4506 	br	3eb0 <_dtoa_r+0x684>
    419c:	d9c00c17 	ldw	r7,48(sp)
    41a0:	3800c926 	beq	r7,zero,44c8 <_dtoa_r+0xc9c>
    41a4:	d9c00417 	ldw	r7,16(sp)
    41a8:	00c00044 	movi	r3,1
    41ac:	19c16c0e 	bge	r3,r7,4760 <_dtoa_r+0xf34>
    41b0:	d9000917 	ldw	r4,36(sp)
    41b4:	d9c00a17 	ldw	r7,40(sp)
    41b8:	24ffffc4 	addi	r19,r4,-1
    41bc:	3cc20716 	blt	r7,r19,49dc <_dtoa_r+0x11b0>
    41c0:	3ce7c83a 	sub	r19,r7,r19
    41c4:	d9c00917 	ldw	r7,36(sp)
    41c8:	3802ae16 	blt	r7,zero,4c84 <_dtoa_r+0x1458>
    41cc:	dc800817 	ldw	r18,32(sp)
    41d0:	d8800917 	ldw	r2,36(sp)
    41d4:	d8c00817 	ldw	r3,32(sp)
    41d8:	d9c00717 	ldw	r7,28(sp)
    41dc:	8009883a 	mov	r4,r16
    41e0:	1887883a 	add	r3,r3,r2
    41e4:	388f883a 	add	r7,r7,r2
    41e8:	01400044 	movi	r5,1
    41ec:	d8c00815 	stw	r3,32(sp)
    41f0:	d9c00715 	stw	r7,28(sp)
    41f4:	00070740 	call	7074 <__i2b>
    41f8:	102b883a 	mov	r21,r2
    41fc:	90000a26 	beq	r18,zero,4228 <_dtoa_r+0x9fc>
    4200:	d8800717 	ldw	r2,28(sp)
    4204:	0080080e 	bge	zero,r2,4228 <_dtoa_r+0x9fc>
    4208:	90812b16 	blt	r18,r2,46b8 <_dtoa_r+0xe8c>
    420c:	d8c00817 	ldw	r3,32(sp)
    4210:	d9000717 	ldw	r4,28(sp)
    4214:	90a5c83a 	sub	r18,r18,r2
    4218:	1887c83a 	sub	r3,r3,r2
    421c:	2089c83a 	sub	r4,r4,r2
    4220:	d8c00815 	stw	r3,32(sp)
    4224:	d9000715 	stw	r4,28(sp)
    4228:	d9c00a17 	ldw	r7,40(sp)
    422c:	01c0140e 	bge	zero,r7,4280 <_dtoa_r+0xa54>
    4230:	d8800c17 	ldw	r2,48(sp)
    4234:	1001de26 	beq	r2,zero,49b0 <_dtoa_r+0x1184>
    4238:	04c00e0e 	bge	zero,r19,4274 <_dtoa_r+0xa48>
    423c:	a80b883a 	mov	r5,r21
    4240:	8009883a 	mov	r4,r16
    4244:	980d883a 	mov	r6,r19
    4248:	00073080 	call	7308 <__pow5mult>
    424c:	e00d883a 	mov	r6,fp
    4250:	8009883a 	mov	r4,r16
    4254:	100b883a 	mov	r5,r2
    4258:	102b883a 	mov	r21,r2
    425c:	00070b00 	call	70b0 <__multiply>
    4260:	1029883a 	mov	r20,r2
    4264:	e00b883a 	mov	r5,fp
    4268:	8009883a 	mov	r4,r16
    426c:	0006cec0 	call	6cec <_Bfree>
    4270:	a039883a 	mov	fp,r20
    4274:	d8c00a17 	ldw	r3,40(sp)
    4278:	1ccdc83a 	sub	r6,r3,r19
    427c:	3001291e 	bne	r6,zero,4724 <_dtoa_r+0xef8>
    4280:	8009883a 	mov	r4,r16
    4284:	01400044 	movi	r5,1
    4288:	00070740 	call	7074 <__i2b>
    428c:	d9000b17 	ldw	r4,44(sp)
    4290:	1029883a 	mov	r20,r2
    4294:	0100050e 	bge	zero,r4,42ac <_dtoa_r+0xa80>
    4298:	d9800b17 	ldw	r6,44(sp)
    429c:	8009883a 	mov	r4,r16
    42a0:	100b883a 	mov	r5,r2
    42a4:	00073080 	call	7308 <__pow5mult>
    42a8:	1029883a 	mov	r20,r2
    42ac:	d9c00417 	ldw	r7,16(sp)
    42b0:	00800044 	movi	r2,1
    42b4:	11c0f00e 	bge	r2,r7,4678 <_dtoa_r+0xe4c>
    42b8:	0023883a 	mov	r17,zero
    42bc:	d8800b17 	ldw	r2,44(sp)
    42c0:	1001741e 	bne	r2,zero,4894 <_dtoa_r+0x1068>
    42c4:	00800044 	movi	r2,1
    42c8:	d8c00717 	ldw	r3,28(sp)
    42cc:	10c5883a 	add	r2,r2,r3
    42d0:	108007cc 	andi	r2,r2,31
    42d4:	10008026 	beq	r2,zero,44d8 <_dtoa_r+0xcac>
    42d8:	01000804 	movi	r4,32
    42dc:	2089c83a 	sub	r4,r4,r2
    42e0:	00c00104 	movi	r3,4
    42e4:	1902d00e 	bge	r3,r4,4e28 <_dtoa_r+0x15fc>
    42e8:	d9000817 	ldw	r4,32(sp)
    42ec:	d9c00717 	ldw	r7,28(sp)
    42f0:	00c00704 	movi	r3,28
    42f4:	1885c83a 	sub	r2,r3,r2
    42f8:	2089883a 	add	r4,r4,r2
    42fc:	388f883a 	add	r7,r7,r2
    4300:	d9000815 	stw	r4,32(sp)
    4304:	90a5883a 	add	r18,r18,r2
    4308:	d9c00715 	stw	r7,28(sp)
    430c:	d9c00817 	ldw	r7,32(sp)
    4310:	01c0050e 	bge	zero,r7,4328 <_dtoa_r+0xafc>
    4314:	e00b883a 	mov	r5,fp
    4318:	8009883a 	mov	r4,r16
    431c:	380d883a 	mov	r6,r7
    4320:	00074340 	call	7434 <__lshift>
    4324:	1039883a 	mov	fp,r2
    4328:	d8800717 	ldw	r2,28(sp)
    432c:	0080050e 	bge	zero,r2,4344 <_dtoa_r+0xb18>
    4330:	a00b883a 	mov	r5,r20
    4334:	8009883a 	mov	r4,r16
    4338:	100d883a 	mov	r6,r2
    433c:	00074340 	call	7434 <__lshift>
    4340:	1029883a 	mov	r20,r2
    4344:	d8c00d17 	ldw	r3,52(sp)
    4348:	1801401e 	bne	r3,zero,484c <_dtoa_r+0x1020>
    434c:	d8800917 	ldw	r2,36(sp)
    4350:	00815a0e 	bge	zero,r2,48bc <_dtoa_r+0x1090>
    4354:	d8c00c17 	ldw	r3,48(sp)
    4358:	18006f1e 	bne	r3,zero,4518 <_dtoa_r+0xcec>
    435c:	b823883a 	mov	r17,r23
    4360:	dc800917 	ldw	r18,36(sp)
    4364:	00000206 	br	4370 <_dtoa_r+0xb44>
    4368:	0006d140 	call	6d14 <__multadd>
    436c:	1039883a 	mov	fp,r2
    4370:	e009883a 	mov	r4,fp
    4374:	a00b883a 	mov	r5,r20
    4378:	00035f00 	call	35f0 <quorem>
    437c:	10800c04 	addi	r2,r2,48
    4380:	88800005 	stb	r2,0(r17)
    4384:	8c400044 	addi	r17,r17,1
    4388:	8dc7c83a 	sub	r3,r17,r23
    438c:	8009883a 	mov	r4,r16
    4390:	e00b883a 	mov	r5,fp
    4394:	01800284 	movi	r6,10
    4398:	000f883a 	mov	r7,zero
    439c:	1cbff216 	blt	r3,r18,4368 <_dtoa_r+0xb3c>
    43a0:	dd800917 	ldw	r22,36(sp)
    43a4:	1007883a 	mov	r3,r2
    43a8:	05823a0e 	bge	zero,r22,4c94 <_dtoa_r+0x1468>
    43ac:	bdad883a 	add	r22,r23,r22
    43b0:	0023883a 	mov	r17,zero
    43b4:	e00b883a 	mov	r5,fp
    43b8:	01800044 	movi	r6,1
    43bc:	8009883a 	mov	r4,r16
    43c0:	d8c01515 	stw	r3,84(sp)
    43c4:	00074340 	call	7434 <__lshift>
    43c8:	1009883a 	mov	r4,r2
    43cc:	a00b883a 	mov	r5,r20
    43d0:	1039883a 	mov	fp,r2
    43d4:	00075900 	call	7590 <__mcmp>
    43d8:	d8c01517 	ldw	r3,84(sp)
    43dc:	0080d60e 	bge	zero,r2,4738 <_dtoa_r+0xf0c>
    43e0:	b13fffc3 	ldbu	r4,-1(r22)
    43e4:	b0ffff84 	addi	r3,r22,-2
    43e8:	01800e44 	movi	r6,57
    43ec:	00000306 	br	43fc <_dtoa_r+0xbd0>
    43f0:	19000003 	ldbu	r4,0(r3)
    43f4:	102d883a 	mov	r22,r2
    43f8:	18ffffc4 	addi	r3,r3,-1
    43fc:	21403fcc 	andi	r5,r4,255
    4400:	2940201c 	xori	r5,r5,128
    4404:	297fe004 	addi	r5,r5,-128
    4408:	b0bfffc4 	addi	r2,r22,-1
    440c:	2981a71e 	bne	r5,r6,4aac <_dtoa_r+0x1280>
    4410:	b8bff71e 	bne	r23,r2,43f0 <_dtoa_r+0xbc4>
    4414:	d8800617 	ldw	r2,24(sp)
    4418:	10800044 	addi	r2,r2,1
    441c:	d8800615 	stw	r2,24(sp)
    4420:	00800c44 	movi	r2,49
    4424:	b8800005 	stb	r2,0(r23)
    4428:	8009883a 	mov	r4,r16
    442c:	a00b883a 	mov	r5,r20
    4430:	0006cec0 	call	6cec <_Bfree>
    4434:	a83e9e26 	beq	r21,zero,3eb0 <_dtoa_r+0x684>
    4438:	88000426 	beq	r17,zero,444c <_dtoa_r+0xc20>
    443c:	8d400326 	beq	r17,r21,444c <_dtoa_r+0xc20>
    4440:	8009883a 	mov	r4,r16
    4444:	880b883a 	mov	r5,r17
    4448:	0006cec0 	call	6cec <_Bfree>
    444c:	8009883a 	mov	r4,r16
    4450:	a80b883a 	mov	r5,r21
    4454:	0006cec0 	call	6cec <_Bfree>
    4458:	003e9506 	br	3eb0 <_dtoa_r+0x684>
    445c:	00c00044 	movi	r3,1
    4460:	d8c00d15 	stw	r3,52(sp)
    4464:	003d9f06 	br	3ae4 <_dtoa_r+0x2b8>
    4468:	d9000817 	ldw	r4,32(sp)
    446c:	d8800617 	ldw	r2,24(sp)
    4470:	d8000b15 	stw	zero,44(sp)
    4474:	2089c83a 	sub	r4,r4,r2
    4478:	0087c83a 	sub	r3,zero,r2
    447c:	d9000815 	stw	r4,32(sp)
    4480:	d8c00a15 	stw	r3,40(sp)
    4484:	003da306 	br	3b14 <_dtoa_r+0x2e8>
    4488:	0529c83a 	sub	r20,zero,r20
    448c:	dd000815 	stw	r20,32(sp)
    4490:	d8000715 	stw	zero,28(sp)
    4494:	003d9806 	br	3af8 <_dtoa_r+0x2cc>
    4498:	d9000617 	ldw	r4,24(sp)
    449c:	000a4500 	call	a450 <__floatsidf>
    44a0:	1009883a 	mov	r4,r2
    44a4:	180b883a 	mov	r5,r3
    44a8:	980d883a 	mov	r6,r19
    44ac:	900f883a 	mov	r7,r18
    44b0:	000a2d00 	call	a2d0 <__nedf2>
    44b4:	103d7a26 	beq	r2,zero,3aa0 <_dtoa_r+0x274>
    44b8:	d8800617 	ldw	r2,24(sp)
    44bc:	10bfffc4 	addi	r2,r2,-1
    44c0:	d8800615 	stw	r2,24(sp)
    44c4:	003d7606 	br	3aa0 <_dtoa_r+0x274>
    44c8:	dcc00a17 	ldw	r19,40(sp)
    44cc:	dc800817 	ldw	r18,32(sp)
    44d0:	002b883a 	mov	r21,zero
    44d4:	003f4906 	br	41fc <_dtoa_r+0x9d0>
    44d8:	00800704 	movi	r2,28
    44dc:	d8c00817 	ldw	r3,32(sp)
    44e0:	d9000717 	ldw	r4,28(sp)
    44e4:	90a5883a 	add	r18,r18,r2
    44e8:	1887883a 	add	r3,r3,r2
    44ec:	2089883a 	add	r4,r4,r2
    44f0:	d8c00815 	stw	r3,32(sp)
    44f4:	d9000715 	stw	r4,28(sp)
    44f8:	003f8406 	br	430c <_dtoa_r+0xae0>
    44fc:	d9c00317 	ldw	r7,12(sp)
    4500:	013efb84 	movi	r4,-1042
    4504:	2509c83a 	sub	r4,r4,r20
    4508:	3908983a 	sll	r4,r7,r4
    450c:	003d3006 	br	39d0 <_dtoa_r+0x1a4>
    4510:	d8000d15 	stw	zero,52(sp)
    4514:	003d7306 	br	3ae4 <_dtoa_r+0x2b8>
    4518:	0480050e 	bge	zero,r18,4530 <_dtoa_r+0xd04>
    451c:	a80b883a 	mov	r5,r21
    4520:	8009883a 	mov	r4,r16
    4524:	900d883a 	mov	r6,r18
    4528:	00074340 	call	7434 <__lshift>
    452c:	102b883a 	mov	r21,r2
    4530:	8801611e 	bne	r17,zero,4ab8 <_dtoa_r+0x128c>
    4534:	a827883a 	mov	r19,r21
    4538:	d8c00317 	ldw	r3,12(sp)
    453c:	d9000917 	ldw	r4,36(sp)
    4540:	b8bfffc4 	addi	r2,r23,-1
    4544:	18c0004c 	andi	r3,r3,1
    4548:	1105883a 	add	r2,r2,r4
    454c:	b825883a 	mov	r18,r23
    4550:	d8800515 	stw	r2,20(sp)
    4554:	a823883a 	mov	r17,r21
    4558:	d8c00315 	stw	r3,12(sp)
    455c:	ddc00715 	stw	r23,28(sp)
    4560:	e009883a 	mov	r4,fp
    4564:	a00b883a 	mov	r5,r20
    4568:	00035f00 	call	35f0 <quorem>
    456c:	e009883a 	mov	r4,fp
    4570:	880b883a 	mov	r5,r17
    4574:	102d883a 	mov	r22,r2
    4578:	00075900 	call	7590 <__mcmp>
    457c:	980d883a 	mov	r6,r19
    4580:	8009883a 	mov	r4,r16
    4584:	a00b883a 	mov	r5,r20
    4588:	102b883a 	mov	r21,r2
    458c:	00075e80 	call	75e8 <__mdiff>
    4590:	100d883a 	mov	r6,r2
    4594:	10800317 	ldw	r2,12(r2)
    4598:	b5c00c04 	addi	r23,r22,48
    459c:	10008c26 	beq	r2,zero,47d0 <_dtoa_r+0xfa4>
    45a0:	8009883a 	mov	r4,r16
    45a4:	300b883a 	mov	r5,r6
    45a8:	0006cec0 	call	6cec <_Bfree>
    45ac:	00800044 	movi	r2,1
    45b0:	a8007116 	blt	r21,zero,4778 <_dtoa_r+0xf4c>
    45b4:	a800041e 	bne	r21,zero,45c8 <_dtoa_r+0xd9c>
    45b8:	d9c00417 	ldw	r7,16(sp)
    45bc:	3800021e 	bne	r7,zero,45c8 <_dtoa_r+0xd9c>
    45c0:	d8c00317 	ldw	r3,12(sp)
    45c4:	18006c26 	beq	r3,zero,4778 <_dtoa_r+0xf4c>
    45c8:	00814c16 	blt	zero,r2,4afc <_dtoa_r+0x12d0>
    45cc:	d8c00517 	ldw	r3,20(sp)
    45d0:	95400044 	addi	r21,r18,1
    45d4:	95c00005 	stb	r23,0(r18)
    45d8:	a82d883a 	mov	r22,r21
    45dc:	90c14d26 	beq	r18,r3,4b14 <_dtoa_r+0x12e8>
    45e0:	e00b883a 	mov	r5,fp
    45e4:	8009883a 	mov	r4,r16
    45e8:	01800284 	movi	r6,10
    45ec:	000f883a 	mov	r7,zero
    45f0:	0006d140 	call	6d14 <__multadd>
    45f4:	1039883a 	mov	fp,r2
    45f8:	8cc08b26 	beq	r17,r19,4828 <_dtoa_r+0xffc>
    45fc:	880b883a 	mov	r5,r17
    4600:	01800284 	movi	r6,10
    4604:	000f883a 	mov	r7,zero
    4608:	8009883a 	mov	r4,r16
    460c:	0006d140 	call	6d14 <__multadd>
    4610:	980b883a 	mov	r5,r19
    4614:	8009883a 	mov	r4,r16
    4618:	01800284 	movi	r6,10
    461c:	000f883a 	mov	r7,zero
    4620:	1023883a 	mov	r17,r2
    4624:	0006d140 	call	6d14 <__multadd>
    4628:	1027883a 	mov	r19,r2
    462c:	a825883a 	mov	r18,r21
    4630:	003fcb06 	br	4560 <_dtoa_r+0xd34>
    4634:	d9c00417 	ldw	r7,16(sp)
    4638:	00800104 	movi	r2,4
    463c:	3880e426 	beq	r7,r2,49d0 <_dtoa_r+0x11a4>
    4640:	00800144 	movi	r2,5
    4644:	38be3c1e 	bne	r7,r2,3f38 <_dtoa_r+0x70c>
    4648:	00c00044 	movi	r3,1
    464c:	d8c00c15 	stw	r3,48(sp)
    4650:	d9c02117 	ldw	r7,132(sp)
    4654:	d8800617 	ldw	r2,24(sp)
    4658:	388f883a 	add	r7,r7,r2
    465c:	3c800044 	addi	r18,r7,1
    4660:	d9c00e15 	stw	r7,56(sp)
    4664:	dc800915 	stw	r18,36(sp)
    4668:	04bd3e16 	blt	zero,r18,3b64 <_dtoa_r+0x338>
    466c:	80001115 	stw	zero,68(r16)
    4670:	000b883a 	mov	r5,zero
    4674:	003d4606 	br	3b90 <_dtoa_r+0x364>
    4678:	d8c00317 	ldw	r3,12(sp)
    467c:	183f0e1e 	bne	r3,zero,42b8 <_dtoa_r+0xa8c>
    4680:	00c00434 	movhi	r3,16
    4684:	18ffffc4 	addi	r3,r3,-1
    4688:	88c6703a 	and	r3,r17,r3
    468c:	183f0a1e 	bne	r3,zero,42b8 <_dtoa_r+0xa8c>
    4690:	8c5ffc2c 	andhi	r17,r17,32752
    4694:	883f0826 	beq	r17,zero,42b8 <_dtoa_r+0xa8c>
    4698:	d9000817 	ldw	r4,32(sp)
    469c:	d9c00717 	ldw	r7,28(sp)
    46a0:	1023883a 	mov	r17,r2
    46a4:	2089883a 	add	r4,r4,r2
    46a8:	388f883a 	add	r7,r7,r2
    46ac:	d9000815 	stw	r4,32(sp)
    46b0:	d9c00715 	stw	r7,28(sp)
    46b4:	003f0106 	br	42bc <_dtoa_r+0xa90>
    46b8:	9005883a 	mov	r2,r18
    46bc:	003ed306 	br	420c <_dtoa_r+0x9e0>
    46c0:	d8800917 	ldw	r2,36(sp)
    46c4:	00be3516 	blt	zero,r2,3f9c <_dtoa_r+0x770>
    46c8:	1000b61e 	bne	r2,zero,49a4 <_dtoa_r+0x1178>
    46cc:	9009883a 	mov	r4,r18
    46d0:	980b883a 	mov	r5,r19
    46d4:	000d883a 	mov	r6,zero
    46d8:	01d00534 	movhi	r7,16404
    46dc:	0009ddc0 	call	9ddc <__muldf3>
    46e0:	d9800317 	ldw	r6,12(sp)
    46e4:	1009883a 	mov	r4,r2
    46e8:	180b883a 	mov	r5,r3
    46ec:	880f883a 	mov	r7,r17
    46f0:	000a3900 	call	a390 <__gedf2>
    46f4:	0029883a 	mov	r20,zero
    46f8:	002b883a 	mov	r21,zero
    46fc:	10007e16 	blt	r2,zero,48f8 <_dtoa_r+0x10cc>
    4700:	d8802117 	ldw	r2,132(sp)
    4704:	b82d883a 	mov	r22,r23
    4708:	0084303a 	nor	r2,zero,r2
    470c:	d8800615 	stw	r2,24(sp)
    4710:	8009883a 	mov	r4,r16
    4714:	a00b883a 	mov	r5,r20
    4718:	0006cec0 	call	6cec <_Bfree>
    471c:	a83f4b1e 	bne	r21,zero,444c <_dtoa_r+0xc20>
    4720:	003de306 	br	3eb0 <_dtoa_r+0x684>
    4724:	e00b883a 	mov	r5,fp
    4728:	8009883a 	mov	r4,r16
    472c:	00073080 	call	7308 <__pow5mult>
    4730:	1039883a 	mov	fp,r2
    4734:	003ed206 	br	4280 <_dtoa_r+0xa54>
    4738:	1000021e 	bne	r2,zero,4744 <_dtoa_r+0xf18>
    473c:	18c0004c 	andi	r3,r3,1
    4740:	183f271e 	bne	r3,zero,43e0 <_dtoa_r+0xbb4>
    4744:	01000c04 	movi	r4,48
    4748:	00000106 	br	4750 <_dtoa_r+0xf24>
    474c:	102d883a 	mov	r22,r2
    4750:	b0bfffc4 	addi	r2,r22,-1
    4754:	10c00007 	ldb	r3,0(r2)
    4758:	193ffc26 	beq	r3,r4,474c <_dtoa_r+0xf20>
    475c:	003f3206 	br	4428 <_dtoa_r+0xbfc>
    4760:	d8c00f17 	ldw	r3,60(sp)
    4764:	18015026 	beq	r3,zero,4ca8 <_dtoa_r+0x147c>
    4768:	10810cc4 	addi	r2,r2,1075
    476c:	dcc00a17 	ldw	r19,40(sp)
    4770:	dc800817 	ldw	r18,32(sp)
    4774:	003e9706 	br	41d4 <_dtoa_r+0x9a8>
    4778:	b807883a 	mov	r3,r23
    477c:	182b883a 	mov	r21,r3
    4780:	ddc00717 	ldw	r23,28(sp)
    4784:	00800e0e 	bge	zero,r2,47c0 <_dtoa_r+0xf94>
    4788:	e00b883a 	mov	r5,fp
    478c:	01800044 	movi	r6,1
    4790:	8009883a 	mov	r4,r16
    4794:	d8c01515 	stw	r3,84(sp)
    4798:	00074340 	call	7434 <__lshift>
    479c:	1009883a 	mov	r4,r2
    47a0:	a00b883a 	mov	r5,r20
    47a4:	1039883a 	mov	fp,r2
    47a8:	00075900 	call	7590 <__mcmp>
    47ac:	d8c01517 	ldw	r3,84(sp)
    47b0:	0081880e 	bge	zero,r2,4dd4 <_dtoa_r+0x15a8>
    47b4:	00800e44 	movi	r2,57
    47b8:	b0c00c44 	addi	r3,r22,49
    47bc:	a8816326 	beq	r21,r2,4d4c <_dtoa_r+0x1520>
    47c0:	90c00005 	stb	r3,0(r18)
    47c4:	95800044 	addi	r22,r18,1
    47c8:	982b883a 	mov	r21,r19
    47cc:	003f1606 	br	4428 <_dtoa_r+0xbfc>
    47d0:	300b883a 	mov	r5,r6
    47d4:	e009883a 	mov	r4,fp
    47d8:	d9801515 	stw	r6,84(sp)
    47dc:	00075900 	call	7590 <__mcmp>
    47e0:	d9801517 	ldw	r6,84(sp)
    47e4:	8009883a 	mov	r4,r16
    47e8:	d8801515 	stw	r2,84(sp)
    47ec:	300b883a 	mov	r5,r6
    47f0:	0006cec0 	call	6cec <_Bfree>
    47f4:	d8801517 	ldw	r2,84(sp)
    47f8:	103f6d1e 	bne	r2,zero,45b0 <_dtoa_r+0xd84>
    47fc:	d9c00417 	ldw	r7,16(sp)
    4800:	383f6b1e 	bne	r7,zero,45b0 <_dtoa_r+0xd84>
    4804:	d8c00317 	ldw	r3,12(sp)
    4808:	183f691e 	bne	r3,zero,45b0 <_dtoa_r+0xd84>
    480c:	b807883a 	mov	r3,r23
    4810:	00800e44 	movi	r2,57
    4814:	ddc00717 	ldw	r23,28(sp)
    4818:	18814c26 	beq	r3,r2,4d4c <_dtoa_r+0x1520>
    481c:	057fe80e 	bge	zero,r21,47c0 <_dtoa_r+0xf94>
    4820:	b0c00c44 	addi	r3,r22,49
    4824:	003fe606 	br	47c0 <_dtoa_r+0xf94>
    4828:	880b883a 	mov	r5,r17
    482c:	8009883a 	mov	r4,r16
    4830:	01800284 	movi	r6,10
    4834:	000f883a 	mov	r7,zero
    4838:	0006d140 	call	6d14 <__multadd>
    483c:	1023883a 	mov	r17,r2
    4840:	1027883a 	mov	r19,r2
    4844:	a825883a 	mov	r18,r21
    4848:	003f4506 	br	4560 <_dtoa_r+0xd34>
    484c:	e009883a 	mov	r4,fp
    4850:	a00b883a 	mov	r5,r20
    4854:	00075900 	call	7590 <__mcmp>
    4858:	103ebc0e 	bge	r2,zero,434c <_dtoa_r+0xb20>
    485c:	e00b883a 	mov	r5,fp
    4860:	8009883a 	mov	r4,r16
    4864:	01800284 	movi	r6,10
    4868:	000f883a 	mov	r7,zero
    486c:	0006d140 	call	6d14 <__multadd>
    4870:	1039883a 	mov	fp,r2
    4874:	d8800617 	ldw	r2,24(sp)
    4878:	d8c00c17 	ldw	r3,48(sp)
    487c:	10bfffc4 	addi	r2,r2,-1
    4880:	d8800615 	stw	r2,24(sp)
    4884:	1801571e 	bne	r3,zero,4de4 <_dtoa_r+0x15b8>
    4888:	d9c00e17 	ldw	r7,56(sp)
    488c:	d9c00915 	stw	r7,36(sp)
    4890:	003eae06 	br	434c <_dtoa_r+0xb20>
    4894:	a0800417 	ldw	r2,16(r20)
    4898:	10800104 	addi	r2,r2,4
    489c:	1085883a 	add	r2,r2,r2
    48a0:	1085883a 	add	r2,r2,r2
    48a4:	a085883a 	add	r2,r20,r2
    48a8:	11000017 	ldw	r4,0(r2)
    48ac:	0006f5c0 	call	6f5c <__hi0bits>
    48b0:	00c00804 	movi	r3,32
    48b4:	1885c83a 	sub	r2,r3,r2
    48b8:	003e8306 	br	42c8 <_dtoa_r+0xa9c>
    48bc:	d9c00417 	ldw	r7,16(sp)
    48c0:	00800084 	movi	r2,2
    48c4:	11fea30e 	bge	r2,r7,4354 <_dtoa_r+0xb28>
    48c8:	d8800917 	ldw	r2,36(sp)
    48cc:	103f8c1e 	bne	r2,zero,4700 <_dtoa_r+0xed4>
    48d0:	a00b883a 	mov	r5,r20
    48d4:	8009883a 	mov	r4,r16
    48d8:	01800144 	movi	r6,5
    48dc:	000f883a 	mov	r7,zero
    48e0:	0006d140 	call	6d14 <__multadd>
    48e4:	e009883a 	mov	r4,fp
    48e8:	100b883a 	mov	r5,r2
    48ec:	1029883a 	mov	r20,r2
    48f0:	00075900 	call	7590 <__mcmp>
    48f4:	00bf820e 	bge	zero,r2,4700 <_dtoa_r+0xed4>
    48f8:	00800c44 	movi	r2,49
    48fc:	b8800005 	stb	r2,0(r23)
    4900:	d8800617 	ldw	r2,24(sp)
    4904:	bd800044 	addi	r22,r23,1
    4908:	10800044 	addi	r2,r2,1
    490c:	d8800615 	stw	r2,24(sp)
    4910:	003f7f06 	br	4710 <_dtoa_r+0xee4>
    4914:	dc000417 	ldw	r16,16(sp)
    4918:	003d6506 	br	3eb0 <_dtoa_r+0x684>
    491c:	9009883a 	mov	r4,r18
    4920:	000a4500 	call	a450 <__floatsidf>
    4924:	1009883a 	mov	r4,r2
    4928:	180b883a 	mov	r5,r3
    492c:	980d883a 	mov	r6,r19
    4930:	a00f883a 	mov	r7,r20
    4934:	0009ddc0 	call	9ddc <__muldf3>
    4938:	1009883a 	mov	r4,r2
    493c:	180b883a 	mov	r5,r3
    4940:	000d883a 	mov	r6,zero
    4944:	01d00734 	movhi	r7,16412
    4948:	0009d280 	call	9d28 <__adddf3>
    494c:	057f3034 	movhi	r21,64704
    4950:	1025883a 	mov	r18,r2
    4954:	1d6b883a 	add	r21,r3,r21
    4958:	9809883a 	mov	r4,r19
    495c:	a00b883a 	mov	r5,r20
    4960:	000d883a 	mov	r6,zero
    4964:	01d00534 	movhi	r7,16404
    4968:	0009d7c0 	call	9d7c <__subdf3>
    496c:	1009883a 	mov	r4,r2
    4970:	180b883a 	mov	r5,r3
    4974:	900d883a 	mov	r6,r18
    4978:	a80f883a 	mov	r7,r21
    497c:	1027883a 	mov	r19,r2
    4980:	1829883a 	mov	r20,r3
    4984:	000a32c0 	call	a32c <__gtdf2>
    4988:	00806616 	blt	zero,r2,4b24 <_dtoa_r+0x12f8>
    498c:	a9e0003c 	xorhi	r7,r21,32768
    4990:	9809883a 	mov	r4,r19
    4994:	a00b883a 	mov	r5,r20
    4998:	900d883a 	mov	r6,r18
    499c:	000a3f40 	call	a3f4 <__ltdf2>
    49a0:	103d710e 	bge	r2,zero,3f68 <_dtoa_r+0x73c>
    49a4:	0029883a 	mov	r20,zero
    49a8:	002b883a 	mov	r21,zero
    49ac:	003f5406 	br	4700 <_dtoa_r+0xed4>
    49b0:	d9800a17 	ldw	r6,40(sp)
    49b4:	e00b883a 	mov	r5,fp
    49b8:	8009883a 	mov	r4,r16
    49bc:	00073080 	call	7308 <__pow5mult>
    49c0:	1039883a 	mov	fp,r2
    49c4:	003e2e06 	br	4280 <_dtoa_r+0xa54>
    49c8:	d8000c15 	stw	zero,48(sp)
    49cc:	003f2006 	br	4650 <_dtoa_r+0xe24>
    49d0:	00800044 	movi	r2,1
    49d4:	d8800c15 	stw	r2,48(sp)
    49d8:	003c5d06 	br	3b50 <_dtoa_r+0x324>
    49dc:	d8c00a17 	ldw	r3,40(sp)
    49e0:	d9000b17 	ldw	r4,44(sp)
    49e4:	dcc00a15 	stw	r19,40(sp)
    49e8:	98c5c83a 	sub	r2,r19,r3
    49ec:	2089883a 	add	r4,r4,r2
    49f0:	d9000b15 	stw	r4,44(sp)
    49f4:	0027883a 	mov	r19,zero
    49f8:	003df206 	br	41c4 <_dtoa_r+0x998>
    49fc:	d9000317 	ldw	r4,12(sp)
    4a00:	8829883a 	mov	r20,r17
    4a04:	04800084 	movi	r18,2
    4a08:	d9001015 	stw	r4,64(sp)
    4a0c:	003c8106 	br	3c14 <_dtoa_r+0x3e8>
    4a10:	04800044 	movi	r18,1
    4a14:	dc800e15 	stw	r18,56(sp)
    4a18:	dc800915 	stw	r18,36(sp)
    4a1c:	dc802115 	stw	r18,132(sp)
    4a20:	003f1206 	br	466c <_dtoa_r+0xe40>
    4a24:	d8800617 	ldw	r2,24(sp)
    4a28:	00abc83a 	sub	r21,zero,r2
    4a2c:	a800a426 	beq	r21,zero,4cc0 <_dtoa_r+0x1494>
    4a30:	a88003cc 	andi	r2,r21,15
    4a34:	100490fa 	slli	r2,r2,3
    4a38:	00c00074 	movhi	r3,1
    4a3c:	18f6bf04 	addi	r3,r3,-9476
    4a40:	d9000317 	ldw	r4,12(sp)
    4a44:	1885883a 	add	r2,r3,r2
    4a48:	11800017 	ldw	r6,0(r2)
    4a4c:	11c00117 	ldw	r7,4(r2)
    4a50:	a82bd13a 	srai	r21,r21,4
    4a54:	880b883a 	mov	r5,r17
    4a58:	0009ddc0 	call	9ddc <__muldf3>
    4a5c:	1027883a 	mov	r19,r2
    4a60:	1829883a 	mov	r20,r3
    4a64:	a800e826 	beq	r21,zero,4e08 <_dtoa_r+0x15dc>
    4a68:	05800074 	movhi	r22,1
    4a6c:	b5b6b504 	addi	r22,r22,-9516
    4a70:	04800084 	movi	r18,2
    4a74:	a980004c 	andi	r6,r21,1
    4a78:	1009883a 	mov	r4,r2
    4a7c:	a82bd07a 	srai	r21,r21,1
    4a80:	180b883a 	mov	r5,r3
    4a84:	30000426 	beq	r6,zero,4a98 <_dtoa_r+0x126c>
    4a88:	b1800017 	ldw	r6,0(r22)
    4a8c:	b1c00117 	ldw	r7,4(r22)
    4a90:	94800044 	addi	r18,r18,1
    4a94:	0009ddc0 	call	9ddc <__muldf3>
    4a98:	b5800204 	addi	r22,r22,8
    4a9c:	a83ff51e 	bne	r21,zero,4a74 <_dtoa_r+0x1248>
    4aa0:	1027883a 	mov	r19,r2
    4aa4:	1829883a 	mov	r20,r3
    4aa8:	003c7306 	br	3c78 <_dtoa_r+0x44c>
    4aac:	21000044 	addi	r4,r4,1
    4ab0:	11000005 	stb	r4,0(r2)
    4ab4:	003e5c06 	br	4428 <_dtoa_r+0xbfc>
    4ab8:	a9400117 	ldw	r5,4(r21)
    4abc:	8009883a 	mov	r4,r16
    4ac0:	0006c440 	call	6c44 <_Balloc>
    4ac4:	a9800417 	ldw	r6,16(r21)
    4ac8:	11000304 	addi	r4,r2,12
    4acc:	a9400304 	addi	r5,r21,12
    4ad0:	31800084 	addi	r6,r6,2
    4ad4:	318d883a 	add	r6,r6,r6
    4ad8:	318d883a 	add	r6,r6,r6
    4adc:	1023883a 	mov	r17,r2
    4ae0:	000689c0 	call	689c <memcpy>
    4ae4:	8009883a 	mov	r4,r16
    4ae8:	880b883a 	mov	r5,r17
    4aec:	01800044 	movi	r6,1
    4af0:	00074340 	call	7434 <__lshift>
    4af4:	1027883a 	mov	r19,r2
    4af8:	003e8f06 	br	4538 <_dtoa_r+0xd0c>
    4afc:	b807883a 	mov	r3,r23
    4b00:	00800e44 	movi	r2,57
    4b04:	ddc00717 	ldw	r23,28(sp)
    4b08:	18809026 	beq	r3,r2,4d4c <_dtoa_r+0x1520>
    4b0c:	18c00044 	addi	r3,r3,1
    4b10:	003f2b06 	br	47c0 <_dtoa_r+0xf94>
    4b14:	b807883a 	mov	r3,r23
    4b18:	982b883a 	mov	r21,r19
    4b1c:	ddc00717 	ldw	r23,28(sp)
    4b20:	003e2406 	br	43b4 <_dtoa_r+0xb88>
    4b24:	0029883a 	mov	r20,zero
    4b28:	002b883a 	mov	r21,zero
    4b2c:	003f7206 	br	48f8 <_dtoa_r+0x10cc>
    4b30:	593fffc4 	addi	r4,r11,-1
    4b34:	200490fa 	slli	r2,r4,3
    4b38:	00c00074 	movhi	r3,1
    4b3c:	18f6bf04 	addi	r3,r3,-9476
    4b40:	d9001015 	stw	r4,64(sp)
    4b44:	1885883a 	add	r2,r3,r2
    4b48:	11000017 	ldw	r4,0(r2)
    4b4c:	11400117 	ldw	r5,4(r2)
    4b50:	900d883a 	mov	r6,r18
    4b54:	a80f883a 	mov	r7,r21
    4b58:	dac01615 	stw	r11,88(sp)
    4b5c:	0009ddc0 	call	9ddc <__muldf3>
    4b60:	a00b883a 	mov	r5,r20
    4b64:	9809883a 	mov	r4,r19
    4b68:	d8c01215 	stw	r3,72(sp)
    4b6c:	d8801115 	stw	r2,68(sp)
    4b70:	000a5240 	call	a524 <__fixdfsi>
    4b74:	1009883a 	mov	r4,r2
    4b78:	1025883a 	mov	r18,r2
    4b7c:	000a4500 	call	a450 <__floatsidf>
    4b80:	9809883a 	mov	r4,r19
    4b84:	a00b883a 	mov	r5,r20
    4b88:	100d883a 	mov	r6,r2
    4b8c:	180f883a 	mov	r7,r3
    4b90:	94800c04 	addi	r18,r18,48
    4b94:	0009d7c0 	call	9d7c <__subdf3>
    4b98:	bc800005 	stb	r18,0(r23)
    4b9c:	dac01617 	ldw	r11,88(sp)
    4ba0:	102b883a 	mov	r21,r2
    4ba4:	00800044 	movi	r2,1
    4ba8:	bd800044 	addi	r22,r23,1
    4bac:	1815883a 	mov	r10,r3
    4bb0:	58802226 	beq	r11,r2,4c3c <_dtoa_r+0x1410>
    4bb4:	bad7883a 	add	r11,r23,r11
    4bb8:	dc001415 	stw	r16,80(sp)
    4bbc:	a805883a 	mov	r2,r21
    4bc0:	b027883a 	mov	r19,r22
    4bc4:	5821883a 	mov	r16,r11
    4bc8:	882b883a 	mov	r21,r17
    4bcc:	000d883a 	mov	r6,zero
    4bd0:	01d00934 	movhi	r7,16420
    4bd4:	1009883a 	mov	r4,r2
    4bd8:	180b883a 	mov	r5,r3
    4bdc:	0009ddc0 	call	9ddc <__muldf3>
    4be0:	180b883a 	mov	r5,r3
    4be4:	1009883a 	mov	r4,r2
    4be8:	1829883a 	mov	r20,r3
    4bec:	1023883a 	mov	r17,r2
    4bf0:	000a5240 	call	a524 <__fixdfsi>
    4bf4:	1009883a 	mov	r4,r2
    4bf8:	1025883a 	mov	r18,r2
    4bfc:	000a4500 	call	a450 <__floatsidf>
    4c00:	8809883a 	mov	r4,r17
    4c04:	a00b883a 	mov	r5,r20
    4c08:	100d883a 	mov	r6,r2
    4c0c:	180f883a 	mov	r7,r3
    4c10:	94800c04 	addi	r18,r18,48
    4c14:	0009d7c0 	call	9d7c <__subdf3>
    4c18:	9cc00044 	addi	r19,r19,1
    4c1c:	9cbfffc5 	stb	r18,-1(r19)
    4c20:	9c3fea1e 	bne	r19,r16,4bcc <_dtoa_r+0x13a0>
    4c24:	1815883a 	mov	r10,r3
    4c28:	d8c01017 	ldw	r3,64(sp)
    4c2c:	dc001417 	ldw	r16,80(sp)
    4c30:	a823883a 	mov	r17,r21
    4c34:	b0ed883a 	add	r22,r22,r3
    4c38:	102b883a 	mov	r21,r2
    4c3c:	d9001117 	ldw	r4,68(sp)
    4c40:	d9401217 	ldw	r5,72(sp)
    4c44:	000d883a 	mov	r6,zero
    4c48:	01cff834 	movhi	r7,16352
    4c4c:	da801515 	stw	r10,84(sp)
    4c50:	0009d280 	call	9d28 <__adddf3>
    4c54:	da801517 	ldw	r10,84(sp)
    4c58:	1009883a 	mov	r4,r2
    4c5c:	180b883a 	mov	r5,r3
    4c60:	500f883a 	mov	r7,r10
    4c64:	a80d883a 	mov	r6,r21
    4c68:	000a3f40 	call	a3f4 <__ltdf2>
    4c6c:	da801517 	ldw	r10,84(sp)
    4c70:	10003b0e 	bge	r2,zero,4d60 <_dtoa_r+0x1534>
    4c74:	d9c01317 	ldw	r7,76(sp)
    4c78:	b53fffc3 	ldbu	r20,-1(r22)
    4c7c:	d9c00615 	stw	r7,24(sp)
    4c80:	003d3106 	br	4148 <_dtoa_r+0x91c>
    4c84:	d8800817 	ldw	r2,32(sp)
    4c88:	11e5c83a 	sub	r18,r2,r7
    4c8c:	0005883a 	mov	r2,zero
    4c90:	003d5006 	br	41d4 <_dtoa_r+0x9a8>
    4c94:	05800044 	movi	r22,1
    4c98:	003dc406 	br	43ac <_dtoa_r+0xb80>
    4c9c:	a5000044 	addi	r20,r20,1
    4ca0:	15000005 	stb	r20,0(r2)
    4ca4:	003c8206 	br	3eb0 <_dtoa_r+0x684>
    4ca8:	d8800217 	ldw	r2,8(sp)
    4cac:	00c00d84 	movi	r3,54
    4cb0:	dcc00a17 	ldw	r19,40(sp)
    4cb4:	1885c83a 	sub	r2,r3,r2
    4cb8:	dc800817 	ldw	r18,32(sp)
    4cbc:	003d4506 	br	41d4 <_dtoa_r+0x9a8>
    4cc0:	dcc00317 	ldw	r19,12(sp)
    4cc4:	8829883a 	mov	r20,r17
    4cc8:	04800084 	movi	r18,2
    4ccc:	003bea06 	br	3c78 <_dtoa_r+0x44c>
    4cd0:	d9000917 	ldw	r4,36(sp)
    4cd4:	203f1126 	beq	r4,zero,491c <_dtoa_r+0x10f0>
    4cd8:	d9c00e17 	ldw	r7,56(sp)
    4cdc:	01fca20e 	bge	zero,r7,3f68 <_dtoa_r+0x73c>
    4ce0:	a00b883a 	mov	r5,r20
    4ce4:	9809883a 	mov	r4,r19
    4ce8:	000d883a 	mov	r6,zero
    4cec:	01d00934 	movhi	r7,16420
    4cf0:	0009ddc0 	call	9ddc <__muldf3>
    4cf4:	91000044 	addi	r4,r18,1
    4cf8:	1027883a 	mov	r19,r2
    4cfc:	1829883a 	mov	r20,r3
    4d00:	000a4500 	call	a450 <__floatsidf>
    4d04:	9809883a 	mov	r4,r19
    4d08:	a00b883a 	mov	r5,r20
    4d0c:	100d883a 	mov	r6,r2
    4d10:	180f883a 	mov	r7,r3
    4d14:	0009ddc0 	call	9ddc <__muldf3>
    4d18:	1009883a 	mov	r4,r2
    4d1c:	180b883a 	mov	r5,r3
    4d20:	000d883a 	mov	r6,zero
    4d24:	01d00734 	movhi	r7,16412
    4d28:	0009d280 	call	9d28 <__adddf3>
    4d2c:	1025883a 	mov	r18,r2
    4d30:	d8800617 	ldw	r2,24(sp)
    4d34:	057f3034 	movhi	r21,64704
    4d38:	1d6b883a 	add	r21,r3,r21
    4d3c:	10bfffc4 	addi	r2,r2,-1
    4d40:	d8801315 	stw	r2,76(sp)
    4d44:	dac00e17 	ldw	r11,56(sp)
    4d48:	003be706 	br	3ce8 <_dtoa_r+0x4bc>
    4d4c:	01000e44 	movi	r4,57
    4d50:	91000005 	stb	r4,0(r18)
    4d54:	95800044 	addi	r22,r18,1
    4d58:	982b883a 	mov	r21,r19
    4d5c:	003da106 	br	43e4 <_dtoa_r+0xbb8>
    4d60:	d9801117 	ldw	r6,68(sp)
    4d64:	d9c01217 	ldw	r7,72(sp)
    4d68:	0009883a 	mov	r4,zero
    4d6c:	014ff834 	movhi	r5,16352
    4d70:	da801515 	stw	r10,84(sp)
    4d74:	0009d7c0 	call	9d7c <__subdf3>
    4d78:	da801517 	ldw	r10,84(sp)
    4d7c:	1009883a 	mov	r4,r2
    4d80:	180b883a 	mov	r5,r3
    4d84:	a80d883a 	mov	r6,r21
    4d88:	500f883a 	mov	r7,r10
    4d8c:	000a32c0 	call	a32c <__gtdf2>
    4d90:	00bc750e 	bge	zero,r2,3f68 <_dtoa_r+0x73c>
    4d94:	01000c04 	movi	r4,48
    4d98:	00000106 	br	4da0 <_dtoa_r+0x1574>
    4d9c:	102d883a 	mov	r22,r2
    4da0:	b0bfffc4 	addi	r2,r22,-1
    4da4:	10c00007 	ldb	r3,0(r2)
    4da8:	193ffc26 	beq	r3,r4,4d9c <_dtoa_r+0x1570>
    4dac:	d8801317 	ldw	r2,76(sp)
    4db0:	d8800615 	stw	r2,24(sp)
    4db4:	003c3e06 	br	3eb0 <_dtoa_r+0x684>
    4db8:	d9001317 	ldw	r4,76(sp)
    4dbc:	df001117 	ldw	fp,68(sp)
    4dc0:	d9000615 	stw	r4,24(sp)
    4dc4:	003ce006 	br	4148 <_dtoa_r+0x91c>
    4dc8:	df001117 	ldw	fp,68(sp)
    4dcc:	dc401217 	ldw	r17,72(sp)
    4dd0:	003c6506 	br	3f68 <_dtoa_r+0x73c>
    4dd4:	103e7a1e 	bne	r2,zero,47c0 <_dtoa_r+0xf94>
    4dd8:	1880004c 	andi	r2,r3,1
    4ddc:	103e7826 	beq	r2,zero,47c0 <_dtoa_r+0xf94>
    4de0:	003e7406 	br	47b4 <_dtoa_r+0xf88>
    4de4:	8009883a 	mov	r4,r16
    4de8:	a80b883a 	mov	r5,r21
    4dec:	01800284 	movi	r6,10
    4df0:	000f883a 	mov	r7,zero
    4df4:	0006d140 	call	6d14 <__multadd>
    4df8:	d9000e17 	ldw	r4,56(sp)
    4dfc:	102b883a 	mov	r21,r2
    4e00:	d9000915 	stw	r4,36(sp)
    4e04:	003d5106 	br	434c <_dtoa_r+0xb20>
    4e08:	04800084 	movi	r18,2
    4e0c:	003b9a06 	br	3c78 <_dtoa_r+0x44c>
    4e10:	d8c01317 	ldw	r3,76(sp)
    4e14:	d8c00615 	stw	r3,24(sp)
    4e18:	003ccb06 	br	4148 <_dtoa_r+0x91c>
    4e1c:	d8c01317 	ldw	r3,76(sp)
    4e20:	d8c00615 	stw	r3,24(sp)
    4e24:	003c2206 	br	3eb0 <_dtoa_r+0x684>
    4e28:	20fd3826 	beq	r4,r3,430c <_dtoa_r+0xae0>
    4e2c:	00c00f04 	movi	r3,60
    4e30:	1885c83a 	sub	r2,r3,r2
    4e34:	003da906 	br	44dc <_dtoa_r+0xcb0>
    4e38:	000b883a 	mov	r5,zero
    4e3c:	003b5406 	br	3b90 <_dtoa_r+0x364>
    4e40:	04c00044 	movi	r19,1
    4e44:	003b3b06 	br	3b34 <_dtoa_r+0x308>

00004e48 <_fflush_r>:
    4e48:	defffb04 	addi	sp,sp,-20
    4e4c:	dcc00315 	stw	r19,12(sp)
    4e50:	dc400115 	stw	r17,4(sp)
    4e54:	dfc00415 	stw	ra,16(sp)
    4e58:	dc800215 	stw	r18,8(sp)
    4e5c:	dc000015 	stw	r16,0(sp)
    4e60:	2027883a 	mov	r19,r4
    4e64:	2823883a 	mov	r17,r5
    4e68:	20000226 	beq	r4,zero,4e74 <_fflush_r+0x2c>
    4e6c:	20800e17 	ldw	r2,56(r4)
    4e70:	10005726 	beq	r2,zero,4fd0 <_fflush_r+0x188>
    4e74:	8880030b 	ldhu	r2,12(r17)
    4e78:	10c0020c 	andi	r3,r2,8
    4e7c:	18ffffcc 	andi	r3,r3,65535
    4e80:	18e0001c 	xori	r3,r3,32768
    4e84:	18e00004 	addi	r3,r3,-32768
    4e88:	1800311e 	bne	r3,zero,4f50 <_fflush_r+0x108>
    4e8c:	89000117 	ldw	r4,4(r17)
    4e90:	10c20014 	ori	r3,r2,2048
    4e94:	88c0030d 	sth	r3,12(r17)
    4e98:	180b883a 	mov	r5,r3
    4e9c:	0100520e 	bge	zero,r4,4fe8 <_fflush_r+0x1a0>
    4ea0:	88c00a17 	ldw	r3,40(r17)
    4ea4:	18002226 	beq	r3,zero,4f30 <_fflush_r+0xe8>
    4ea8:	1084000c 	andi	r2,r2,4096
    4eac:	10bfffcc 	andi	r2,r2,65535
    4eb0:	10a0001c 	xori	r2,r2,32768
    4eb4:	10a00004 	addi	r2,r2,-32768
    4eb8:	10004e26 	beq	r2,zero,4ff4 <_fflush_r+0x1ac>
    4ebc:	8c001417 	ldw	r16,80(r17)
    4ec0:	2940010c 	andi	r5,r5,4
    4ec4:	297fffcc 	andi	r5,r5,65535
    4ec8:	2960001c 	xori	r5,r5,32768
    4ecc:	29600004 	addi	r5,r5,-32768
    4ed0:	28000626 	beq	r5,zero,4eec <_fflush_r+0xa4>
    4ed4:	89000117 	ldw	r4,4(r17)
    4ed8:	88800c17 	ldw	r2,48(r17)
    4edc:	8121c83a 	sub	r16,r16,r4
    4ee0:	10000226 	beq	r2,zero,4eec <_fflush_r+0xa4>
    4ee4:	88800f17 	ldw	r2,60(r17)
    4ee8:	80a1c83a 	sub	r16,r16,r2
    4eec:	89400717 	ldw	r5,28(r17)
    4ef0:	9809883a 	mov	r4,r19
    4ef4:	800d883a 	mov	r6,r16
    4ef8:	000f883a 	mov	r7,zero
    4efc:	183ee83a 	callr	r3
    4f00:	8080281e 	bne	r16,r2,4fa4 <_fflush_r+0x15c>
    4f04:	8880030b 	ldhu	r2,12(r17)
    4f08:	88c00417 	ldw	r3,16(r17)
    4f0c:	88000115 	stw	zero,4(r17)
    4f10:	113dffcc 	andi	r4,r2,63487
    4f14:	1084000c 	andi	r2,r2,4096
    4f18:	10bfffcc 	andi	r2,r2,65535
    4f1c:	10a0001c 	xori	r2,r2,32768
    4f20:	8900030d 	sth	r4,12(r17)
    4f24:	88c00015 	stw	r3,0(r17)
    4f28:	10a00004 	addi	r2,r2,-32768
    4f2c:	10002c1e 	bne	r2,zero,4fe0 <_fflush_r+0x198>
    4f30:	0005883a 	mov	r2,zero
    4f34:	dfc00417 	ldw	ra,16(sp)
    4f38:	dcc00317 	ldw	r19,12(sp)
    4f3c:	dc800217 	ldw	r18,8(sp)
    4f40:	dc400117 	ldw	r17,4(sp)
    4f44:	dc000017 	ldw	r16,0(sp)
    4f48:	dec00504 	addi	sp,sp,20
    4f4c:	f800283a 	ret
    4f50:	8c800417 	ldw	r18,16(r17)
    4f54:	903ff626 	beq	r18,zero,4f30 <_fflush_r+0xe8>
    4f58:	8c000017 	ldw	r16,0(r17)
    4f5c:	108000cc 	andi	r2,r2,3
    4f60:	8c800015 	stw	r18,0(r17)
    4f64:	84a1c83a 	sub	r16,r16,r18
    4f68:	10001b1e 	bne	r2,zero,4fd8 <_fflush_r+0x190>
    4f6c:	88800517 	ldw	r2,20(r17)
    4f70:	88800215 	stw	r2,8(r17)
    4f74:	04000316 	blt	zero,r16,4f84 <_fflush_r+0x13c>
    4f78:	003fed06 	br	4f30 <_fflush_r+0xe8>
    4f7c:	90a5883a 	add	r18,r18,r2
    4f80:	043feb0e 	bge	zero,r16,4f30 <_fflush_r+0xe8>
    4f84:	88800917 	ldw	r2,36(r17)
    4f88:	89400717 	ldw	r5,28(r17)
    4f8c:	800f883a 	mov	r7,r16
    4f90:	900d883a 	mov	r6,r18
    4f94:	9809883a 	mov	r4,r19
    4f98:	103ee83a 	callr	r2
    4f9c:	80a1c83a 	sub	r16,r16,r2
    4fa0:	00bff616 	blt	zero,r2,4f7c <_fflush_r+0x134>
    4fa4:	88c0030b 	ldhu	r3,12(r17)
    4fa8:	00bfffc4 	movi	r2,-1
    4fac:	18c01014 	ori	r3,r3,64
    4fb0:	88c0030d 	sth	r3,12(r17)
    4fb4:	dfc00417 	ldw	ra,16(sp)
    4fb8:	dcc00317 	ldw	r19,12(sp)
    4fbc:	dc800217 	ldw	r18,8(sp)
    4fc0:	dc400117 	ldw	r17,4(sp)
    4fc4:	dc000017 	ldw	r16,0(sp)
    4fc8:	dec00504 	addi	sp,sp,20
    4fcc:	f800283a 	ret
    4fd0:	00051040 	call	5104 <__sinit>
    4fd4:	003fa706 	br	4e74 <_fflush_r+0x2c>
    4fd8:	0005883a 	mov	r2,zero
    4fdc:	003fe406 	br	4f70 <_fflush_r+0x128>
    4fe0:	8c001415 	stw	r16,80(r17)
    4fe4:	003fd206 	br	4f30 <_fflush_r+0xe8>
    4fe8:	88c00f17 	ldw	r3,60(r17)
    4fec:	00ffac16 	blt	zero,r3,4ea0 <_fflush_r+0x58>
    4ff0:	003fcf06 	br	4f30 <_fflush_r+0xe8>
    4ff4:	89400717 	ldw	r5,28(r17)
    4ff8:	9809883a 	mov	r4,r19
    4ffc:	000d883a 	mov	r6,zero
    5000:	01c00044 	movi	r7,1
    5004:	183ee83a 	callr	r3
    5008:	1021883a 	mov	r16,r2
    500c:	00bfffc4 	movi	r2,-1
    5010:	80800326 	beq	r16,r2,5020 <_fflush_r+0x1d8>
    5014:	8940030b 	ldhu	r5,12(r17)
    5018:	88c00a17 	ldw	r3,40(r17)
    501c:	003fa806 	br	4ec0 <_fflush_r+0x78>
    5020:	98c00017 	ldw	r3,0(r19)
    5024:	00800744 	movi	r2,29
    5028:	18bfde1e 	bne	r3,r2,4fa4 <_fflush_r+0x15c>
    502c:	003fc006 	br	4f30 <_fflush_r+0xe8>

00005030 <fflush>:
    5030:	200b883a 	mov	r5,r4
    5034:	20000426 	beq	r4,zero,5048 <fflush+0x18>
    5038:	00800074 	movhi	r2,1
    503c:	10beb504 	addi	r2,r2,-1324
    5040:	11000017 	ldw	r4,0(r2)
    5044:	0004e481 	jmpi	4e48 <_fflush_r>
    5048:	00800074 	movhi	r2,1
    504c:	10beb404 	addi	r2,r2,-1328
    5050:	11000017 	ldw	r4,0(r2)
    5054:	01400034 	movhi	r5,0
    5058:	29539204 	addi	r5,r5,20040
    505c:	0005ce41 	jmpi	5ce4 <_fwalk_reent>

00005060 <__fp_lock>:
    5060:	0005883a 	mov	r2,zero
    5064:	f800283a 	ret

00005068 <__fp_unlock>:
    5068:	0005883a 	mov	r2,zero
    506c:	f800283a 	ret

00005070 <_cleanup_r>:
    5070:	01400074 	movhi	r5,1
    5074:	2962e904 	addi	r5,r5,-29788
    5078:	0005c3c1 	jmpi	5c3c <_fwalk>

0000507c <__sfmoreglue>:
    507c:	defffc04 	addi	sp,sp,-16
    5080:	dc800215 	stw	r18,8(sp)
    5084:	2825883a 	mov	r18,r5
    5088:	dc000015 	stw	r16,0(sp)
    508c:	01401704 	movi	r5,92
    5090:	2021883a 	mov	r16,r4
    5094:	9009883a 	mov	r4,r18
    5098:	dfc00315 	stw	ra,12(sp)
    509c:	dc400115 	stw	r17,4(sp)
    50a0:	000a8440 	call	a844 <__mulsi3>
    50a4:	8009883a 	mov	r4,r16
    50a8:	11400304 	addi	r5,r2,12
    50ac:	1023883a 	mov	r17,r2
    50b0:	00060200 	call	6020 <_malloc_r>
    50b4:	1021883a 	mov	r16,r2
    50b8:	10000726 	beq	r2,zero,50d8 <__sfmoreglue+0x5c>
    50bc:	11000304 	addi	r4,r2,12
    50c0:	10000015 	stw	zero,0(r2)
    50c4:	14800115 	stw	r18,4(r2)
    50c8:	11000215 	stw	r4,8(r2)
    50cc:	000b883a 	mov	r5,zero
    50d0:	880d883a 	mov	r6,r17
    50d4:	0006b680 	call	6b68 <memset>
    50d8:	8005883a 	mov	r2,r16
    50dc:	dfc00317 	ldw	ra,12(sp)
    50e0:	dc800217 	ldw	r18,8(sp)
    50e4:	dc400117 	ldw	r17,4(sp)
    50e8:	dc000017 	ldw	r16,0(sp)
    50ec:	dec00404 	addi	sp,sp,16
    50f0:	f800283a 	ret

000050f4 <_cleanup>:
    50f4:	00800074 	movhi	r2,1
    50f8:	10beb404 	addi	r2,r2,-1328
    50fc:	11000017 	ldw	r4,0(r2)
    5100:	00050701 	jmpi	5070 <_cleanup_r>

00005104 <__sinit>:
    5104:	20800e17 	ldw	r2,56(r4)
    5108:	1000401e 	bne	r2,zero,520c <__sinit+0x108>
    510c:	21400117 	ldw	r5,4(r4)
    5110:	01800034 	movhi	r6,0
    5114:	31941c04 	addi	r6,r6,20592
    5118:	20c00217 	ldw	r3,8(r4)
    511c:	21800f15 	stw	r6,60(r4)
    5120:	2080bb04 	addi	r2,r4,748
    5124:	02400044 	movi	r9,1
    5128:	018000c4 	movi	r6,3
    512c:	2180b915 	stw	r6,740(r4)
    5130:	2080ba15 	stw	r2,744(r4)
    5134:	22400e15 	stw	r9,56(r4)
    5138:	20800317 	ldw	r2,12(r4)
    513c:	2000b815 	stw	zero,736(r4)
    5140:	02000074 	movhi	r8,1
    5144:	42214104 	addi	r8,r8,-31484
    5148:	01c00074 	movhi	r7,1
    514c:	39e15604 	addi	r7,r7,-31400
    5150:	01800074 	movhi	r6,1
    5154:	31a17804 	addi	r6,r6,-31264
    5158:	01000074 	movhi	r4,1
    515c:	21218f04 	addi	r4,r4,-31172
    5160:	02800104 	movi	r10,4
    5164:	28000015 	stw	zero,0(r5)
    5168:	28000115 	stw	zero,4(r5)
    516c:	28000215 	stw	zero,8(r5)
    5170:	2a80030d 	sth	r10,12(r5)
    5174:	2800038d 	sth	zero,14(r5)
    5178:	28000415 	stw	zero,16(r5)
    517c:	28000515 	stw	zero,20(r5)
    5180:	28000615 	stw	zero,24(r5)
    5184:	29400715 	stw	r5,28(r5)
    5188:	2a000815 	stw	r8,32(r5)
    518c:	29c00915 	stw	r7,36(r5)
    5190:	29800a15 	stw	r6,40(r5)
    5194:	29000b15 	stw	r4,44(r5)
    5198:	01400284 	movi	r5,10
    519c:	18000015 	stw	zero,0(r3)
    51a0:	18000115 	stw	zero,4(r3)
    51a4:	18000215 	stw	zero,8(r3)
    51a8:	1940030d 	sth	r5,12(r3)
    51ac:	1a40038d 	sth	r9,14(r3)
    51b0:	18000415 	stw	zero,16(r3)
    51b4:	18000515 	stw	zero,20(r3)
    51b8:	18000615 	stw	zero,24(r3)
    51bc:	18c00715 	stw	r3,28(r3)
    51c0:	1a000815 	stw	r8,32(r3)
    51c4:	19c00915 	stw	r7,36(r3)
    51c8:	19800a15 	stw	r6,40(r3)
    51cc:	19000b15 	stw	r4,44(r3)
    51d0:	00c00484 	movi	r3,18
    51d4:	10c0030d 	sth	r3,12(r2)
    51d8:	00c00084 	movi	r3,2
    51dc:	10000015 	stw	zero,0(r2)
    51e0:	10000115 	stw	zero,4(r2)
    51e4:	10000215 	stw	zero,8(r2)
    51e8:	10c0038d 	sth	r3,14(r2)
    51ec:	10000415 	stw	zero,16(r2)
    51f0:	10000515 	stw	zero,20(r2)
    51f4:	10000615 	stw	zero,24(r2)
    51f8:	10800715 	stw	r2,28(r2)
    51fc:	12000815 	stw	r8,32(r2)
    5200:	11c00915 	stw	r7,36(r2)
    5204:	11800a15 	stw	r6,40(r2)
    5208:	11000b15 	stw	r4,44(r2)
    520c:	f800283a 	ret

00005210 <__sfp>:
    5210:	defffc04 	addi	sp,sp,-16
    5214:	00800074 	movhi	r2,1
    5218:	10beb404 	addi	r2,r2,-1328
    521c:	dc400115 	stw	r17,4(sp)
    5220:	14400017 	ldw	r17,0(r2)
    5224:	dc800215 	stw	r18,8(sp)
    5228:	dfc00315 	stw	ra,12(sp)
    522c:	88800e17 	ldw	r2,56(r17)
    5230:	dc000015 	stw	r16,0(sp)
    5234:	2025883a 	mov	r18,r4
    5238:	10002826 	beq	r2,zero,52dc <__sfp+0xcc>
    523c:	8c40b804 	addi	r17,r17,736
    5240:	043fffc4 	movi	r16,-1
    5244:	89400117 	ldw	r5,4(r17)
    5248:	88800217 	ldw	r2,8(r17)
    524c:	297fffc4 	addi	r5,r5,-1
    5250:	28000a16 	blt	r5,zero,527c <__sfp+0x6c>
    5254:	10c0030f 	ldh	r3,12(r2)
    5258:	18000c26 	beq	r3,zero,528c <__sfp+0x7c>
    525c:	10c01a04 	addi	r3,r2,104
    5260:	00000206 	br	526c <__sfp+0x5c>
    5264:	19bfe90f 	ldh	r6,-92(r3)
    5268:	30000826 	beq	r6,zero,528c <__sfp+0x7c>
    526c:	297fffc4 	addi	r5,r5,-1
    5270:	18bffd04 	addi	r2,r3,-12
    5274:	18c01704 	addi	r3,r3,92
    5278:	2c3ffa1e 	bne	r5,r16,5264 <__sfp+0x54>
    527c:	88800017 	ldw	r2,0(r17)
    5280:	10001926 	beq	r2,zero,52e8 <__sfp+0xd8>
    5284:	1023883a 	mov	r17,r2
    5288:	003fee06 	br	5244 <__sfp+0x34>
    528c:	00ffffc4 	movi	r3,-1
    5290:	10c0038d 	sth	r3,14(r2)
    5294:	00c00044 	movi	r3,1
    5298:	10c0030d 	sth	r3,12(r2)
    529c:	10000015 	stw	zero,0(r2)
    52a0:	10000215 	stw	zero,8(r2)
    52a4:	10000115 	stw	zero,4(r2)
    52a8:	10000415 	stw	zero,16(r2)
    52ac:	10000515 	stw	zero,20(r2)
    52b0:	10000615 	stw	zero,24(r2)
    52b4:	10000c15 	stw	zero,48(r2)
    52b8:	10000d15 	stw	zero,52(r2)
    52bc:	10001115 	stw	zero,68(r2)
    52c0:	10001215 	stw	zero,72(r2)
    52c4:	dfc00317 	ldw	ra,12(sp)
    52c8:	dc800217 	ldw	r18,8(sp)
    52cc:	dc400117 	ldw	r17,4(sp)
    52d0:	dc000017 	ldw	r16,0(sp)
    52d4:	dec00404 	addi	sp,sp,16
    52d8:	f800283a 	ret
    52dc:	8809883a 	mov	r4,r17
    52e0:	00051040 	call	5104 <__sinit>
    52e4:	003fd506 	br	523c <__sfp+0x2c>
    52e8:	9009883a 	mov	r4,r18
    52ec:	01400104 	movi	r5,4
    52f0:	000507c0 	call	507c <__sfmoreglue>
    52f4:	88800015 	stw	r2,0(r17)
    52f8:	103fe21e 	bne	r2,zero,5284 <__sfp+0x74>
    52fc:	00800304 	movi	r2,12
    5300:	90800015 	stw	r2,0(r18)
    5304:	0005883a 	mov	r2,zero
    5308:	003fee06 	br	52c4 <__sfp+0xb4>

0000530c <__sfp_lock_acquire>:
    530c:	f800283a 	ret

00005310 <__sfp_lock_release>:
    5310:	f800283a 	ret

00005314 <__sinit_lock_acquire>:
    5314:	f800283a 	ret

00005318 <__sinit_lock_release>:
    5318:	f800283a 	ret

0000531c <__fp_lock_all>:
    531c:	00800074 	movhi	r2,1
    5320:	10beb504 	addi	r2,r2,-1324
    5324:	11000017 	ldw	r4,0(r2)
    5328:	01400034 	movhi	r5,0
    532c:	29541804 	addi	r5,r5,20576
    5330:	0005c3c1 	jmpi	5c3c <_fwalk>

00005334 <__fp_unlock_all>:
    5334:	00800074 	movhi	r2,1
    5338:	10beb504 	addi	r2,r2,-1324
    533c:	11000017 	ldw	r4,0(r2)
    5340:	01400034 	movhi	r5,0
    5344:	29541a04 	addi	r5,r5,20584
    5348:	0005c3c1 	jmpi	5c3c <_fwalk>

0000534c <_malloc_trim_r>:
    534c:	defffb04 	addi	sp,sp,-20
    5350:	dcc00315 	stw	r19,12(sp)
    5354:	dc800215 	stw	r18,8(sp)
    5358:	dc400115 	stw	r17,4(sp)
    535c:	dc000015 	stw	r16,0(sp)
    5360:	2827883a 	mov	r19,r5
    5364:	dfc00415 	stw	ra,16(sp)
    5368:	04400074 	movhi	r17,1
    536c:	8c788a04 	addi	r17,r17,-7640
    5370:	2021883a 	mov	r16,r4
    5374:	000b46c0 	call	b46c <__malloc_lock>
    5378:	88800217 	ldw	r2,8(r17)
    537c:	14800117 	ldw	r18,4(r2)
    5380:	00bfff04 	movi	r2,-4
    5384:	90a4703a 	and	r18,r18,r2
    5388:	9083fbc4 	addi	r2,r18,4079
    538c:	14e7c83a 	sub	r19,r2,r19
    5390:	9826d33a 	srli	r19,r19,12
    5394:	0083ffc4 	movi	r2,4095
    5398:	9cffffc4 	addi	r19,r19,-1
    539c:	9826933a 	slli	r19,r19,12
    53a0:	14c0060e 	bge	r2,r19,53bc <_malloc_trim_r+0x70>
    53a4:	8009883a 	mov	r4,r16
    53a8:	000b883a 	mov	r5,zero
    53ac:	00084a00 	call	84a0 <_sbrk_r>
    53b0:	88c00217 	ldw	r3,8(r17)
    53b4:	1c87883a 	add	r3,r3,r18
    53b8:	10c00a26 	beq	r2,r3,53e4 <_malloc_trim_r+0x98>
    53bc:	8009883a 	mov	r4,r16
    53c0:	000b48c0 	call	b48c <__malloc_unlock>
    53c4:	0005883a 	mov	r2,zero
    53c8:	dfc00417 	ldw	ra,16(sp)
    53cc:	dcc00317 	ldw	r19,12(sp)
    53d0:	dc800217 	ldw	r18,8(sp)
    53d4:	dc400117 	ldw	r17,4(sp)
    53d8:	dc000017 	ldw	r16,0(sp)
    53dc:	dec00504 	addi	sp,sp,20
    53e0:	f800283a 	ret
    53e4:	8009883a 	mov	r4,r16
    53e8:	04cbc83a 	sub	r5,zero,r19
    53ec:	00084a00 	call	84a0 <_sbrk_r>
    53f0:	00ffffc4 	movi	r3,-1
    53f4:	10c01326 	beq	r2,r3,5444 <_malloc_trim_r+0xf8>
    53f8:	00800074 	movhi	r2,1
    53fc:	10861004 	addi	r2,r2,6208
    5400:	11000017 	ldw	r4,0(r2)
    5404:	88c00217 	ldw	r3,8(r17)
    5408:	94e5c83a 	sub	r18,r18,r19
    540c:	94800054 	ori	r18,r18,1
    5410:	24e7c83a 	sub	r19,r4,r19
    5414:	1c800115 	stw	r18,4(r3)
    5418:	8009883a 	mov	r4,r16
    541c:	14c00015 	stw	r19,0(r2)
    5420:	000b48c0 	call	b48c <__malloc_unlock>
    5424:	00800044 	movi	r2,1
    5428:	dfc00417 	ldw	ra,16(sp)
    542c:	dcc00317 	ldw	r19,12(sp)
    5430:	dc800217 	ldw	r18,8(sp)
    5434:	dc400117 	ldw	r17,4(sp)
    5438:	dc000017 	ldw	r16,0(sp)
    543c:	dec00504 	addi	sp,sp,20
    5440:	f800283a 	ret
    5444:	8009883a 	mov	r4,r16
    5448:	000b883a 	mov	r5,zero
    544c:	00084a00 	call	84a0 <_sbrk_r>
    5450:	88c00217 	ldw	r3,8(r17)
    5454:	014003c4 	movi	r5,15
    5458:	10c9c83a 	sub	r4,r2,r3
    545c:	293fd70e 	bge	r5,r4,53bc <_malloc_trim_r+0x70>
    5460:	01400074 	movhi	r5,1
    5464:	297eb704 	addi	r5,r5,-1316
    5468:	29400017 	ldw	r5,0(r5)
    546c:	21000054 	ori	r4,r4,1
    5470:	19000115 	stw	r4,4(r3)
    5474:	1145c83a 	sub	r2,r2,r5
    5478:	01400074 	movhi	r5,1
    547c:	29461004 	addi	r5,r5,6208
    5480:	28800015 	stw	r2,0(r5)
    5484:	003fcd06 	br	53bc <_malloc_trim_r+0x70>

00005488 <_free_r>:
    5488:	defffd04 	addi	sp,sp,-12
    548c:	dc400115 	stw	r17,4(sp)
    5490:	dc000015 	stw	r16,0(sp)
    5494:	dfc00215 	stw	ra,8(sp)
    5498:	2821883a 	mov	r16,r5
    549c:	2023883a 	mov	r17,r4
    54a0:	28004b26 	beq	r5,zero,55d0 <_free_r+0x148>
    54a4:	000b46c0 	call	b46c <__malloc_lock>
    54a8:	823fff17 	ldw	r8,-4(r16)
    54ac:	00bfff84 	movi	r2,-2
    54b0:	81bffe04 	addi	r6,r16,-8
    54b4:	4084703a 	and	r2,r8,r2
    54b8:	3087883a 	add	r3,r6,r2
    54bc:	01400074 	movhi	r5,1
    54c0:	29788a04 	addi	r5,r5,-7640
    54c4:	1a400117 	ldw	r9,4(r3)
    54c8:	29000217 	ldw	r4,8(r5)
    54cc:	01ffff04 	movi	r7,-4
    54d0:	49ce703a 	and	r7,r9,r7
    54d4:	20c06526 	beq	r4,r3,566c <_free_r+0x1e4>
    54d8:	19c00115 	stw	r7,4(r3)
    54dc:	4200004c 	andi	r8,r8,1
    54e0:	40003026 	beq	r8,zero,55a4 <_free_r+0x11c>
    54e4:	0009883a 	mov	r4,zero
    54e8:	19d1883a 	add	r8,r3,r7
    54ec:	42000117 	ldw	r8,4(r8)
    54f0:	4200004c 	andi	r8,r8,1
    54f4:	4000061e 	bne	r8,zero,5510 <_free_r+0x88>
    54f8:	11c5883a 	add	r2,r2,r7
    54fc:	19c00217 	ldw	r7,8(r3)
    5500:	20004e26 	beq	r4,zero,563c <_free_r+0x1b4>
    5504:	18c00317 	ldw	r3,12(r3)
    5508:	38c00315 	stw	r3,12(r7)
    550c:	19c00215 	stw	r7,8(r3)
    5510:	11c00054 	ori	r7,r2,1
    5514:	3087883a 	add	r3,r6,r2
    5518:	31c00115 	stw	r7,4(r6)
    551c:	18800015 	stw	r2,0(r3)
    5520:	20001a1e 	bne	r4,zero,558c <_free_r+0x104>
    5524:	00c07fc4 	movi	r3,511
    5528:	18802e2e 	bgeu	r3,r2,55e4 <_free_r+0x15c>
    552c:	1006d27a 	srli	r3,r2,9
    5530:	01000104 	movi	r4,4
    5534:	20c06636 	bltu	r4,r3,56d0 <_free_r+0x248>
    5538:	1008d1ba 	srli	r4,r2,6
    553c:	21000e04 	addi	r4,r4,56
    5540:	210f883a 	add	r7,r4,r4
    5544:	39cf883a 	add	r7,r7,r7
    5548:	39cf883a 	add	r7,r7,r7
    554c:	29cf883a 	add	r7,r5,r7
    5550:	38c00217 	ldw	r3,8(r7)
    5554:	01400074 	movhi	r5,1
    5558:	29788a04 	addi	r5,r5,-7640
    555c:	19c06126 	beq	r3,r7,56e4 <_free_r+0x25c>
    5560:	013fff04 	movi	r4,-4
    5564:	19400117 	ldw	r5,4(r3)
    5568:	290a703a 	and	r5,r5,r4
    556c:	1140022e 	bgeu	r2,r5,5578 <_free_r+0xf0>
    5570:	18c00217 	ldw	r3,8(r3)
    5574:	38fffb1e 	bne	r7,r3,5564 <_free_r+0xdc>
    5578:	18800317 	ldw	r2,12(r3)
    557c:	30800315 	stw	r2,12(r6)
    5580:	30c00215 	stw	r3,8(r6)
    5584:	11800215 	stw	r6,8(r2)
    5588:	19800315 	stw	r6,12(r3)
    558c:	8809883a 	mov	r4,r17
    5590:	dfc00217 	ldw	ra,8(sp)
    5594:	dc400117 	ldw	r17,4(sp)
    5598:	dc000017 	ldw	r16,0(sp)
    559c:	dec00304 	addi	sp,sp,12
    55a0:	000b48c1 	jmpi	b48c <__malloc_unlock>
    55a4:	813ffe17 	ldw	r4,-8(r16)
    55a8:	2a400204 	addi	r9,r5,8
    55ac:	310dc83a 	sub	r6,r6,r4
    55b0:	32000217 	ldw	r8,8(r6)
    55b4:	1105883a 	add	r2,r2,r4
    55b8:	42404326 	beq	r8,r9,56c8 <_free_r+0x240>
    55bc:	32400317 	ldw	r9,12(r6)
    55c0:	0009883a 	mov	r4,zero
    55c4:	42400315 	stw	r9,12(r8)
    55c8:	4a000215 	stw	r8,8(r9)
    55cc:	003fc606 	br	54e8 <_free_r+0x60>
    55d0:	dfc00217 	ldw	ra,8(sp)
    55d4:	dc400117 	ldw	r17,4(sp)
    55d8:	dc000017 	ldw	r16,0(sp)
    55dc:	dec00304 	addi	sp,sp,12
    55e0:	f800283a 	ret
    55e4:	1004d0fa 	srli	r2,r2,3
    55e8:	02000044 	movi	r8,1
    55ec:	29c00117 	ldw	r7,4(r5)
    55f0:	1087883a 	add	r3,r2,r2
    55f4:	18c7883a 	add	r3,r3,r3
    55f8:	1005d0ba 	srai	r2,r2,2
    55fc:	18c7883a 	add	r3,r3,r3
    5600:	28c7883a 	add	r3,r5,r3
    5604:	19000217 	ldw	r4,8(r3)
    5608:	4084983a 	sll	r2,r8,r2
    560c:	30c00315 	stw	r3,12(r6)
    5610:	31000215 	stw	r4,8(r6)
    5614:	11c4b03a 	or	r2,r2,r7
    5618:	21800315 	stw	r6,12(r4)
    561c:	8809883a 	mov	r4,r17
    5620:	28800115 	stw	r2,4(r5)
    5624:	19800215 	stw	r6,8(r3)
    5628:	dfc00217 	ldw	ra,8(sp)
    562c:	dc400117 	ldw	r17,4(sp)
    5630:	dc000017 	ldw	r16,0(sp)
    5634:	dec00304 	addi	sp,sp,12
    5638:	000b48c1 	jmpi	b48c <__malloc_unlock>
    563c:	02000074 	movhi	r8,1
    5640:	42388c04 	addi	r8,r8,-7632
    5644:	3a3faf1e 	bne	r7,r8,5504 <_free_r+0x7c>
    5648:	29800515 	stw	r6,20(r5)
    564c:	29800415 	stw	r6,16(r5)
    5650:	11000054 	ori	r4,r2,1
    5654:	3087883a 	add	r3,r6,r2
    5658:	31c00315 	stw	r7,12(r6)
    565c:	31c00215 	stw	r7,8(r6)
    5660:	31000115 	stw	r4,4(r6)
    5664:	18800015 	stw	r2,0(r3)
    5668:	003fc806 	br	558c <_free_r+0x104>
    566c:	4200004c 	andi	r8,r8,1
    5670:	3885883a 	add	r2,r7,r2
    5674:	4000071e 	bne	r8,zero,5694 <_free_r+0x20c>
    5678:	81fffe17 	ldw	r7,-8(r16)
    567c:	31cdc83a 	sub	r6,r6,r7
    5680:	30c00317 	ldw	r3,12(r6)
    5684:	31000217 	ldw	r4,8(r6)
    5688:	11c5883a 	add	r2,r2,r7
    568c:	20c00315 	stw	r3,12(r4)
    5690:	19000215 	stw	r4,8(r3)
    5694:	00c00074 	movhi	r3,1
    5698:	18feb804 	addi	r3,r3,-1312
    569c:	18c00017 	ldw	r3,0(r3)
    56a0:	11000054 	ori	r4,r2,1
    56a4:	31000115 	stw	r4,4(r6)
    56a8:	29800215 	stw	r6,8(r5)
    56ac:	10ffb736 	bltu	r2,r3,558c <_free_r+0x104>
    56b0:	00800074 	movhi	r2,1
    56b4:	10860804 	addi	r2,r2,6176
    56b8:	11400017 	ldw	r5,0(r2)
    56bc:	8809883a 	mov	r4,r17
    56c0:	000534c0 	call	534c <_malloc_trim_r>
    56c4:	003fb106 	br	558c <_free_r+0x104>
    56c8:	01000044 	movi	r4,1
    56cc:	003f8606 	br	54e8 <_free_r+0x60>
    56d0:	01000504 	movi	r4,20
    56d4:	20c00b36 	bltu	r4,r3,5704 <_free_r+0x27c>
    56d8:	190016c4 	addi	r4,r3,91
    56dc:	210f883a 	add	r7,r4,r4
    56e0:	003f9806 	br	5544 <_free_r+0xbc>
    56e4:	2009d0ba 	srai	r4,r4,2
    56e8:	00800044 	movi	r2,1
    56ec:	29c00117 	ldw	r7,4(r5)
    56f0:	1108983a 	sll	r4,r2,r4
    56f4:	1805883a 	mov	r2,r3
    56f8:	21c8b03a 	or	r4,r4,r7
    56fc:	29000115 	stw	r4,4(r5)
    5700:	003f9e06 	br	557c <_free_r+0xf4>
    5704:	01001504 	movi	r4,84
    5708:	20c00436 	bltu	r4,r3,571c <_free_r+0x294>
    570c:	1008d33a 	srli	r4,r2,12
    5710:	21001b84 	addi	r4,r4,110
    5714:	210f883a 	add	r7,r4,r4
    5718:	003f8a06 	br	5544 <_free_r+0xbc>
    571c:	01005504 	movi	r4,340
    5720:	20c00436 	bltu	r4,r3,5734 <_free_r+0x2ac>
    5724:	1008d3fa 	srli	r4,r2,15
    5728:	21001dc4 	addi	r4,r4,119
    572c:	210f883a 	add	r7,r4,r4
    5730:	003f8406 	br	5544 <_free_r+0xbc>
    5734:	01015504 	movi	r4,1364
    5738:	20c00436 	bltu	r4,r3,574c <_free_r+0x2c4>
    573c:	1008d4ba 	srli	r4,r2,18
    5740:	21001f04 	addi	r4,r4,124
    5744:	210f883a 	add	r7,r4,r4
    5748:	003f7e06 	br	5544 <_free_r+0xbc>
    574c:	01c03f04 	movi	r7,252
    5750:	01001f84 	movi	r4,126
    5754:	003f7b06 	br	5544 <_free_r+0xbc>

00005758 <__sfvwrite_r>:
    5758:	30800217 	ldw	r2,8(r6)
    575c:	defff504 	addi	sp,sp,-44
    5760:	dd400615 	stw	r21,24(sp)
    5764:	dd000515 	stw	r20,20(sp)
    5768:	dc000115 	stw	r16,4(sp)
    576c:	dfc00a15 	stw	ra,40(sp)
    5770:	df000915 	stw	fp,36(sp)
    5774:	ddc00815 	stw	r23,32(sp)
    5778:	dd800715 	stw	r22,28(sp)
    577c:	dcc00415 	stw	r19,16(sp)
    5780:	dc800315 	stw	r18,12(sp)
    5784:	dc400215 	stw	r17,8(sp)
    5788:	3029883a 	mov	r20,r6
    578c:	202b883a 	mov	r21,r4
    5790:	2821883a 	mov	r16,r5
    5794:	10002126 	beq	r2,zero,581c <__sfvwrite_r+0xc4>
    5798:	2880030b 	ldhu	r2,12(r5)
    579c:	10c0020c 	andi	r3,r2,8
    57a0:	18ffffcc 	andi	r3,r3,65535
    57a4:	18e0001c 	xori	r3,r3,32768
    57a8:	18e00004 	addi	r3,r3,-32768
    57ac:	18002826 	beq	r3,zero,5850 <__sfvwrite_r+0xf8>
    57b0:	28c00417 	ldw	r3,16(r5)
    57b4:	18002626 	beq	r3,zero,5850 <__sfvwrite_r+0xf8>
    57b8:	10c0008c 	andi	r3,r2,2
    57bc:	18ffffcc 	andi	r3,r3,65535
    57c0:	18e0001c 	xori	r3,r3,32768
    57c4:	18e00004 	addi	r3,r3,-32768
    57c8:	a4400017 	ldw	r17,0(r20)
    57cc:	18002b26 	beq	r3,zero,587c <__sfvwrite_r+0x124>
    57d0:	0027883a 	mov	r19,zero
    57d4:	0025883a 	mov	r18,zero
    57d8:	05810004 	movi	r22,1024
    57dc:	980d883a 	mov	r6,r19
    57e0:	a809883a 	mov	r4,r21
    57e4:	90004f26 	beq	r18,zero,5924 <__sfvwrite_r+0x1cc>
    57e8:	900f883a 	mov	r7,r18
    57ec:	81400717 	ldw	r5,28(r16)
    57f0:	b480012e 	bgeu	r22,r18,57f8 <__sfvwrite_r+0xa0>
    57f4:	01c10004 	movi	r7,1024
    57f8:	80800917 	ldw	r2,36(r16)
    57fc:	103ee83a 	callr	r2
    5800:	0080540e 	bge	zero,r2,5954 <__sfvwrite_r+0x1fc>
    5804:	a0c00217 	ldw	r3,8(r20)
    5808:	98a7883a 	add	r19,r19,r2
    580c:	90a5c83a 	sub	r18,r18,r2
    5810:	1885c83a 	sub	r2,r3,r2
    5814:	a0800215 	stw	r2,8(r20)
    5818:	103ff01e 	bne	r2,zero,57dc <__sfvwrite_r+0x84>
    581c:	0005883a 	mov	r2,zero
    5820:	dfc00a17 	ldw	ra,40(sp)
    5824:	df000917 	ldw	fp,36(sp)
    5828:	ddc00817 	ldw	r23,32(sp)
    582c:	dd800717 	ldw	r22,28(sp)
    5830:	dd400617 	ldw	r21,24(sp)
    5834:	dd000517 	ldw	r20,20(sp)
    5838:	dcc00417 	ldw	r19,16(sp)
    583c:	dc800317 	ldw	r18,12(sp)
    5840:	dc400217 	ldw	r17,8(sp)
    5844:	dc000117 	ldw	r16,4(sp)
    5848:	dec00b04 	addi	sp,sp,44
    584c:	f800283a 	ret
    5850:	a809883a 	mov	r4,r21
    5854:	800b883a 	mov	r5,r16
    5858:	000347c0 	call	347c <__swsetup_r>
    585c:	1000f01e 	bne	r2,zero,5c20 <__sfvwrite_r+0x4c8>
    5860:	8080030b 	ldhu	r2,12(r16)
    5864:	a4400017 	ldw	r17,0(r20)
    5868:	10c0008c 	andi	r3,r2,2
    586c:	18ffffcc 	andi	r3,r3,65535
    5870:	18e0001c 	xori	r3,r3,32768
    5874:	18e00004 	addi	r3,r3,-32768
    5878:	183fd51e 	bne	r3,zero,57d0 <__sfvwrite_r+0x78>
    587c:	10c0004c 	andi	r3,r2,1
    5880:	002d883a 	mov	r22,zero
    5884:	1800381e 	bne	r3,zero,5968 <__sfvwrite_r+0x210>
    5888:	0025883a 	mov	r18,zero
    588c:	90002126 	beq	r18,zero,5914 <__sfvwrite_r+0x1bc>
    5890:	10c0800c 	andi	r3,r2,512
    5894:	18ffffcc 	andi	r3,r3,65535
    5898:	18e0001c 	xori	r3,r3,32768
    589c:	18e00004 	addi	r3,r3,-32768
    58a0:	84c00217 	ldw	r19,8(r16)
    58a4:	18006b26 	beq	r3,zero,5a54 <__sfvwrite_r+0x2fc>
    58a8:	980f883a 	mov	r7,r19
    58ac:	94c08636 	bltu	r18,r19,5ac8 <__sfvwrite_r+0x370>
    58b0:	10c1200c 	andi	r3,r2,1152
    58b4:	18009f1e 	bne	r3,zero,5b34 <__sfvwrite_r+0x3dc>
    58b8:	81000017 	ldw	r4,0(r16)
    58bc:	982f883a 	mov	r23,r19
    58c0:	9039883a 	mov	fp,r18
    58c4:	9027883a 	mov	r19,r18
    58c8:	380d883a 	mov	r6,r7
    58cc:	b00b883a 	mov	r5,r22
    58d0:	d9c00015 	stw	r7,0(sp)
    58d4:	00069dc0 	call	69dc <memmove>
    58d8:	d9c00017 	ldw	r7,0(sp)
    58dc:	81000217 	ldw	r4,8(r16)
    58e0:	80800017 	ldw	r2,0(r16)
    58e4:	25efc83a 	sub	r23,r4,r23
    58e8:	11cf883a 	add	r7,r2,r7
    58ec:	85c00215 	stw	r23,8(r16)
    58f0:	81c00015 	stw	r7,0(r16)
    58f4:	a0800217 	ldw	r2,8(r20)
    58f8:	b72d883a 	add	r22,r22,fp
    58fc:	9725c83a 	sub	r18,r18,fp
    5900:	14e7c83a 	sub	r19,r2,r19
    5904:	a4c00215 	stw	r19,8(r20)
    5908:	983fc426 	beq	r19,zero,581c <__sfvwrite_r+0xc4>
    590c:	8080030b 	ldhu	r2,12(r16)
    5910:	903fdf1e 	bne	r18,zero,5890 <__sfvwrite_r+0x138>
    5914:	8d800017 	ldw	r22,0(r17)
    5918:	8c800117 	ldw	r18,4(r17)
    591c:	8c400204 	addi	r17,r17,8
    5920:	003fda06 	br	588c <__sfvwrite_r+0x134>
    5924:	8cc00017 	ldw	r19,0(r17)
    5928:	8c800117 	ldw	r18,4(r17)
    592c:	8c400204 	addi	r17,r17,8
    5930:	003faa06 	br	57dc <__sfvwrite_r+0x84>
    5934:	0007e400 	call	7e40 <_realloc_r>
    5938:	102f883a 	mov	r23,r2
    593c:	10009f1e 	bne	r2,zero,5bbc <__sfvwrite_r+0x464>
    5940:	81400417 	ldw	r5,16(r16)
    5944:	a809883a 	mov	r4,r21
    5948:	00054880 	call	5488 <_free_r>
    594c:	00800304 	movi	r2,12
    5950:	a8800015 	stw	r2,0(r21)
    5954:	80c0030b 	ldhu	r3,12(r16)
    5958:	00bfffc4 	movi	r2,-1
    595c:	18c01014 	ori	r3,r3,64
    5960:	80c0030d 	sth	r3,12(r16)
    5964:	003fae06 	br	5820 <__sfvwrite_r+0xc8>
    5968:	0007883a 	mov	r3,zero
    596c:	0039883a 	mov	fp,zero
    5970:	0025883a 	mov	r18,zero
    5974:	90001e26 	beq	r18,zero,59f0 <__sfvwrite_r+0x298>
    5978:	18006526 	beq	r3,zero,5b10 <__sfvwrite_r+0x3b8>
    597c:	b02f883a 	mov	r23,r22
    5980:	9580012e 	bgeu	r18,r22,5988 <__sfvwrite_r+0x230>
    5984:	902f883a 	mov	r23,r18
    5988:	81000017 	ldw	r4,0(r16)
    598c:	80800417 	ldw	r2,16(r16)
    5990:	84c00217 	ldw	r19,8(r16)
    5994:	81c00517 	ldw	r7,20(r16)
    5998:	1100022e 	bgeu	r2,r4,59a4 <__sfvwrite_r+0x24c>
    599c:	99e7883a 	add	r19,r19,r7
    59a0:	9dc01816 	blt	r19,r23,5a04 <__sfvwrite_r+0x2ac>
    59a4:	b9c03b16 	blt	r23,r7,5a94 <__sfvwrite_r+0x33c>
    59a8:	80800917 	ldw	r2,36(r16)
    59ac:	81400717 	ldw	r5,28(r16)
    59b0:	a809883a 	mov	r4,r21
    59b4:	d8c00015 	stw	r3,0(sp)
    59b8:	e00d883a 	mov	r6,fp
    59bc:	103ee83a 	callr	r2
    59c0:	1027883a 	mov	r19,r2
    59c4:	d8c00017 	ldw	r3,0(sp)
    59c8:	00bfe20e 	bge	zero,r2,5954 <__sfvwrite_r+0x1fc>
    59cc:	b4edc83a 	sub	r22,r22,r19
    59d0:	b0001a26 	beq	r22,zero,5a3c <__sfvwrite_r+0x2e4>
    59d4:	a0800217 	ldw	r2,8(r20)
    59d8:	e4f9883a 	add	fp,fp,r19
    59dc:	94e5c83a 	sub	r18,r18,r19
    59e0:	14e7c83a 	sub	r19,r2,r19
    59e4:	a4c00215 	stw	r19,8(r20)
    59e8:	983f8c26 	beq	r19,zero,581c <__sfvwrite_r+0xc4>
    59ec:	903fe21e 	bne	r18,zero,5978 <__sfvwrite_r+0x220>
    59f0:	8f000017 	ldw	fp,0(r17)
    59f4:	8c800117 	ldw	r18,4(r17)
    59f8:	0007883a 	mov	r3,zero
    59fc:	8c400204 	addi	r17,r17,8
    5a00:	003fdc06 	br	5974 <__sfvwrite_r+0x21c>
    5a04:	e00b883a 	mov	r5,fp
    5a08:	980d883a 	mov	r6,r19
    5a0c:	d8c00015 	stw	r3,0(sp)
    5a10:	00069dc0 	call	69dc <memmove>
    5a14:	80800017 	ldw	r2,0(r16)
    5a18:	a809883a 	mov	r4,r21
    5a1c:	800b883a 	mov	r5,r16
    5a20:	14c5883a 	add	r2,r2,r19
    5a24:	80800015 	stw	r2,0(r16)
    5a28:	0004e480 	call	4e48 <_fflush_r>
    5a2c:	d8c00017 	ldw	r3,0(sp)
    5a30:	103fc81e 	bne	r2,zero,5954 <__sfvwrite_r+0x1fc>
    5a34:	b4edc83a 	sub	r22,r22,r19
    5a38:	b03fe61e 	bne	r22,zero,59d4 <__sfvwrite_r+0x27c>
    5a3c:	a809883a 	mov	r4,r21
    5a40:	800b883a 	mov	r5,r16
    5a44:	0004e480 	call	4e48 <_fflush_r>
    5a48:	103fc21e 	bne	r2,zero,5954 <__sfvwrite_r+0x1fc>
    5a4c:	0007883a 	mov	r3,zero
    5a50:	003fe006 	br	59d4 <__sfvwrite_r+0x27c>
    5a54:	81000017 	ldw	r4,0(r16)
    5a58:	80800417 	ldw	r2,16(r16)
    5a5c:	1100022e 	bgeu	r2,r4,5a68 <__sfvwrite_r+0x310>
    5a60:	9839883a 	mov	fp,r19
    5a64:	9c806036 	bltu	r19,r18,5be8 <__sfvwrite_r+0x490>
    5a68:	81c00517 	ldw	r7,20(r16)
    5a6c:	91c01c36 	bltu	r18,r7,5ae0 <__sfvwrite_r+0x388>
    5a70:	80800917 	ldw	r2,36(r16)
    5a74:	81400717 	ldw	r5,28(r16)
    5a78:	a809883a 	mov	r4,r21
    5a7c:	b00d883a 	mov	r6,r22
    5a80:	103ee83a 	callr	r2
    5a84:	1027883a 	mov	r19,r2
    5a88:	00bfb20e 	bge	zero,r2,5954 <__sfvwrite_r+0x1fc>
    5a8c:	1039883a 	mov	fp,r2
    5a90:	003f9806 	br	58f4 <__sfvwrite_r+0x19c>
    5a94:	b80d883a 	mov	r6,r23
    5a98:	e00b883a 	mov	r5,fp
    5a9c:	d8c00015 	stw	r3,0(sp)
    5aa0:	00069dc0 	call	69dc <memmove>
    5aa4:	80800217 	ldw	r2,8(r16)
    5aa8:	81000017 	ldw	r4,0(r16)
    5aac:	b827883a 	mov	r19,r23
    5ab0:	15c5c83a 	sub	r2,r2,r23
    5ab4:	25ef883a 	add	r23,r4,r23
    5ab8:	80800215 	stw	r2,8(r16)
    5abc:	85c00015 	stw	r23,0(r16)
    5ac0:	d8c00017 	ldw	r3,0(sp)
    5ac4:	003fc106 	br	59cc <__sfvwrite_r+0x274>
    5ac8:	81000017 	ldw	r4,0(r16)
    5acc:	902f883a 	mov	r23,r18
    5ad0:	9039883a 	mov	fp,r18
    5ad4:	9027883a 	mov	r19,r18
    5ad8:	900f883a 	mov	r7,r18
    5adc:	003f7a06 	br	58c8 <__sfvwrite_r+0x170>
    5ae0:	b00b883a 	mov	r5,r22
    5ae4:	900d883a 	mov	r6,r18
    5ae8:	00069dc0 	call	69dc <memmove>
    5aec:	80c00217 	ldw	r3,8(r16)
    5af0:	80800017 	ldw	r2,0(r16)
    5af4:	9027883a 	mov	r19,r18
    5af8:	1c87c83a 	sub	r3,r3,r18
    5afc:	1485883a 	add	r2,r2,r18
    5b00:	80c00215 	stw	r3,8(r16)
    5b04:	80800015 	stw	r2,0(r16)
    5b08:	9039883a 	mov	fp,r18
    5b0c:	003f7906 	br	58f4 <__sfvwrite_r+0x19c>
    5b10:	e009883a 	mov	r4,fp
    5b14:	01400284 	movi	r5,10
    5b18:	900d883a 	mov	r6,r18
    5b1c:	00067a40 	call	67a4 <memchr>
    5b20:	10003c26 	beq	r2,zero,5c14 <__sfvwrite_r+0x4bc>
    5b24:	15800044 	addi	r22,r2,1
    5b28:	b72dc83a 	sub	r22,r22,fp
    5b2c:	00c00044 	movi	r3,1
    5b30:	003f9206 	br	597c <__sfvwrite_r+0x224>
    5b34:	81000517 	ldw	r4,20(r16)
    5b38:	81400417 	ldw	r5,16(r16)
    5b3c:	80c00017 	ldw	r3,0(r16)
    5b40:	210d883a 	add	r6,r4,r4
    5b44:	3109883a 	add	r4,r6,r4
    5b48:	2026d7fa 	srli	r19,r4,31
    5b4c:	1979c83a 	sub	fp,r3,r5
    5b50:	e1800044 	addi	r6,fp,1
    5b54:	9909883a 	add	r4,r19,r4
    5b58:	2027d07a 	srai	r19,r4,1
    5b5c:	3489883a 	add	r4,r6,r18
    5b60:	980d883a 	mov	r6,r19
    5b64:	9900022e 	bgeu	r19,r4,5b70 <__sfvwrite_r+0x418>
    5b68:	2027883a 	mov	r19,r4
    5b6c:	200d883a 	mov	r6,r4
    5b70:	1081000c 	andi	r2,r2,1024
    5b74:	10bfffcc 	andi	r2,r2,65535
    5b78:	10a0001c 	xori	r2,r2,32768
    5b7c:	10a00004 	addi	r2,r2,-32768
    5b80:	a809883a 	mov	r4,r21
    5b84:	103f6b26 	beq	r2,zero,5934 <__sfvwrite_r+0x1dc>
    5b88:	300b883a 	mov	r5,r6
    5b8c:	00060200 	call	6020 <_malloc_r>
    5b90:	102f883a 	mov	r23,r2
    5b94:	103f6d26 	beq	r2,zero,594c <__sfvwrite_r+0x1f4>
    5b98:	81400417 	ldw	r5,16(r16)
    5b9c:	1009883a 	mov	r4,r2
    5ba0:	e00d883a 	mov	r6,fp
    5ba4:	000689c0 	call	689c <memcpy>
    5ba8:	8080030b 	ldhu	r2,12(r16)
    5bac:	00fedfc4 	movi	r3,-1153
    5bb0:	10c4703a 	and	r2,r2,r3
    5bb4:	10802014 	ori	r2,r2,128
    5bb8:	8080030d 	sth	r2,12(r16)
    5bbc:	bf09883a 	add	r4,r23,fp
    5bc0:	9f07c83a 	sub	r3,r19,fp
    5bc4:	85c00415 	stw	r23,16(r16)
    5bc8:	84c00515 	stw	r19,20(r16)
    5bcc:	81000015 	stw	r4,0(r16)
    5bd0:	902f883a 	mov	r23,r18
    5bd4:	80c00215 	stw	r3,8(r16)
    5bd8:	9039883a 	mov	fp,r18
    5bdc:	9027883a 	mov	r19,r18
    5be0:	900f883a 	mov	r7,r18
    5be4:	003f3806 	br	58c8 <__sfvwrite_r+0x170>
    5be8:	b00b883a 	mov	r5,r22
    5bec:	980d883a 	mov	r6,r19
    5bf0:	00069dc0 	call	69dc <memmove>
    5bf4:	80800017 	ldw	r2,0(r16)
    5bf8:	a809883a 	mov	r4,r21
    5bfc:	800b883a 	mov	r5,r16
    5c00:	14c5883a 	add	r2,r2,r19
    5c04:	80800015 	stw	r2,0(r16)
    5c08:	0004e480 	call	4e48 <_fflush_r>
    5c0c:	103f3926 	beq	r2,zero,58f4 <__sfvwrite_r+0x19c>
    5c10:	003f5006 	br	5954 <__sfvwrite_r+0x1fc>
    5c14:	95800044 	addi	r22,r18,1
    5c18:	00c00044 	movi	r3,1
    5c1c:	003f5706 	br	597c <__sfvwrite_r+0x224>
    5c20:	80c0030b 	ldhu	r3,12(r16)
    5c24:	00bfffc4 	movi	r2,-1
    5c28:	18c01014 	ori	r3,r3,64
    5c2c:	80c0030d 	sth	r3,12(r16)
    5c30:	00c00244 	movi	r3,9
    5c34:	a8c00015 	stw	r3,0(r21)
    5c38:	003ef906 	br	5820 <__sfvwrite_r+0xc8>

00005c3c <_fwalk>:
    5c3c:	defff904 	addi	sp,sp,-28
    5c40:	dcc00315 	stw	r19,12(sp)
    5c44:	24c0b804 	addi	r19,r4,736
    5c48:	dd400515 	stw	r21,20(sp)
    5c4c:	dd000415 	stw	r20,16(sp)
    5c50:	dfc00615 	stw	ra,24(sp)
    5c54:	dc800215 	stw	r18,8(sp)
    5c58:	dc400115 	stw	r17,4(sp)
    5c5c:	dc000015 	stw	r16,0(sp)
    5c60:	282b883a 	mov	r21,r5
    5c64:	0029883a 	mov	r20,zero
    5c68:	000530c0 	call	530c <__sfp_lock_acquire>
    5c6c:	98001226 	beq	r19,zero,5cb8 <_fwalk+0x7c>
    5c70:	04bfffc4 	movi	r18,-1
    5c74:	9c400117 	ldw	r17,4(r19)
    5c78:	9c000217 	ldw	r16,8(r19)
    5c7c:	8c7fffc4 	addi	r17,r17,-1
    5c80:	88000b16 	blt	r17,zero,5cb0 <_fwalk+0x74>
    5c84:	84000304 	addi	r16,r16,12
    5c88:	80c0000f 	ldh	r3,0(r16)
    5c8c:	8c7fffc4 	addi	r17,r17,-1
    5c90:	813ffd04 	addi	r4,r16,-12
    5c94:	18000426 	beq	r3,zero,5ca8 <_fwalk+0x6c>
    5c98:	80c0008f 	ldh	r3,2(r16)
    5c9c:	1c800226 	beq	r3,r18,5ca8 <_fwalk+0x6c>
    5ca0:	a83ee83a 	callr	r21
    5ca4:	a0a8b03a 	or	r20,r20,r2
    5ca8:	84001704 	addi	r16,r16,92
    5cac:	8cbff61e 	bne	r17,r18,5c88 <_fwalk+0x4c>
    5cb0:	9cc00017 	ldw	r19,0(r19)
    5cb4:	983fef1e 	bne	r19,zero,5c74 <_fwalk+0x38>
    5cb8:	00053100 	call	5310 <__sfp_lock_release>
    5cbc:	a005883a 	mov	r2,r20
    5cc0:	dfc00617 	ldw	ra,24(sp)
    5cc4:	dd400517 	ldw	r21,20(sp)
    5cc8:	dd000417 	ldw	r20,16(sp)
    5ccc:	dcc00317 	ldw	r19,12(sp)
    5cd0:	dc800217 	ldw	r18,8(sp)
    5cd4:	dc400117 	ldw	r17,4(sp)
    5cd8:	dc000017 	ldw	r16,0(sp)
    5cdc:	dec00704 	addi	sp,sp,28
    5ce0:	f800283a 	ret

00005ce4 <_fwalk_reent>:
    5ce4:	defff804 	addi	sp,sp,-32
    5ce8:	dcc00315 	stw	r19,12(sp)
    5cec:	24c0b804 	addi	r19,r4,736
    5cf0:	dd800615 	stw	r22,24(sp)
    5cf4:	dd400515 	stw	r21,20(sp)
    5cf8:	dd000415 	stw	r20,16(sp)
    5cfc:	dfc00715 	stw	ra,28(sp)
    5d00:	dc800215 	stw	r18,8(sp)
    5d04:	dc400115 	stw	r17,4(sp)
    5d08:	dc000015 	stw	r16,0(sp)
    5d0c:	2029883a 	mov	r20,r4
    5d10:	282b883a 	mov	r21,r5
    5d14:	002d883a 	mov	r22,zero
    5d18:	000530c0 	call	530c <__sfp_lock_acquire>
    5d1c:	98001326 	beq	r19,zero,5d6c <_fwalk_reent+0x88>
    5d20:	04bfffc4 	movi	r18,-1
    5d24:	9c400117 	ldw	r17,4(r19)
    5d28:	9c000217 	ldw	r16,8(r19)
    5d2c:	8c7fffc4 	addi	r17,r17,-1
    5d30:	88000c16 	blt	r17,zero,5d64 <_fwalk_reent+0x80>
    5d34:	84000304 	addi	r16,r16,12
    5d38:	80c0000f 	ldh	r3,0(r16)
    5d3c:	8c7fffc4 	addi	r17,r17,-1
    5d40:	817ffd04 	addi	r5,r16,-12
    5d44:	18000526 	beq	r3,zero,5d5c <_fwalk_reent+0x78>
    5d48:	80c0008f 	ldh	r3,2(r16)
    5d4c:	a009883a 	mov	r4,r20
    5d50:	1c800226 	beq	r3,r18,5d5c <_fwalk_reent+0x78>
    5d54:	a83ee83a 	callr	r21
    5d58:	b0acb03a 	or	r22,r22,r2
    5d5c:	84001704 	addi	r16,r16,92
    5d60:	8cbff51e 	bne	r17,r18,5d38 <_fwalk_reent+0x54>
    5d64:	9cc00017 	ldw	r19,0(r19)
    5d68:	983fee1e 	bne	r19,zero,5d24 <_fwalk_reent+0x40>
    5d6c:	00053100 	call	5310 <__sfp_lock_release>
    5d70:	b005883a 	mov	r2,r22
    5d74:	dfc00717 	ldw	ra,28(sp)
    5d78:	dd800617 	ldw	r22,24(sp)
    5d7c:	dd400517 	ldw	r21,20(sp)
    5d80:	dd000417 	ldw	r20,16(sp)
    5d84:	dcc00317 	ldw	r19,12(sp)
    5d88:	dc800217 	ldw	r18,8(sp)
    5d8c:	dc400117 	ldw	r17,4(sp)
    5d90:	dc000017 	ldw	r16,0(sp)
    5d94:	dec00804 	addi	sp,sp,32
    5d98:	f800283a 	ret

00005d9c <_setlocale_r>:
    5d9c:	defffc04 	addi	sp,sp,-16
    5da0:	dc800215 	stw	r18,8(sp)
    5da4:	dc400115 	stw	r17,4(sp)
    5da8:	dc000015 	stw	r16,0(sp)
    5dac:	dfc00315 	stw	ra,12(sp)
    5db0:	3021883a 	mov	r16,r6
    5db4:	2023883a 	mov	r17,r4
    5db8:	2825883a 	mov	r18,r5
    5dbc:	30001626 	beq	r6,zero,5e18 <_setlocale_r+0x7c>
    5dc0:	3009883a 	mov	r4,r6
    5dc4:	01400074 	movhi	r5,1
    5dc8:	29769a04 	addi	r5,r5,-9624
    5dcc:	00086440 	call	8644 <strcmp>
    5dd0:	10000a1e 	bne	r2,zero,5dfc <_setlocale_r+0x60>
    5dd4:	8c800c15 	stw	r18,48(r17)
    5dd8:	8c000d15 	stw	r16,52(r17)
    5ddc:	00800074 	movhi	r2,1
    5de0:	10b69a04 	addi	r2,r2,-9624
    5de4:	dfc00317 	ldw	ra,12(sp)
    5de8:	dc800217 	ldw	r18,8(sp)
    5dec:	dc400117 	ldw	r17,4(sp)
    5df0:	dc000017 	ldw	r16,0(sp)
    5df4:	dec00404 	addi	sp,sp,16
    5df8:	f800283a 	ret
    5dfc:	8009883a 	mov	r4,r16
    5e00:	01400074 	movhi	r5,1
    5e04:	29768504 	addi	r5,r5,-9708
    5e08:	00086440 	call	8644 <strcmp>
    5e0c:	103ff126 	beq	r2,zero,5dd4 <_setlocale_r+0x38>
    5e10:	0005883a 	mov	r2,zero
    5e14:	003ff306 	br	5de4 <_setlocale_r+0x48>
    5e18:	00800074 	movhi	r2,1
    5e1c:	10b69a04 	addi	r2,r2,-9624
    5e20:	dfc00317 	ldw	ra,12(sp)
    5e24:	dc800217 	ldw	r18,8(sp)
    5e28:	dc400117 	ldw	r17,4(sp)
    5e2c:	dc000017 	ldw	r16,0(sp)
    5e30:	dec00404 	addi	sp,sp,16
    5e34:	f800283a 	ret

00005e38 <__locale_charset>:
    5e38:	00800074 	movhi	r2,1
    5e3c:	10b69b04 	addi	r2,r2,-9620
    5e40:	f800283a 	ret

00005e44 <_localeconv_r>:
    5e44:	00800074 	movhi	r2,1
    5e48:	10b69f04 	addi	r2,r2,-9604
    5e4c:	f800283a 	ret

00005e50 <setlocale>:
    5e50:	00c00074 	movhi	r3,1
    5e54:	18feb504 	addi	r3,r3,-1324
    5e58:	2005883a 	mov	r2,r4
    5e5c:	19000017 	ldw	r4,0(r3)
    5e60:	280d883a 	mov	r6,r5
    5e64:	100b883a 	mov	r5,r2
    5e68:	0005d9c1 	jmpi	5d9c <_setlocale_r>

00005e6c <localeconv>:
    5e6c:	00800074 	movhi	r2,1
    5e70:	10b69f04 	addi	r2,r2,-9604
    5e74:	f800283a 	ret

00005e78 <__smakebuf_r>:
    5e78:	2880030b 	ldhu	r2,12(r5)
    5e7c:	deffed04 	addi	sp,sp,-76
    5e80:	dc401015 	stw	r17,64(sp)
    5e84:	10c0008c 	andi	r3,r2,2
    5e88:	18ffffcc 	andi	r3,r3,65535
    5e8c:	18e0001c 	xori	r3,r3,32768
    5e90:	dc000f15 	stw	r16,60(sp)
    5e94:	dfc01215 	stw	ra,72(sp)
    5e98:	dc801115 	stw	r18,68(sp)
    5e9c:	18e00004 	addi	r3,r3,-32768
    5ea0:	2821883a 	mov	r16,r5
    5ea4:	2023883a 	mov	r17,r4
    5ea8:	1800381e 	bne	r3,zero,5f8c <__smakebuf_r+0x114>
    5eac:	2940038f 	ldh	r5,14(r5)
    5eb0:	28002d16 	blt	r5,zero,5f68 <__smakebuf_r+0xf0>
    5eb4:	d80d883a 	mov	r6,sp
    5eb8:	0008bb80 	call	8bb8 <_fstat_r>
    5ebc:	10002916 	blt	r2,zero,5f64 <__smakebuf_r+0xec>
    5ec0:	d8800117 	ldw	r2,4(sp)
    5ec4:	00e00014 	movui	r3,32768
    5ec8:	10bc000c 	andi	r2,r2,61440
    5ecc:	10c03c26 	beq	r2,r3,5fc0 <__smakebuf_r+0x148>
    5ed0:	80c0030b 	ldhu	r3,12(r16)
    5ed4:	18c20014 	ori	r3,r3,2048
    5ed8:	80c0030d 	sth	r3,12(r16)
    5edc:	00c80004 	movi	r3,8192
    5ee0:	10c00c1e 	bne	r2,r3,5f14 <__smakebuf_r+0x9c>
    5ee4:	8140038f 	ldh	r5,14(r16)
    5ee8:	8809883a 	mov	r4,r17
    5eec:	0008c200 	call	8c20 <_isatty_r>
    5ef0:	10000826 	beq	r2,zero,5f14 <__smakebuf_r+0x9c>
    5ef4:	80c0030b 	ldhu	r3,12(r16)
    5ef8:	808010c4 	addi	r2,r16,67
    5efc:	80800015 	stw	r2,0(r16)
    5f00:	18c00054 	ori	r3,r3,1
    5f04:	80800415 	stw	r2,16(r16)
    5f08:	00800044 	movi	r2,1
    5f0c:	80c0030d 	sth	r3,12(r16)
    5f10:	80800515 	stw	r2,20(r16)
    5f14:	04810004 	movi	r18,1024
    5f18:	8809883a 	mov	r4,r17
    5f1c:	900b883a 	mov	r5,r18
    5f20:	00060200 	call	6020 <_malloc_r>
    5f24:	10003026 	beq	r2,zero,5fe8 <__smakebuf_r+0x170>
    5f28:	80c0030b 	ldhu	r3,12(r16)
    5f2c:	01000034 	movhi	r4,0
    5f30:	21141c04 	addi	r4,r4,20592
    5f34:	89000f15 	stw	r4,60(r17)
    5f38:	18c02014 	ori	r3,r3,128
    5f3c:	80c0030d 	sth	r3,12(r16)
    5f40:	80800015 	stw	r2,0(r16)
    5f44:	80800415 	stw	r2,16(r16)
    5f48:	84800515 	stw	r18,20(r16)
    5f4c:	dfc01217 	ldw	ra,72(sp)
    5f50:	dc801117 	ldw	r18,68(sp)
    5f54:	dc401017 	ldw	r17,64(sp)
    5f58:	dc000f17 	ldw	r16,60(sp)
    5f5c:	dec01304 	addi	sp,sp,76
    5f60:	f800283a 	ret
    5f64:	8080030b 	ldhu	r2,12(r16)
    5f68:	10c0200c 	andi	r3,r2,128
    5f6c:	18ffffcc 	andi	r3,r3,65535
    5f70:	18e0001c 	xori	r3,r3,32768
    5f74:	18e00004 	addi	r3,r3,-32768
    5f78:	18000f1e 	bne	r3,zero,5fb8 <__smakebuf_r+0x140>
    5f7c:	04810004 	movi	r18,1024
    5f80:	10820014 	ori	r2,r2,2048
    5f84:	8080030d 	sth	r2,12(r16)
    5f88:	003fe306 	br	5f18 <__smakebuf_r+0xa0>
    5f8c:	288010c4 	addi	r2,r5,67
    5f90:	28800015 	stw	r2,0(r5)
    5f94:	28800415 	stw	r2,16(r5)
    5f98:	00800044 	movi	r2,1
    5f9c:	28800515 	stw	r2,20(r5)
    5fa0:	dfc01217 	ldw	ra,72(sp)
    5fa4:	dc801117 	ldw	r18,68(sp)
    5fa8:	dc401017 	ldw	r17,64(sp)
    5fac:	dc000f17 	ldw	r16,60(sp)
    5fb0:	dec01304 	addi	sp,sp,76
    5fb4:	f800283a 	ret
    5fb8:	04801004 	movi	r18,64
    5fbc:	003ff006 	br	5f80 <__smakebuf_r+0x108>
    5fc0:	81000a17 	ldw	r4,40(r16)
    5fc4:	00c00074 	movhi	r3,1
    5fc8:	18e17804 	addi	r3,r3,-31264
    5fcc:	20ffc01e 	bne	r4,r3,5ed0 <__smakebuf_r+0x58>
    5fd0:	8080030b 	ldhu	r2,12(r16)
    5fd4:	00c10004 	movi	r3,1024
    5fd8:	80c01315 	stw	r3,76(r16)
    5fdc:	10c4b03a 	or	r2,r2,r3
    5fe0:	8080030d 	sth	r2,12(r16)
    5fe4:	003fcb06 	br	5f14 <__smakebuf_r+0x9c>
    5fe8:	8080030b 	ldhu	r2,12(r16)
    5fec:	10c0800c 	andi	r3,r2,512
    5ff0:	18ffffcc 	andi	r3,r3,65535
    5ff4:	18e0001c 	xori	r3,r3,32768
    5ff8:	18e00004 	addi	r3,r3,-32768
    5ffc:	183fd31e 	bne	r3,zero,5f4c <__smakebuf_r+0xd4>
    6000:	10800094 	ori	r2,r2,2
    6004:	80c010c4 	addi	r3,r16,67
    6008:	8080030d 	sth	r2,12(r16)
    600c:	00800044 	movi	r2,1
    6010:	80c00015 	stw	r3,0(r16)
    6014:	80c00415 	stw	r3,16(r16)
    6018:	80800515 	stw	r2,20(r16)
    601c:	003fcb06 	br	5f4c <__smakebuf_r+0xd4>

00006020 <_malloc_r>:
    6020:	defff604 	addi	sp,sp,-40
    6024:	dc800215 	stw	r18,8(sp)
    6028:	dfc00915 	stw	ra,36(sp)
    602c:	df000815 	stw	fp,32(sp)
    6030:	ddc00715 	stw	r23,28(sp)
    6034:	dd800615 	stw	r22,24(sp)
    6038:	dd400515 	stw	r21,20(sp)
    603c:	dd000415 	stw	r20,16(sp)
    6040:	dcc00315 	stw	r19,12(sp)
    6044:	dc400115 	stw	r17,4(sp)
    6048:	dc000015 	stw	r16,0(sp)
    604c:	288002c4 	addi	r2,r5,11
    6050:	00c00584 	movi	r3,22
    6054:	2025883a 	mov	r18,r4
    6058:	18802b2e 	bgeu	r3,r2,6108 <_malloc_r+0xe8>
    605c:	047ffe04 	movi	r17,-8
    6060:	1462703a 	and	r17,r2,r17
    6064:	88002a16 	blt	r17,zero,6110 <_malloc_r+0xf0>
    6068:	89402936 	bltu	r17,r5,6110 <_malloc_r+0xf0>
    606c:	9009883a 	mov	r4,r18
    6070:	000b46c0 	call	b46c <__malloc_lock>
    6074:	00807dc4 	movi	r2,503
    6078:	14402936 	bltu	r2,r17,6120 <_malloc_r+0x100>
    607c:	8808d0fa 	srli	r4,r17,3
    6080:	04c00074 	movhi	r19,1
    6084:	9cf88a04 	addi	r19,r19,-7640
    6088:	2105883a 	add	r2,r4,r4
    608c:	1085883a 	add	r2,r2,r2
    6090:	1085883a 	add	r2,r2,r2
    6094:	9885883a 	add	r2,r19,r2
    6098:	14000317 	ldw	r16,12(r2)
    609c:	80815526 	beq	r16,r2,65f4 <_malloc_r+0x5d4>
    60a0:	81000117 	ldw	r4,4(r16)
    60a4:	00bfff04 	movi	r2,-4
    60a8:	80c00317 	ldw	r3,12(r16)
    60ac:	2084703a 	and	r2,r4,r2
    60b0:	8085883a 	add	r2,r16,r2
    60b4:	11800117 	ldw	r6,4(r2)
    60b8:	81400217 	ldw	r5,8(r16)
    60bc:	9009883a 	mov	r4,r18
    60c0:	31800054 	ori	r6,r6,1
    60c4:	11800115 	stw	r6,4(r2)
    60c8:	28c00315 	stw	r3,12(r5)
    60cc:	19400215 	stw	r5,8(r3)
    60d0:	000b48c0 	call	b48c <__malloc_unlock>
    60d4:	80800204 	addi	r2,r16,8
    60d8:	dfc00917 	ldw	ra,36(sp)
    60dc:	df000817 	ldw	fp,32(sp)
    60e0:	ddc00717 	ldw	r23,28(sp)
    60e4:	dd800617 	ldw	r22,24(sp)
    60e8:	dd400517 	ldw	r21,20(sp)
    60ec:	dd000417 	ldw	r20,16(sp)
    60f0:	dcc00317 	ldw	r19,12(sp)
    60f4:	dc800217 	ldw	r18,8(sp)
    60f8:	dc400117 	ldw	r17,4(sp)
    60fc:	dc000017 	ldw	r16,0(sp)
    6100:	dec00a04 	addi	sp,sp,40
    6104:	f800283a 	ret
    6108:	04400404 	movi	r17,16
    610c:	897fd72e 	bgeu	r17,r5,606c <_malloc_r+0x4c>
    6110:	00800304 	movi	r2,12
    6114:	90800015 	stw	r2,0(r18)
    6118:	0005883a 	mov	r2,zero
    611c:	003fee06 	br	60d8 <_malloc_r+0xb8>
    6120:	8808d27a 	srli	r4,r17,9
    6124:	20007126 	beq	r4,zero,62ec <_malloc_r+0x2cc>
    6128:	00800104 	movi	r2,4
    612c:	1100eb36 	bltu	r2,r4,64dc <_malloc_r+0x4bc>
    6130:	8808d1ba 	srli	r4,r17,6
    6134:	21000e04 	addi	r4,r4,56
    6138:	210b883a 	add	r5,r4,r4
    613c:	294b883a 	add	r5,r5,r5
    6140:	294b883a 	add	r5,r5,r5
    6144:	04c00074 	movhi	r19,1
    6148:	9cf88a04 	addi	r19,r19,-7640
    614c:	994b883a 	add	r5,r19,r5
    6150:	2c000317 	ldw	r16,12(r5)
    6154:	2c000e26 	beq	r5,r16,6190 <_malloc_r+0x170>
    6158:	80c00117 	ldw	r3,4(r16)
    615c:	01ffff04 	movi	r7,-4
    6160:	018003c4 	movi	r6,15
    6164:	19c6703a 	and	r3,r3,r7
    6168:	1c45c83a 	sub	r2,r3,r17
    616c:	30800716 	blt	r6,r2,618c <_malloc_r+0x16c>
    6170:	1000610e 	bge	r2,zero,62f8 <_malloc_r+0x2d8>
    6174:	84000317 	ldw	r16,12(r16)
    6178:	2c000526 	beq	r5,r16,6190 <_malloc_r+0x170>
    617c:	80c00117 	ldw	r3,4(r16)
    6180:	19c6703a 	and	r3,r3,r7
    6184:	1c45c83a 	sub	r2,r3,r17
    6188:	30bff90e 	bge	r6,r2,6170 <_malloc_r+0x150>
    618c:	213fffc4 	addi	r4,r4,-1
    6190:	21000044 	addi	r4,r4,1
    6194:	9c000417 	ldw	r16,16(r19)
    6198:	00c00074 	movhi	r3,1
    619c:	18f88a04 	addi	r3,r3,-7640
    61a0:	1a400204 	addi	r9,r3,8
    61a4:	8240ff26 	beq	r16,r9,65a4 <_malloc_r+0x584>
    61a8:	81400117 	ldw	r5,4(r16)
    61ac:	00bfff04 	movi	r2,-4
    61b0:	018003c4 	movi	r6,15
    61b4:	2884703a 	and	r2,r5,r2
    61b8:	144bc83a 	sub	r5,r2,r17
    61bc:	3140ea16 	blt	r6,r5,6568 <_malloc_r+0x548>
    61c0:	1a400515 	stw	r9,20(r3)
    61c4:	1a400415 	stw	r9,16(r3)
    61c8:	2800570e 	bge	r5,zero,6328 <_malloc_r+0x308>
    61cc:	01407fc4 	movi	r5,511
    61d0:	2880ca36 	bltu	r5,r2,64fc <_malloc_r+0x4dc>
    61d4:	1004d0fa 	srli	r2,r2,3
    61d8:	02000044 	movi	r8,1
    61dc:	19c00117 	ldw	r7,4(r3)
    61e0:	108b883a 	add	r5,r2,r2
    61e4:	294b883a 	add	r5,r5,r5
    61e8:	1005d0ba 	srai	r2,r2,2
    61ec:	294b883a 	add	r5,r5,r5
    61f0:	28cb883a 	add	r5,r5,r3
    61f4:	29800217 	ldw	r6,8(r5)
    61f8:	4084983a 	sll	r2,r8,r2
    61fc:	81400315 	stw	r5,12(r16)
    6200:	81800215 	stw	r6,8(r16)
    6204:	11c4b03a 	or	r2,r2,r7
    6208:	18800115 	stw	r2,4(r3)
    620c:	2c000215 	stw	r16,8(r5)
    6210:	34000315 	stw	r16,12(r6)
    6214:	200bd0ba 	srai	r5,r4,2
    6218:	00c00044 	movi	r3,1
    621c:	194a983a 	sll	r5,r3,r5
    6220:	11404936 	bltu	r2,r5,6348 <_malloc_r+0x328>
    6224:	1146703a 	and	r3,r2,r5
    6228:	18000a1e 	bne	r3,zero,6254 <_malloc_r+0x234>
    622c:	00ffff04 	movi	r3,-4
    6230:	294b883a 	add	r5,r5,r5
    6234:	20c8703a 	and	r4,r4,r3
    6238:	1146703a 	and	r3,r2,r5
    623c:	21000104 	addi	r4,r4,4
    6240:	1800041e 	bne	r3,zero,6254 <_malloc_r+0x234>
    6244:	294b883a 	add	r5,r5,r5
    6248:	1146703a 	and	r3,r2,r5
    624c:	21000104 	addi	r4,r4,4
    6250:	183ffc26 	beq	r3,zero,6244 <_malloc_r+0x224>
    6254:	023fff04 	movi	r8,-4
    6258:	01c003c4 	movi	r7,15
    625c:	2105883a 	add	r2,r4,r4
    6260:	1085883a 	add	r2,r2,r2
    6264:	1085883a 	add	r2,r2,r2
    6268:	9899883a 	add	r12,r19,r2
    626c:	62800304 	addi	r10,r12,12
    6270:	2017883a 	mov	r11,r4
    6274:	54000017 	ldw	r16,0(r10)
    6278:	51bffd04 	addi	r6,r10,-12
    627c:	8180041e 	bne	r16,r6,6290 <_malloc_r+0x270>
    6280:	0000ca06 	br	65ac <_malloc_r+0x58c>
    6284:	10001c0e 	bge	r2,zero,62f8 <_malloc_r+0x2d8>
    6288:	84000317 	ldw	r16,12(r16)
    628c:	8180c726 	beq	r16,r6,65ac <_malloc_r+0x58c>
    6290:	80c00117 	ldw	r3,4(r16)
    6294:	1a06703a 	and	r3,r3,r8
    6298:	1c45c83a 	sub	r2,r3,r17
    629c:	38bff90e 	bge	r7,r2,6284 <_malloc_r+0x264>
    62a0:	81000317 	ldw	r4,12(r16)
    62a4:	81400217 	ldw	r5,8(r16)
    62a8:	8447883a 	add	r3,r16,r17
    62ac:	8c400054 	ori	r17,r17,1
    62b0:	29000315 	stw	r4,12(r5)
    62b4:	21400215 	stw	r5,8(r4)
    62b8:	84400115 	stw	r17,4(r16)
    62bc:	1889883a 	add	r4,r3,r2
    62c0:	11400054 	ori	r5,r2,1
    62c4:	98c00515 	stw	r3,20(r19)
    62c8:	98c00415 	stw	r3,16(r19)
    62cc:	20800015 	stw	r2,0(r4)
    62d0:	1a400315 	stw	r9,12(r3)
    62d4:	1a400215 	stw	r9,8(r3)
    62d8:	19400115 	stw	r5,4(r3)
    62dc:	9009883a 	mov	r4,r18
    62e0:	000b48c0 	call	b48c <__malloc_unlock>
    62e4:	80800204 	addi	r2,r16,8
    62e8:	003f7b06 	br	60d8 <_malloc_r+0xb8>
    62ec:	8808d0fa 	srli	r4,r17,3
    62f0:	210b883a 	add	r5,r4,r4
    62f4:	003f9106 	br	613c <_malloc_r+0x11c>
    62f8:	80c7883a 	add	r3,r16,r3
    62fc:	19400117 	ldw	r5,4(r3)
    6300:	80800317 	ldw	r2,12(r16)
    6304:	81000217 	ldw	r4,8(r16)
    6308:	29400054 	ori	r5,r5,1
    630c:	19400115 	stw	r5,4(r3)
    6310:	20800315 	stw	r2,12(r4)
    6314:	11000215 	stw	r4,8(r2)
    6318:	9009883a 	mov	r4,r18
    631c:	000b48c0 	call	b48c <__malloc_unlock>
    6320:	80800204 	addi	r2,r16,8
    6324:	003f6c06 	br	60d8 <_malloc_r+0xb8>
    6328:	8085883a 	add	r2,r16,r2
    632c:	10c00117 	ldw	r3,4(r2)
    6330:	9009883a 	mov	r4,r18
    6334:	18c00054 	ori	r3,r3,1
    6338:	10c00115 	stw	r3,4(r2)
    633c:	000b48c0 	call	b48c <__malloc_unlock>
    6340:	80800204 	addi	r2,r16,8
    6344:	003f6406 	br	60d8 <_malloc_r+0xb8>
    6348:	9c000217 	ldw	r16,8(r19)
    634c:	00bfff04 	movi	r2,-4
    6350:	85400117 	ldw	r21,4(r16)
    6354:	a8aa703a 	and	r21,r21,r2
    6358:	ac400336 	bltu	r21,r17,6368 <_malloc_r+0x348>
    635c:	ac45c83a 	sub	r2,r21,r17
    6360:	00c003c4 	movi	r3,15
    6364:	18805316 	blt	r3,r2,64b4 <_malloc_r+0x494>
    6368:	d5e75517 	ldw	r23,-25260(gp)
    636c:	d0e00417 	ldw	r3,-32752(gp)
    6370:	00bfffc4 	movi	r2,-1
    6374:	8579883a 	add	fp,r16,r21
    6378:	8def883a 	add	r23,r17,r23
    637c:	1880d226 	beq	r3,r2,66c8 <_malloc_r+0x6a8>
    6380:	bdc403c4 	addi	r23,r23,4111
    6384:	00bc0004 	movi	r2,-4096
    6388:	b8ae703a 	and	r23,r23,r2
    638c:	9009883a 	mov	r4,r18
    6390:	b80b883a 	mov	r5,r23
    6394:	00084a00 	call	84a0 <_sbrk_r>
    6398:	1029883a 	mov	r20,r2
    639c:	00bfffc4 	movi	r2,-1
    63a0:	a080d126 	beq	r20,r2,66e8 <_malloc_r+0x6c8>
    63a4:	a7009f36 	bltu	r20,fp,6624 <_malloc_r+0x604>
    63a8:	05800074 	movhi	r22,1
    63ac:	b5861004 	addi	r22,r22,6208
    63b0:	b0800017 	ldw	r2,0(r22)
    63b4:	b885883a 	add	r2,r23,r2
    63b8:	b0800015 	stw	r2,0(r22)
    63bc:	e500cf26 	beq	fp,r20,66fc <_malloc_r+0x6dc>
    63c0:	d1200417 	ldw	r4,-32752(gp)
    63c4:	00ffffc4 	movi	r3,-1
    63c8:	20c0e026 	beq	r4,r3,674c <_malloc_r+0x72c>
    63cc:	a739c83a 	sub	fp,r20,fp
    63d0:	1705883a 	add	r2,r2,fp
    63d4:	b0800015 	stw	r2,0(r22)
    63d8:	a08001cc 	andi	r2,r20,7
    63dc:	1000a526 	beq	r2,zero,6674 <_malloc_r+0x654>
    63e0:	a0a9c83a 	sub	r20,r20,r2
    63e4:	00c40204 	movi	r3,4104
    63e8:	a5000204 	addi	r20,r20,8
    63ec:	1885c83a 	sub	r2,r3,r2
    63f0:	a5c7883a 	add	r3,r20,r23
    63f4:	18c3ffcc 	andi	r3,r3,4095
    63f8:	10efc83a 	sub	r23,r2,r3
    63fc:	9009883a 	mov	r4,r18
    6400:	b80b883a 	mov	r5,r23
    6404:	00084a00 	call	84a0 <_sbrk_r>
    6408:	00ffffc4 	movi	r3,-1
    640c:	10c0cc26 	beq	r2,r3,6740 <_malloc_r+0x720>
    6410:	1505c83a 	sub	r2,r2,r20
    6414:	b887883a 	add	r3,r23,r2
    6418:	18c00054 	ori	r3,r3,1
    641c:	b0800017 	ldw	r2,0(r22)
    6420:	9d000215 	stw	r20,8(r19)
    6424:	a0c00115 	stw	r3,4(r20)
    6428:	b885883a 	add	r2,r23,r2
    642c:	b0800015 	stw	r2,0(r22)
    6430:	84c00e26 	beq	r16,r19,646c <_malloc_r+0x44c>
    6434:	00c003c4 	movi	r3,15
    6438:	1d40902e 	bgeu	r3,r21,667c <_malloc_r+0x65c>
    643c:	ad7ffd04 	addi	r21,r21,-12
    6440:	013ffe04 	movi	r4,-8
    6444:	a908703a 	and	r4,r21,r4
    6448:	810b883a 	add	r5,r16,r4
    644c:	01800144 	movi	r6,5
    6450:	29800115 	stw	r6,4(r5)
    6454:	29800215 	stw	r6,8(r5)
    6458:	81400117 	ldw	r5,4(r16)
    645c:	2940004c 	andi	r5,r5,1
    6460:	214ab03a 	or	r5,r4,r5
    6464:	81400115 	stw	r5,4(r16)
    6468:	1900ae36 	bltu	r3,r4,6724 <_malloc_r+0x704>
    646c:	d0e75417 	ldw	r3,-25264(gp)
    6470:	1880012e 	bgeu	r3,r2,6478 <_malloc_r+0x458>
    6474:	d0a75415 	stw	r2,-25264(gp)
    6478:	d0e75317 	ldw	r3,-25268(gp)
    647c:	9c000217 	ldw	r16,8(r19)
    6480:	1880012e 	bgeu	r3,r2,6488 <_malloc_r+0x468>
    6484:	d0a75315 	stw	r2,-25268(gp)
    6488:	80c00117 	ldw	r3,4(r16)
    648c:	00bfff04 	movi	r2,-4
    6490:	1886703a 	and	r3,r3,r2
    6494:	1c45c83a 	sub	r2,r3,r17
    6498:	1c400236 	bltu	r3,r17,64a4 <_malloc_r+0x484>
    649c:	00c003c4 	movi	r3,15
    64a0:	18800416 	blt	r3,r2,64b4 <_malloc_r+0x494>
    64a4:	9009883a 	mov	r4,r18
    64a8:	000b48c0 	call	b48c <__malloc_unlock>
    64ac:	0005883a 	mov	r2,zero
    64b0:	003f0906 	br	60d8 <_malloc_r+0xb8>
    64b4:	88c00054 	ori	r3,r17,1
    64b8:	10800054 	ori	r2,r2,1
    64bc:	80c00115 	stw	r3,4(r16)
    64c0:	8463883a 	add	r17,r16,r17
    64c4:	88800115 	stw	r2,4(r17)
    64c8:	9009883a 	mov	r4,r18
    64cc:	9c400215 	stw	r17,8(r19)
    64d0:	000b48c0 	call	b48c <__malloc_unlock>
    64d4:	80800204 	addi	r2,r16,8
    64d8:	003eff06 	br	60d8 <_malloc_r+0xb8>
    64dc:	00800504 	movi	r2,20
    64e0:	1100492e 	bgeu	r2,r4,6608 <_malloc_r+0x5e8>
    64e4:	00801504 	movi	r2,84
    64e8:	11005c36 	bltu	r2,r4,665c <_malloc_r+0x63c>
    64ec:	8808d33a 	srli	r4,r17,12
    64f0:	21001b84 	addi	r4,r4,110
    64f4:	210b883a 	add	r5,r4,r4
    64f8:	003f1006 	br	613c <_malloc_r+0x11c>
    64fc:	1006d27a 	srli	r3,r2,9
    6500:	01400104 	movi	r5,4
    6504:	28c0432e 	bgeu	r5,r3,6614 <_malloc_r+0x5f4>
    6508:	01400504 	movi	r5,20
    650c:	28c07036 	bltu	r5,r3,66d0 <_malloc_r+0x6b0>
    6510:	194016c4 	addi	r5,r3,91
    6514:	294d883a 	add	r6,r5,r5
    6518:	318d883a 	add	r6,r6,r6
    651c:	318d883a 	add	r6,r6,r6
    6520:	998d883a 	add	r6,r19,r6
    6524:	30c00217 	ldw	r3,8(r6)
    6528:	01c00074 	movhi	r7,1
    652c:	39f88a04 	addi	r7,r7,-7640
    6530:	19805726 	beq	r3,r6,6690 <_malloc_r+0x670>
    6534:	01ffff04 	movi	r7,-4
    6538:	19400117 	ldw	r5,4(r3)
    653c:	29ca703a 	and	r5,r5,r7
    6540:	1140022e 	bgeu	r2,r5,654c <_malloc_r+0x52c>
    6544:	18c00217 	ldw	r3,8(r3)
    6548:	30fffb1e 	bne	r6,r3,6538 <_malloc_r+0x518>
    654c:	19400317 	ldw	r5,12(r3)
    6550:	98800117 	ldw	r2,4(r19)
    6554:	81400315 	stw	r5,12(r16)
    6558:	80c00215 	stw	r3,8(r16)
    655c:	2c000215 	stw	r16,8(r5)
    6560:	1c000315 	stw	r16,12(r3)
    6564:	003f2b06 	br	6214 <_malloc_r+0x1f4>
    6568:	8445883a 	add	r2,r16,r17
    656c:	8c400054 	ori	r17,r17,1
    6570:	18800515 	stw	r2,20(r3)
    6574:	18800415 	stw	r2,16(r3)
    6578:	29000054 	ori	r4,r5,1
    657c:	1147883a 	add	r3,r2,r5
    6580:	84400115 	stw	r17,4(r16)
    6584:	11000115 	stw	r4,4(r2)
    6588:	12400315 	stw	r9,12(r2)
    658c:	12400215 	stw	r9,8(r2)
    6590:	19400015 	stw	r5,0(r3)
    6594:	9009883a 	mov	r4,r18
    6598:	000b48c0 	call	b48c <__malloc_unlock>
    659c:	80800204 	addi	r2,r16,8
    65a0:	003ecd06 	br	60d8 <_malloc_r+0xb8>
    65a4:	18800117 	ldw	r2,4(r3)
    65a8:	003f1a06 	br	6214 <_malloc_r+0x1f4>
    65ac:	5ac00044 	addi	r11,r11,1
    65b0:	588000cc 	andi	r2,r11,3
    65b4:	52800204 	addi	r10,r10,8
    65b8:	103f2e1e 	bne	r2,zero,6274 <_malloc_r+0x254>
    65bc:	20c000cc 	andi	r3,r4,3
    65c0:	60bffe04 	addi	r2,r12,-8
    65c4:	18006f26 	beq	r3,zero,6784 <_malloc_r+0x764>
    65c8:	63000017 	ldw	r12,0(r12)
    65cc:	213fffc4 	addi	r4,r4,-1
    65d0:	60bffa26 	beq	r12,r2,65bc <_malloc_r+0x59c>
    65d4:	98800117 	ldw	r2,4(r19)
    65d8:	294b883a 	add	r5,r5,r5
    65dc:	117f5a36 	bltu	r2,r5,6348 <_malloc_r+0x328>
    65e0:	283f5926 	beq	r5,zero,6348 <_malloc_r+0x328>
    65e4:	1146703a 	and	r3,r2,r5
    65e8:	18001626 	beq	r3,zero,6644 <_malloc_r+0x624>
    65ec:	5809883a 	mov	r4,r11
    65f0:	003f1a06 	br	625c <_malloc_r+0x23c>
    65f4:	80800204 	addi	r2,r16,8
    65f8:	84000517 	ldw	r16,20(r16)
    65fc:	143ea81e 	bne	r2,r16,60a0 <_malloc_r+0x80>
    6600:	21000084 	addi	r4,r4,2
    6604:	003ee306 	br	6194 <_malloc_r+0x174>
    6608:	210016c4 	addi	r4,r4,91
    660c:	210b883a 	add	r5,r4,r4
    6610:	003eca06 	br	613c <_malloc_r+0x11c>
    6614:	100ad1ba 	srli	r5,r2,6
    6618:	29400e04 	addi	r5,r5,56
    661c:	294d883a 	add	r6,r5,r5
    6620:	003fbd06 	br	6518 <_malloc_r+0x4f8>
    6624:	84ff6026 	beq	r16,r19,63a8 <_malloc_r+0x388>
    6628:	00800074 	movhi	r2,1
    662c:	10b88a04 	addi	r2,r2,-7640
    6630:	14000217 	ldw	r16,8(r2)
    6634:	00bfff04 	movi	r2,-4
    6638:	80c00117 	ldw	r3,4(r16)
    663c:	1886703a 	and	r3,r3,r2
    6640:	003f9406 	br	6494 <_malloc_r+0x474>
    6644:	294b883a 	add	r5,r5,r5
    6648:	1146703a 	and	r3,r2,r5
    664c:	5ac00104 	addi	r11,r11,4
    6650:	183ffc26 	beq	r3,zero,6644 <_malloc_r+0x624>
    6654:	5809883a 	mov	r4,r11
    6658:	003f0006 	br	625c <_malloc_r+0x23c>
    665c:	00805504 	movi	r2,340
    6660:	11001336 	bltu	r2,r4,66b0 <_malloc_r+0x690>
    6664:	8808d3fa 	srli	r4,r17,15
    6668:	21001dc4 	addi	r4,r4,119
    666c:	210b883a 	add	r5,r4,r4
    6670:	003eb206 	br	613c <_malloc_r+0x11c>
    6674:	00840004 	movi	r2,4096
    6678:	003f5d06 	br	63f0 <_malloc_r+0x3d0>
    667c:	00800044 	movi	r2,1
    6680:	a0800115 	stw	r2,4(r20)
    6684:	a021883a 	mov	r16,r20
    6688:	0007883a 	mov	r3,zero
    668c:	003f8106 	br	6494 <_malloc_r+0x474>
    6690:	280bd0ba 	srai	r5,r5,2
    6694:	01800044 	movi	r6,1
    6698:	38800117 	ldw	r2,4(r7)
    669c:	314c983a 	sll	r6,r6,r5
    66a0:	180b883a 	mov	r5,r3
    66a4:	3084b03a 	or	r2,r6,r2
    66a8:	38800115 	stw	r2,4(r7)
    66ac:	003fa906 	br	6554 <_malloc_r+0x534>
    66b0:	00815504 	movi	r2,1364
    66b4:	11001836 	bltu	r2,r4,6718 <_malloc_r+0x6f8>
    66b8:	8808d4ba 	srli	r4,r17,18
    66bc:	21001f04 	addi	r4,r4,124
    66c0:	210b883a 	add	r5,r4,r4
    66c4:	003e9d06 	br	613c <_malloc_r+0x11c>
    66c8:	bdc00404 	addi	r23,r23,16
    66cc:	003f2f06 	br	638c <_malloc_r+0x36c>
    66d0:	01401504 	movi	r5,84
    66d4:	28c01f36 	bltu	r5,r3,6754 <_malloc_r+0x734>
    66d8:	100ad33a 	srli	r5,r2,12
    66dc:	29401b84 	addi	r5,r5,110
    66e0:	294d883a 	add	r6,r5,r5
    66e4:	003f8c06 	br	6518 <_malloc_r+0x4f8>
    66e8:	9c000217 	ldw	r16,8(r19)
    66ec:	00bfff04 	movi	r2,-4
    66f0:	80c00117 	ldw	r3,4(r16)
    66f4:	1886703a 	and	r3,r3,r2
    66f8:	003f6606 	br	6494 <_malloc_r+0x474>
    66fc:	e0c3ffcc 	andi	r3,fp,4095
    6700:	183f2f1e 	bne	r3,zero,63c0 <_malloc_r+0x3a0>
    6704:	98c00217 	ldw	r3,8(r19)
    6708:	bd49883a 	add	r4,r23,r21
    670c:	21000054 	ori	r4,r4,1
    6710:	19000115 	stw	r4,4(r3)
    6714:	003f5506 	br	646c <_malloc_r+0x44c>
    6718:	01403f04 	movi	r5,252
    671c:	01001f84 	movi	r4,126
    6720:	003e8606 	br	613c <_malloc_r+0x11c>
    6724:	9009883a 	mov	r4,r18
    6728:	81400204 	addi	r5,r16,8
    672c:	00054880 	call	5488 <_free_r>
    6730:	00800074 	movhi	r2,1
    6734:	10861004 	addi	r2,r2,6208
    6738:	10800017 	ldw	r2,0(r2)
    673c:	003f4b06 	br	646c <_malloc_r+0x44c>
    6740:	00c00044 	movi	r3,1
    6744:	002f883a 	mov	r23,zero
    6748:	003f3406 	br	641c <_malloc_r+0x3fc>
    674c:	d5200415 	stw	r20,-32752(gp)
    6750:	003f2106 	br	63d8 <_malloc_r+0x3b8>
    6754:	01405504 	movi	r5,340
    6758:	28c00436 	bltu	r5,r3,676c <_malloc_r+0x74c>
    675c:	100ad3fa 	srli	r5,r2,15
    6760:	29401dc4 	addi	r5,r5,119
    6764:	294d883a 	add	r6,r5,r5
    6768:	003f6b06 	br	6518 <_malloc_r+0x4f8>
    676c:	01415504 	movi	r5,1364
    6770:	28c00936 	bltu	r5,r3,6798 <_malloc_r+0x778>
    6774:	100ad4ba 	srli	r5,r2,18
    6778:	29401f04 	addi	r5,r5,124
    677c:	294d883a 	add	r6,r5,r5
    6780:	003f6506 	br	6518 <_malloc_r+0x4f8>
    6784:	98800117 	ldw	r2,4(r19)
    6788:	0146303a 	nor	r3,zero,r5
    678c:	1884703a 	and	r2,r3,r2
    6790:	98800115 	stw	r2,4(r19)
    6794:	003f9006 	br	65d8 <_malloc_r+0x5b8>
    6798:	01803f04 	movi	r6,252
    679c:	01401f84 	movi	r5,126
    67a0:	003f5d06 	br	6518 <_malloc_r+0x4f8>

000067a4 <memchr>:
    67a4:	008000c4 	movi	r2,3
    67a8:	29403fcc 	andi	r5,r5,255
    67ac:	1180282e 	bgeu	r2,r6,6850 <memchr+0xac>
    67b0:	2086703a 	and	r3,r4,r2
    67b4:	1800351e 	bne	r3,zero,688c <memchr+0xe8>
    67b8:	2816923a 	slli	r11,r5,8
    67bc:	2093883a 	add	r9,r4,r2
    67c0:	22000084 	addi	r8,r4,2
    67c4:	5957883a 	add	r11,r11,r5
    67c8:	5816923a 	slli	r11,r11,8
    67cc:	20c00044 	addi	r3,r4,1
    67d0:	037fbff4 	movhi	r13,65279
    67d4:	6b7fbfc4 	addi	r13,r13,-257
    67d8:	5957883a 	add	r11,r11,r5
    67dc:	5816923a 	slli	r11,r11,8
    67e0:	03202074 	movhi	r12,32897
    67e4:	63202004 	addi	r12,r12,-32640
    67e8:	101d883a 	mov	r14,r2
    67ec:	5957883a 	add	r11,r11,r5
    67f0:	21c00017 	ldw	r7,0(r4)
    67f4:	31bfff04 	addi	r6,r6,-4
    67f8:	1805883a 	mov	r2,r3
    67fc:	3acef03a 	xor	r7,r7,r11
    6800:	3b55883a 	add	r10,r7,r13
    6804:	01ce303a 	nor	r7,zero,r7
    6808:	51ce703a 	and	r7,r10,r7
    680c:	3b0e703a 	and	r7,r7,r12
    6810:	38000a26 	beq	r7,zero,683c <memchr+0x98>
    6814:	21c00003 	ldbu	r7,0(r4)
    6818:	39401e26 	beq	r7,r5,6894 <memchr+0xf0>
    681c:	19c00003 	ldbu	r7,0(r3)
    6820:	39401926 	beq	r7,r5,6888 <memchr+0xe4>
    6824:	41c00003 	ldbu	r7,0(r8)
    6828:	4005883a 	mov	r2,r8
    682c:	39401626 	beq	r7,r5,6888 <memchr+0xe4>
    6830:	49c00003 	ldbu	r7,0(r9)
    6834:	4805883a 	mov	r2,r9
    6838:	39401326 	beq	r7,r5,6888 <memchr+0xe4>
    683c:	21000104 	addi	r4,r4,4
    6840:	4a400104 	addi	r9,r9,4
    6844:	42000104 	addi	r8,r8,4
    6848:	18c00104 	addi	r3,r3,4
    684c:	71bfe836 	bltu	r14,r6,67f0 <memchr+0x4c>
    6850:	2005883a 	mov	r2,r4
    6854:	30000a26 	beq	r6,zero,6880 <memchr+0xdc>
    6858:	10c00003 	ldbu	r3,0(r2)
    685c:	19400a26 	beq	r3,r5,6888 <memchr+0xe4>
    6860:	10c00044 	addi	r3,r2,1
    6864:	118d883a 	add	r6,r2,r6
    6868:	00000306 	br	6878 <memchr+0xd4>
    686c:	11000003 	ldbu	r4,0(r2)
    6870:	18c00044 	addi	r3,r3,1
    6874:	21400426 	beq	r4,r5,6888 <memchr+0xe4>
    6878:	1805883a 	mov	r2,r3
    687c:	19bffb1e 	bne	r3,r6,686c <memchr+0xc8>
    6880:	0005883a 	mov	r2,zero
    6884:	f800283a 	ret
    6888:	f800283a 	ret
    688c:	2005883a 	mov	r2,r4
    6890:	003ff106 	br	6858 <memchr+0xb4>
    6894:	2005883a 	mov	r2,r4
    6898:	f800283a 	ret

0000689c <memcpy>:
    689c:	defffb04 	addi	sp,sp,-20
    68a0:	dc000015 	stw	r16,0(sp)
    68a4:	dfc00415 	stw	ra,16(sp)
    68a8:	dcc00315 	stw	r19,12(sp)
    68ac:	dc800215 	stw	r18,8(sp)
    68b0:	dc400115 	stw	r17,4(sp)
    68b4:	00c003c4 	movi	r3,15
    68b8:	2021883a 	mov	r16,r4
    68bc:	3005883a 	mov	r2,r6
    68c0:	1980032e 	bgeu	r3,r6,68d0 <memcpy+0x34>
    68c4:	2906b03a 	or	r3,r5,r4
    68c8:	18c000cc 	andi	r3,r3,3
    68cc:	18001026 	beq	r3,zero,6910 <memcpy+0x74>
    68d0:	8007883a 	mov	r3,r16
    68d4:	288f883a 	add	r7,r5,r2
    68d8:	10000526 	beq	r2,zero,68f0 <memcpy+0x54>
    68dc:	29800003 	ldbu	r6,0(r5)
    68e0:	18c00044 	addi	r3,r3,1
    68e4:	29400044 	addi	r5,r5,1
    68e8:	19bfffc5 	stb	r6,-1(r3)
    68ec:	29fffb1e 	bne	r5,r7,68dc <memcpy+0x40>
    68f0:	8005883a 	mov	r2,r16
    68f4:	dfc00417 	ldw	ra,16(sp)
    68f8:	dcc00317 	ldw	r19,12(sp)
    68fc:	dc800217 	ldw	r18,8(sp)
    6900:	dc400117 	ldw	r17,4(sp)
    6904:	dc000017 	ldw	r16,0(sp)
    6908:	dec00504 	addi	sp,sp,20
    690c:	f800283a 	ret
    6910:	32bffc04 	addi	r10,r6,-16
    6914:	5014d13a 	srli	r10,r10,4
    6918:	20800404 	addi	r2,r4,16
    691c:	2007883a 	mov	r3,r4
    6920:	5008913a 	slli	r4,r10,4
    6924:	280f883a 	mov	r7,r5
    6928:	1105883a 	add	r2,r2,r4
    692c:	3a000017 	ldw	r8,0(r7)
    6930:	18c00404 	addi	r3,r3,16
    6934:	39c00404 	addi	r7,r7,16
    6938:	1a3ffc15 	stw	r8,-16(r3)
    693c:	3a3ffd17 	ldw	r8,-12(r7)
    6940:	1a3ffd15 	stw	r8,-12(r3)
    6944:	3a3ffe17 	ldw	r8,-8(r7)
    6948:	1a3ffe15 	stw	r8,-8(r3)
    694c:	3a3fff17 	ldw	r8,-4(r7)
    6950:	1a3fff15 	stw	r8,-4(r3)
    6954:	18bff51e 	bne	r3,r2,692c <memcpy+0x90>
    6958:	52800044 	addi	r10,r10,1
    695c:	5014913a 	slli	r10,r10,4
    6960:	308003cc 	andi	r2,r6,15
    6964:	010000c4 	movi	r4,3
    6968:	8287883a 	add	r3,r16,r10
    696c:	2a95883a 	add	r10,r5,r10
    6970:	2080182e 	bgeu	r4,r2,69d4 <memcpy+0x138>
    6974:	147fff04 	addi	r17,r2,-4
    6978:	8808d0ba 	srli	r4,r17,2
    697c:	1a400104 	addi	r9,r3,4
    6980:	180d883a 	mov	r6,r3
    6984:	2105883a 	add	r2,r4,r4
    6988:	1085883a 	add	r2,r2,r2
    698c:	4893883a 	add	r9,r9,r2
    6990:	500f883a 	mov	r7,r10
    6994:	3a000017 	ldw	r8,0(r7)
    6998:	31800104 	addi	r6,r6,4
    699c:	39c00104 	addi	r7,r7,4
    69a0:	323fff15 	stw	r8,-4(r6)
    69a4:	327ffb1e 	bne	r6,r9,6994 <memcpy+0xf8>
    69a8:	20800044 	addi	r2,r4,1
    69ac:	1085883a 	add	r2,r2,r2
    69b0:	1085883a 	add	r2,r2,r2
    69b4:	017fff04 	movi	r5,-4
    69b8:	18a5883a 	add	r18,r3,r2
    69bc:	50a7883a 	add	r19,r10,r2
    69c0:	000a8440 	call	a844 <__mulsi3>
    69c4:	1445883a 	add	r2,r2,r17
    69c8:	980b883a 	mov	r5,r19
    69cc:	9007883a 	mov	r3,r18
    69d0:	003fc006 	br	68d4 <memcpy+0x38>
    69d4:	500b883a 	mov	r5,r10
    69d8:	003fbe06 	br	68d4 <memcpy+0x38>

000069dc <memmove>:
    69dc:	defffb04 	addi	sp,sp,-20
    69e0:	dc000015 	stw	r16,0(sp)
    69e4:	dfc00415 	stw	ra,16(sp)
    69e8:	dcc00315 	stw	r19,12(sp)
    69ec:	dc800215 	stw	r18,8(sp)
    69f0:	dc400115 	stw	r17,4(sp)
    69f4:	2021883a 	mov	r16,r4
    69f8:	300f883a 	mov	r7,r6
    69fc:	2900122e 	bgeu	r5,r4,6a48 <memmove+0x6c>
    6a00:	2987883a 	add	r3,r5,r6
    6a04:	20c0102e 	bgeu	r4,r3,6a48 <memmove+0x6c>
    6a08:	218b883a 	add	r5,r4,r6
    6a0c:	1989c83a 	sub	r4,r3,r6
    6a10:	30000526 	beq	r6,zero,6a28 <memmove+0x4c>
    6a14:	18ffffc4 	addi	r3,r3,-1
    6a18:	18800003 	ldbu	r2,0(r3)
    6a1c:	297fffc4 	addi	r5,r5,-1
    6a20:	28800005 	stb	r2,0(r5)
    6a24:	193ffb1e 	bne	r3,r4,6a14 <memmove+0x38>
    6a28:	8005883a 	mov	r2,r16
    6a2c:	dfc00417 	ldw	ra,16(sp)
    6a30:	dcc00317 	ldw	r19,12(sp)
    6a34:	dc800217 	ldw	r18,8(sp)
    6a38:	dc400117 	ldw	r17,4(sp)
    6a3c:	dc000017 	ldw	r16,0(sp)
    6a40:	dec00504 	addi	sp,sp,20
    6a44:	f800283a 	ret
    6a48:	008003c4 	movi	r2,15
    6a4c:	1180422e 	bgeu	r2,r6,6b58 <memmove+0x17c>
    6a50:	2c04b03a 	or	r2,r5,r16
    6a54:	108000cc 	andi	r2,r2,3
    6a58:	10003f1e 	bne	r2,zero,6b58 <memmove+0x17c>
    6a5c:	32bffc04 	addi	r10,r6,-16
    6a60:	5014d13a 	srli	r10,r10,4
    6a64:	81000404 	addi	r4,r16,16
    6a68:	8007883a 	mov	r3,r16
    6a6c:	5004913a 	slli	r2,r10,4
    6a70:	280f883a 	mov	r7,r5
    6a74:	2089883a 	add	r4,r4,r2
    6a78:	38800017 	ldw	r2,0(r7)
    6a7c:	18c00404 	addi	r3,r3,16
    6a80:	39c00404 	addi	r7,r7,16
    6a84:	18bffc15 	stw	r2,-16(r3)
    6a88:	38bffd17 	ldw	r2,-12(r7)
    6a8c:	18bffd15 	stw	r2,-12(r3)
    6a90:	38bffe17 	ldw	r2,-8(r7)
    6a94:	18bffe15 	stw	r2,-8(r3)
    6a98:	38bfff17 	ldw	r2,-4(r7)
    6a9c:	18bfff15 	stw	r2,-4(r3)
    6aa0:	193ff51e 	bne	r3,r4,6a78 <memmove+0x9c>
    6aa4:	52800044 	addi	r10,r10,1
    6aa8:	5014913a 	slli	r10,r10,4
    6aac:	31c003cc 	andi	r7,r6,15
    6ab0:	008000c4 	movi	r2,3
    6ab4:	8287883a 	add	r3,r16,r10
    6ab8:	2a95883a 	add	r10,r5,r10
    6abc:	11c0282e 	bgeu	r2,r7,6b60 <memmove+0x184>
    6ac0:	3c7fff04 	addi	r17,r7,-4
    6ac4:	8808d0ba 	srli	r4,r17,2
    6ac8:	1a400104 	addi	r9,r3,4
    6acc:	180d883a 	mov	r6,r3
    6ad0:	2105883a 	add	r2,r4,r4
    6ad4:	1085883a 	add	r2,r2,r2
    6ad8:	4893883a 	add	r9,r9,r2
    6adc:	5005883a 	mov	r2,r10
    6ae0:	12000017 	ldw	r8,0(r2)
    6ae4:	31800104 	addi	r6,r6,4
    6ae8:	10800104 	addi	r2,r2,4
    6aec:	323fff15 	stw	r8,-4(r6)
    6af0:	327ffb1e 	bne	r6,r9,6ae0 <memmove+0x104>
    6af4:	20800044 	addi	r2,r4,1
    6af8:	1085883a 	add	r2,r2,r2
    6afc:	1085883a 	add	r2,r2,r2
    6b00:	017fff04 	movi	r5,-4
    6b04:	18a5883a 	add	r18,r3,r2
    6b08:	50a7883a 	add	r19,r10,r2
    6b0c:	000a8440 	call	a844 <__mulsi3>
    6b10:	144f883a 	add	r7,r2,r17
    6b14:	980b883a 	mov	r5,r19
    6b18:	9007883a 	mov	r3,r18
    6b1c:	383fc226 	beq	r7,zero,6a28 <memmove+0x4c>
    6b20:	19cf883a 	add	r7,r3,r7
    6b24:	29800003 	ldbu	r6,0(r5)
    6b28:	18c00044 	addi	r3,r3,1
    6b2c:	29400044 	addi	r5,r5,1
    6b30:	19bfffc5 	stb	r6,-1(r3)
    6b34:	19fffb1e 	bne	r3,r7,6b24 <memmove+0x148>
    6b38:	8005883a 	mov	r2,r16
    6b3c:	dfc00417 	ldw	ra,16(sp)
    6b40:	dcc00317 	ldw	r19,12(sp)
    6b44:	dc800217 	ldw	r18,8(sp)
    6b48:	dc400117 	ldw	r17,4(sp)
    6b4c:	dc000017 	ldw	r16,0(sp)
    6b50:	dec00504 	addi	sp,sp,20
    6b54:	f800283a 	ret
    6b58:	8007883a 	mov	r3,r16
    6b5c:	003fef06 	br	6b1c <memmove+0x140>
    6b60:	500b883a 	mov	r5,r10
    6b64:	003fed06 	br	6b1c <memmove+0x140>

00006b68 <memset>:
    6b68:	00c000c4 	movi	r3,3
    6b6c:	2005883a 	mov	r2,r4
    6b70:	29403fcc 	andi	r5,r5,255
    6b74:	19802d2e 	bgeu	r3,r6,6c2c <memset+0xc4>
    6b78:	20c6703a 	and	r3,r4,r3
    6b7c:	18002e1e 	bne	r3,zero,6c38 <memset+0xd0>
    6b80:	2806923a 	slli	r3,r5,8
    6b84:	010003c4 	movi	r4,15
    6b88:	3011883a 	mov	r8,r6
    6b8c:	1946b03a 	or	r3,r3,r5
    6b90:	180e943a 	slli	r7,r3,16
    6b94:	38ceb03a 	or	r7,r7,r3
    6b98:	1007883a 	mov	r3,r2
    6b9c:	21800f2e 	bgeu	r4,r6,6bdc <memset+0x74>
    6ba0:	19c00015 	stw	r7,0(r3)
    6ba4:	19c00115 	stw	r7,4(r3)
    6ba8:	19c00215 	stw	r7,8(r3)
    6bac:	19c00315 	stw	r7,12(r3)
    6bb0:	423ffc04 	addi	r8,r8,-16
    6bb4:	18c00404 	addi	r3,r3,16
    6bb8:	223ff936 	bltu	r4,r8,6ba0 <memset+0x38>
    6bbc:	30fffc04 	addi	r3,r6,-16
    6bc0:	1806d13a 	srli	r3,r3,4
    6bc4:	318003cc 	andi	r6,r6,15
    6bc8:	010000c4 	movi	r4,3
    6bcc:	18c00044 	addi	r3,r3,1
    6bd0:	1806913a 	slli	r3,r3,4
    6bd4:	10c7883a 	add	r3,r2,r3
    6bd8:	21800e2e 	bgeu	r4,r6,6c14 <memset+0xac>
    6bdc:	1813883a 	mov	r9,r3
    6be0:	3011883a 	mov	r8,r6
    6be4:	010000c4 	movi	r4,3
    6be8:	49c00015 	stw	r7,0(r9)
    6bec:	423fff04 	addi	r8,r8,-4
    6bf0:	4a400104 	addi	r9,r9,4
    6bf4:	223ffc36 	bltu	r4,r8,6be8 <memset+0x80>
    6bf8:	313fff04 	addi	r4,r6,-4
    6bfc:	2008d0ba 	srli	r4,r4,2
    6c00:	318000cc 	andi	r6,r6,3
    6c04:	21000044 	addi	r4,r4,1
    6c08:	2109883a 	add	r4,r4,r4
    6c0c:	2109883a 	add	r4,r4,r4
    6c10:	1907883a 	add	r3,r3,r4
    6c14:	30000a26 	beq	r6,zero,6c40 <memset+0xd8>
    6c18:	198d883a 	add	r6,r3,r6
    6c1c:	19400005 	stb	r5,0(r3)
    6c20:	18c00044 	addi	r3,r3,1
    6c24:	19bffd1e 	bne	r3,r6,6c1c <memset+0xb4>
    6c28:	f800283a 	ret
    6c2c:	2007883a 	mov	r3,r4
    6c30:	303ff91e 	bne	r6,zero,6c18 <memset+0xb0>
    6c34:	00000206 	br	6c40 <memset+0xd8>
    6c38:	2007883a 	mov	r3,r4
    6c3c:	003ff606 	br	6c18 <memset+0xb0>
    6c40:	f800283a 	ret

00006c44 <_Balloc>:
    6c44:	20801317 	ldw	r2,76(r4)
    6c48:	defffc04 	addi	sp,sp,-16
    6c4c:	dc400115 	stw	r17,4(sp)
    6c50:	dc000015 	stw	r16,0(sp)
    6c54:	dfc00315 	stw	ra,12(sp)
    6c58:	dc800215 	stw	r18,8(sp)
    6c5c:	2023883a 	mov	r17,r4
    6c60:	2821883a 	mov	r16,r5
    6c64:	10000f26 	beq	r2,zero,6ca4 <_Balloc+0x60>
    6c68:	8407883a 	add	r3,r16,r16
    6c6c:	18c7883a 	add	r3,r3,r3
    6c70:	10c7883a 	add	r3,r2,r3
    6c74:	18800017 	ldw	r2,0(r3)
    6c78:	10001126 	beq	r2,zero,6cc0 <_Balloc+0x7c>
    6c7c:	11000017 	ldw	r4,0(r2)
    6c80:	19000015 	stw	r4,0(r3)
    6c84:	10000415 	stw	zero,16(r2)
    6c88:	10000315 	stw	zero,12(r2)
    6c8c:	dfc00317 	ldw	ra,12(sp)
    6c90:	dc800217 	ldw	r18,8(sp)
    6c94:	dc400117 	ldw	r17,4(sp)
    6c98:	dc000017 	ldw	r16,0(sp)
    6c9c:	dec00404 	addi	sp,sp,16
    6ca0:	f800283a 	ret
    6ca4:	01400104 	movi	r5,4
    6ca8:	01800404 	movi	r6,16
    6cac:	00089380 	call	8938 <_calloc_r>
    6cb0:	88801315 	stw	r2,76(r17)
    6cb4:	103fec1e 	bne	r2,zero,6c68 <_Balloc+0x24>
    6cb8:	0005883a 	mov	r2,zero
    6cbc:	003ff306 	br	6c8c <_Balloc+0x48>
    6cc0:	01400044 	movi	r5,1
    6cc4:	2c24983a 	sll	r18,r5,r16
    6cc8:	8809883a 	mov	r4,r17
    6ccc:	91800144 	addi	r6,r18,5
    6cd0:	318d883a 	add	r6,r6,r6
    6cd4:	318d883a 	add	r6,r6,r6
    6cd8:	00089380 	call	8938 <_calloc_r>
    6cdc:	103ff626 	beq	r2,zero,6cb8 <_Balloc+0x74>
    6ce0:	14000115 	stw	r16,4(r2)
    6ce4:	14800215 	stw	r18,8(r2)
    6ce8:	003fe606 	br	6c84 <_Balloc+0x40>

00006cec <_Bfree>:
    6cec:	28000826 	beq	r5,zero,6d10 <_Bfree+0x24>
    6cf0:	28c00117 	ldw	r3,4(r5)
    6cf4:	20801317 	ldw	r2,76(r4)
    6cf8:	18c7883a 	add	r3,r3,r3
    6cfc:	18c7883a 	add	r3,r3,r3
    6d00:	10c5883a 	add	r2,r2,r3
    6d04:	10c00017 	ldw	r3,0(r2)
    6d08:	28c00015 	stw	r3,0(r5)
    6d0c:	11400015 	stw	r5,0(r2)
    6d10:	f800283a 	ret

00006d14 <__multadd>:
    6d14:	defff604 	addi	sp,sp,-40
    6d18:	dd400515 	stw	r21,20(sp)
    6d1c:	2d400417 	ldw	r21,16(r5)
    6d20:	df000815 	stw	fp,32(sp)
    6d24:	ddc00715 	stw	r23,28(sp)
    6d28:	dd800615 	stw	r22,24(sp)
    6d2c:	dd000415 	stw	r20,16(sp)
    6d30:	dc400115 	stw	r17,4(sp)
    6d34:	dc000015 	stw	r16,0(sp)
    6d38:	dfc00915 	stw	ra,36(sp)
    6d3c:	dcc00315 	stw	r19,12(sp)
    6d40:	dc800215 	stw	r18,8(sp)
    6d44:	282d883a 	mov	r22,r5
    6d48:	202f883a 	mov	r23,r4
    6d4c:	3029883a 	mov	r20,r6
    6d50:	3839883a 	mov	fp,r7
    6d54:	2c000504 	addi	r16,r5,20
    6d58:	0023883a 	mov	r17,zero
    6d5c:	84c00017 	ldw	r19,0(r16)
    6d60:	a00b883a 	mov	r5,r20
    6d64:	8c400044 	addi	r17,r17,1
    6d68:	993fffcc 	andi	r4,r19,65535
    6d6c:	000a8440 	call	a844 <__mulsi3>
    6d70:	1725883a 	add	r18,r2,fp
    6d74:	9808d43a 	srli	r4,r19,16
    6d78:	9026d43a 	srli	r19,r18,16
    6d7c:	a00b883a 	mov	r5,r20
    6d80:	000a8440 	call	a844 <__mulsi3>
    6d84:	988f883a 	add	r7,r19,r2
    6d88:	3804943a 	slli	r2,r7,16
    6d8c:	94bfffcc 	andi	r18,r18,65535
    6d90:	3838d43a 	srli	fp,r7,16
    6d94:	14a5883a 	add	r18,r2,r18
    6d98:	84800015 	stw	r18,0(r16)
    6d9c:	84000104 	addi	r16,r16,4
    6da0:	8d7fee16 	blt	r17,r21,6d5c <__multadd+0x48>
    6da4:	e0000926 	beq	fp,zero,6dcc <__multadd+0xb8>
    6da8:	b0800217 	ldw	r2,8(r22)
    6dac:	a880140e 	bge	r21,r2,6e00 <__multadd+0xec>
    6db0:	a8800144 	addi	r2,r21,5
    6db4:	1085883a 	add	r2,r2,r2
    6db8:	1085883a 	add	r2,r2,r2
    6dbc:	b085883a 	add	r2,r22,r2
    6dc0:	ad400044 	addi	r21,r21,1
    6dc4:	17000015 	stw	fp,0(r2)
    6dc8:	b5400415 	stw	r21,16(r22)
    6dcc:	b005883a 	mov	r2,r22
    6dd0:	dfc00917 	ldw	ra,36(sp)
    6dd4:	df000817 	ldw	fp,32(sp)
    6dd8:	ddc00717 	ldw	r23,28(sp)
    6ddc:	dd800617 	ldw	r22,24(sp)
    6de0:	dd400517 	ldw	r21,20(sp)
    6de4:	dd000417 	ldw	r20,16(sp)
    6de8:	dcc00317 	ldw	r19,12(sp)
    6dec:	dc800217 	ldw	r18,8(sp)
    6df0:	dc400117 	ldw	r17,4(sp)
    6df4:	dc000017 	ldw	r16,0(sp)
    6df8:	dec00a04 	addi	sp,sp,40
    6dfc:	f800283a 	ret
    6e00:	b1400117 	ldw	r5,4(r22)
    6e04:	b809883a 	mov	r4,r23
    6e08:	29400044 	addi	r5,r5,1
    6e0c:	0006c440 	call	6c44 <_Balloc>
    6e10:	b1800417 	ldw	r6,16(r22)
    6e14:	b1400304 	addi	r5,r22,12
    6e18:	11000304 	addi	r4,r2,12
    6e1c:	31800084 	addi	r6,r6,2
    6e20:	318d883a 	add	r6,r6,r6
    6e24:	318d883a 	add	r6,r6,r6
    6e28:	1021883a 	mov	r16,r2
    6e2c:	000689c0 	call	689c <memcpy>
    6e30:	b0c00117 	ldw	r3,4(r22)
    6e34:	b8801317 	ldw	r2,76(r23)
    6e38:	18c7883a 	add	r3,r3,r3
    6e3c:	18c7883a 	add	r3,r3,r3
    6e40:	10c5883a 	add	r2,r2,r3
    6e44:	10c00017 	ldw	r3,0(r2)
    6e48:	b0c00015 	stw	r3,0(r22)
    6e4c:	15800015 	stw	r22,0(r2)
    6e50:	802d883a 	mov	r22,r16
    6e54:	003fd606 	br	6db0 <__multadd+0x9c>

00006e58 <__s2b>:
    6e58:	defff904 	addi	sp,sp,-28
    6e5c:	dd000415 	stw	r20,16(sp)
    6e60:	dc400115 	stw	r17,4(sp)
    6e64:	2829883a 	mov	r20,r5
    6e68:	2023883a 	mov	r17,r4
    6e6c:	01400244 	movi	r5,9
    6e70:	39000204 	addi	r4,r7,8
    6e74:	dcc00315 	stw	r19,12(sp)
    6e78:	dc800215 	stw	r18,8(sp)
    6e7c:	dfc00615 	stw	ra,24(sp)
    6e80:	dd400515 	stw	r21,20(sp)
    6e84:	dc000015 	stw	r16,0(sp)
    6e88:	3825883a 	mov	r18,r7
    6e8c:	3027883a 	mov	r19,r6
    6e90:	000a7880 	call	a788 <__divsi3>
    6e94:	00c00044 	movi	r3,1
    6e98:	000b883a 	mov	r5,zero
    6e9c:	1880030e 	bge	r3,r2,6eac <__s2b+0x54>
    6ea0:	18c7883a 	add	r3,r3,r3
    6ea4:	29400044 	addi	r5,r5,1
    6ea8:	18bffd16 	blt	r3,r2,6ea0 <__s2b+0x48>
    6eac:	8809883a 	mov	r4,r17
    6eb0:	0006c440 	call	6c44 <_Balloc>
    6eb4:	d8c00717 	ldw	r3,28(sp)
    6eb8:	10c00515 	stw	r3,20(r2)
    6ebc:	00c00044 	movi	r3,1
    6ec0:	10c00415 	stw	r3,16(r2)
    6ec4:	00c00244 	movi	r3,9
    6ec8:	1cc0210e 	bge	r3,r19,6f50 <__s2b+0xf8>
    6ecc:	a0eb883a 	add	r21,r20,r3
    6ed0:	a821883a 	mov	r16,r21
    6ed4:	a4e9883a 	add	r20,r20,r19
    6ed8:	81c00007 	ldb	r7,0(r16)
    6edc:	8809883a 	mov	r4,r17
    6ee0:	84000044 	addi	r16,r16,1
    6ee4:	100b883a 	mov	r5,r2
    6ee8:	01800284 	movi	r6,10
    6eec:	39fff404 	addi	r7,r7,-48
    6ef0:	0006d140 	call	6d14 <__multadd>
    6ef4:	853ff81e 	bne	r16,r20,6ed8 <__s2b+0x80>
    6ef8:	ace1883a 	add	r16,r21,r19
    6efc:	843ffe04 	addi	r16,r16,-8
    6f00:	9c800a0e 	bge	r19,r18,6f2c <__s2b+0xd4>
    6f04:	94e5c83a 	sub	r18,r18,r19
    6f08:	84a5883a 	add	r18,r16,r18
    6f0c:	81c00007 	ldb	r7,0(r16)
    6f10:	8809883a 	mov	r4,r17
    6f14:	84000044 	addi	r16,r16,1
    6f18:	100b883a 	mov	r5,r2
    6f1c:	01800284 	movi	r6,10
    6f20:	39fff404 	addi	r7,r7,-48
    6f24:	0006d140 	call	6d14 <__multadd>
    6f28:	84bff81e 	bne	r16,r18,6f0c <__s2b+0xb4>
    6f2c:	dfc00617 	ldw	ra,24(sp)
    6f30:	dd400517 	ldw	r21,20(sp)
    6f34:	dd000417 	ldw	r20,16(sp)
    6f38:	dcc00317 	ldw	r19,12(sp)
    6f3c:	dc800217 	ldw	r18,8(sp)
    6f40:	dc400117 	ldw	r17,4(sp)
    6f44:	dc000017 	ldw	r16,0(sp)
    6f48:	dec00704 	addi	sp,sp,28
    6f4c:	f800283a 	ret
    6f50:	a4000284 	addi	r16,r20,10
    6f54:	1827883a 	mov	r19,r3
    6f58:	003fe906 	br	6f00 <__s2b+0xa8>

00006f5c <__hi0bits>:
    6f5c:	20bfffec 	andhi	r2,r4,65535
    6f60:	1000141e 	bne	r2,zero,6fb4 <__hi0bits+0x58>
    6f64:	2008943a 	slli	r4,r4,16
    6f68:	00800404 	movi	r2,16
    6f6c:	20ffc02c 	andhi	r3,r4,65280
    6f70:	1800021e 	bne	r3,zero,6f7c <__hi0bits+0x20>
    6f74:	2008923a 	slli	r4,r4,8
    6f78:	10800204 	addi	r2,r2,8
    6f7c:	20fc002c 	andhi	r3,r4,61440
    6f80:	1800021e 	bne	r3,zero,6f8c <__hi0bits+0x30>
    6f84:	2008913a 	slli	r4,r4,4
    6f88:	10800104 	addi	r2,r2,4
    6f8c:	20f0002c 	andhi	r3,r4,49152
    6f90:	1800031e 	bne	r3,zero,6fa0 <__hi0bits+0x44>
    6f94:	2109883a 	add	r4,r4,r4
    6f98:	10800084 	addi	r2,r2,2
    6f9c:	2109883a 	add	r4,r4,r4
    6fa0:	20000316 	blt	r4,zero,6fb0 <__hi0bits+0x54>
    6fa4:	2110002c 	andhi	r4,r4,16384
    6fa8:	2000041e 	bne	r4,zero,6fbc <__hi0bits+0x60>
    6fac:	00800804 	movi	r2,32
    6fb0:	f800283a 	ret
    6fb4:	0005883a 	mov	r2,zero
    6fb8:	003fec06 	br	6f6c <__hi0bits+0x10>
    6fbc:	10800044 	addi	r2,r2,1
    6fc0:	f800283a 	ret

00006fc4 <__lo0bits>:
    6fc4:	20c00017 	ldw	r3,0(r4)
    6fc8:	188001cc 	andi	r2,r3,7
    6fcc:	10000826 	beq	r2,zero,6ff0 <__lo0bits+0x2c>
    6fd0:	1880004c 	andi	r2,r3,1
    6fd4:	1000211e 	bne	r2,zero,705c <__lo0bits+0x98>
    6fd8:	1880008c 	andi	r2,r3,2
    6fdc:	1000211e 	bne	r2,zero,7064 <__lo0bits+0xa0>
    6fe0:	1806d0ba 	srli	r3,r3,2
    6fe4:	00800084 	movi	r2,2
    6fe8:	20c00015 	stw	r3,0(r4)
    6fec:	f800283a 	ret
    6ff0:	18bfffcc 	andi	r2,r3,65535
    6ff4:	10001326 	beq	r2,zero,7044 <__lo0bits+0x80>
    6ff8:	0005883a 	mov	r2,zero
    6ffc:	19403fcc 	andi	r5,r3,255
    7000:	2800021e 	bne	r5,zero,700c <__lo0bits+0x48>
    7004:	1806d23a 	srli	r3,r3,8
    7008:	10800204 	addi	r2,r2,8
    700c:	194003cc 	andi	r5,r3,15
    7010:	2800021e 	bne	r5,zero,701c <__lo0bits+0x58>
    7014:	1806d13a 	srli	r3,r3,4
    7018:	10800104 	addi	r2,r2,4
    701c:	194000cc 	andi	r5,r3,3
    7020:	2800021e 	bne	r5,zero,702c <__lo0bits+0x68>
    7024:	1806d0ba 	srli	r3,r3,2
    7028:	10800084 	addi	r2,r2,2
    702c:	1940004c 	andi	r5,r3,1
    7030:	2800081e 	bne	r5,zero,7054 <__lo0bits+0x90>
    7034:	1806d07a 	srli	r3,r3,1
    7038:	1800051e 	bne	r3,zero,7050 <__lo0bits+0x8c>
    703c:	00800804 	movi	r2,32
    7040:	f800283a 	ret
    7044:	1806d43a 	srli	r3,r3,16
    7048:	00800404 	movi	r2,16
    704c:	003feb06 	br	6ffc <__lo0bits+0x38>
    7050:	10800044 	addi	r2,r2,1
    7054:	20c00015 	stw	r3,0(r4)
    7058:	f800283a 	ret
    705c:	0005883a 	mov	r2,zero
    7060:	f800283a 	ret
    7064:	1806d07a 	srli	r3,r3,1
    7068:	00800044 	movi	r2,1
    706c:	20c00015 	stw	r3,0(r4)
    7070:	f800283a 	ret

00007074 <__i2b>:
    7074:	defffd04 	addi	sp,sp,-12
    7078:	dc000015 	stw	r16,0(sp)
    707c:	04000044 	movi	r16,1
    7080:	dc400115 	stw	r17,4(sp)
    7084:	2823883a 	mov	r17,r5
    7088:	800b883a 	mov	r5,r16
    708c:	dfc00215 	stw	ra,8(sp)
    7090:	0006c440 	call	6c44 <_Balloc>
    7094:	14400515 	stw	r17,20(r2)
    7098:	14000415 	stw	r16,16(r2)
    709c:	dfc00217 	ldw	ra,8(sp)
    70a0:	dc400117 	ldw	r17,4(sp)
    70a4:	dc000017 	ldw	r16,0(sp)
    70a8:	dec00304 	addi	sp,sp,12
    70ac:	f800283a 	ret

000070b0 <__multiply>:
    70b0:	defff004 	addi	sp,sp,-64
    70b4:	dc800815 	stw	r18,32(sp)
    70b8:	dc400715 	stw	r17,28(sp)
    70bc:	34800417 	ldw	r18,16(r6)
    70c0:	2c400417 	ldw	r17,16(r5)
    70c4:	ddc00d15 	stw	r23,52(sp)
    70c8:	dc000615 	stw	r16,24(sp)
    70cc:	dfc00f15 	stw	ra,60(sp)
    70d0:	df000e15 	stw	fp,56(sp)
    70d4:	dd800c15 	stw	r22,48(sp)
    70d8:	dd400b15 	stw	r21,44(sp)
    70dc:	dd000a15 	stw	r20,40(sp)
    70e0:	dcc00915 	stw	r19,36(sp)
    70e4:	2821883a 	mov	r16,r5
    70e8:	302f883a 	mov	r23,r6
    70ec:	8c80050e 	bge	r17,r18,7104 <__multiply+0x54>
    70f0:	8807883a 	mov	r3,r17
    70f4:	3021883a 	mov	r16,r6
    70f8:	9023883a 	mov	r17,r18
    70fc:	282f883a 	mov	r23,r5
    7100:	1825883a 	mov	r18,r3
    7104:	80800217 	ldw	r2,8(r16)
    7108:	8c87883a 	add	r3,r17,r18
    710c:	d8c00115 	stw	r3,4(sp)
    7110:	81400117 	ldw	r5,4(r16)
    7114:	10c0010e 	bge	r2,r3,711c <__multiply+0x6c>
    7118:	29400044 	addi	r5,r5,1
    711c:	0006c440 	call	6c44 <_Balloc>
    7120:	d8c00117 	ldw	r3,4(sp)
    7124:	d8800515 	stw	r2,20(sp)
    7128:	14c00504 	addi	r19,r2,20
    712c:	1d400144 	addi	r21,r3,5
    7130:	ad6b883a 	add	r21,r21,r21
    7134:	ad6b883a 	add	r21,r21,r21
    7138:	156b883a 	add	r21,r2,r21
    713c:	dd400215 	stw	r21,8(sp)
    7140:	9805883a 	mov	r2,r19
    7144:	9d40042e 	bgeu	r19,r21,7158 <__multiply+0xa8>
    7148:	d8c00217 	ldw	r3,8(sp)
    714c:	10000015 	stw	zero,0(r2)
    7150:	10800104 	addi	r2,r2,4
    7154:	10fffc36 	bltu	r2,r3,7148 <__multiply+0x98>
    7158:	94800144 	addi	r18,r18,5
    715c:	94a5883a 	add	r18,r18,r18
    7160:	94ad883a 	add	r22,r18,r18
    7164:	8c400144 	addi	r17,r17,5
    7168:	8c63883a 	add	r17,r17,r17
    716c:	bdad883a 	add	r22,r23,r22
    7170:	80c00504 	addi	r3,r16,20
    7174:	8c63883a 	add	r17,r17,r17
    7178:	bc800504 	addi	r18,r23,20
    717c:	dd800315 	stw	r22,12(sp)
    7180:	d8c00415 	stw	r3,16(sp)
    7184:	dcc00015 	stw	r19,0(sp)
    7188:	8463883a 	add	r17,r16,r17
    718c:	9580412e 	bgeu	r18,r22,7294 <__multiply+0x1e4>
    7190:	90800017 	ldw	r2,0(r18)
    7194:	173fffcc 	andi	fp,r2,65535
    7198:	e0001a26 	beq	fp,zero,7204 <__multiply+0x154>
    719c:	dd000017 	ldw	r20,0(sp)
    71a0:	dd800417 	ldw	r22,16(sp)
    71a4:	002b883a 	mov	r21,zero
    71a8:	b4c00017 	ldw	r19,0(r22)
    71ac:	a4000017 	ldw	r16,0(r20)
    71b0:	e00b883a 	mov	r5,fp
    71b4:	993fffcc 	andi	r4,r19,65535
    71b8:	000a8440 	call	a844 <__mulsi3>
    71bc:	9808d43a 	srli	r4,r19,16
    71c0:	817fffcc 	andi	r5,r16,65535
    71c4:	1145883a 	add	r2,r2,r5
    71c8:	e00b883a 	mov	r5,fp
    71cc:	1567883a 	add	r19,r2,r21
    71d0:	8020d43a 	srli	r16,r16,16
    71d4:	000a8440 	call	a844 <__mulsi3>
    71d8:	9808d43a 	srli	r4,r19,16
    71dc:	1405883a 	add	r2,r2,r16
    71e0:	a4c0000d 	sth	r19,0(r20)
    71e4:	110f883a 	add	r7,r2,r4
    71e8:	a1c0008d 	sth	r7,2(r20)
    71ec:	b5800104 	addi	r22,r22,4
    71f0:	382ad43a 	srli	r21,r7,16
    71f4:	a5000104 	addi	r20,r20,4
    71f8:	b47feb36 	bltu	r22,r17,71a8 <__multiply+0xf8>
    71fc:	a5400015 	stw	r21,0(r20)
    7200:	90800017 	ldw	r2,0(r18)
    7204:	1038d43a 	srli	fp,r2,16
    7208:	e0001c26 	beq	fp,zero,727c <__multiply+0x1cc>
    720c:	d8c00017 	ldw	r3,0(sp)
    7210:	dd000417 	ldw	r20,16(sp)
    7214:	002b883a 	mov	r21,zero
    7218:	1d800017 	ldw	r22,0(r3)
    721c:	182f883a 	mov	r23,r3
    7220:	b021883a 	mov	r16,r22
    7224:	a4c00017 	ldw	r19,0(r20)
    7228:	8020d43a 	srli	r16,r16,16
    722c:	e00b883a 	mov	r5,fp
    7230:	993fffcc 	andi	r4,r19,65535
    7234:	000a8440 	call	a844 <__mulsi3>
    7238:	1405883a 	add	r2,r2,r16
    723c:	9808d43a 	srli	r4,r19,16
    7240:	156b883a 	add	r21,r2,r21
    7244:	bdc00104 	addi	r23,r23,4
    7248:	bdbfff0d 	sth	r22,-4(r23)
    724c:	bd7fff8d 	sth	r21,-2(r23)
    7250:	bc000017 	ldw	r16,0(r23)
    7254:	e00b883a 	mov	r5,fp
    7258:	000a8440 	call	a844 <__mulsi3>
    725c:	a80ed43a 	srli	r7,r21,16
    7260:	813fffcc 	andi	r4,r16,65535
    7264:	2085883a 	add	r2,r4,r2
    7268:	11ed883a 	add	r22,r2,r7
    726c:	a5000104 	addi	r20,r20,4
    7270:	b02ad43a 	srli	r21,r22,16
    7274:	a47feb36 	bltu	r20,r17,7224 <__multiply+0x174>
    7278:	bd800015 	stw	r22,0(r23)
    727c:	d8c00017 	ldw	r3,0(sp)
    7280:	94800104 	addi	r18,r18,4
    7284:	18c00104 	addi	r3,r3,4
    7288:	d8c00015 	stw	r3,0(sp)
    728c:	d8c00317 	ldw	r3,12(sp)
    7290:	90ffbf36 	bltu	r18,r3,7190 <__multiply+0xe0>
    7294:	d8c00117 	ldw	r3,4(sp)
    7298:	00c00c0e 	bge	zero,r3,72cc <__multiply+0x21c>
    729c:	d8c00217 	ldw	r3,8(sp)
    72a0:	18bfff17 	ldw	r2,-4(r3)
    72a4:	1d7fff04 	addi	r21,r3,-4
    72a8:	10000326 	beq	r2,zero,72b8 <__multiply+0x208>
    72ac:	00000706 	br	72cc <__multiply+0x21c>
    72b0:	a8800017 	ldw	r2,0(r21)
    72b4:	1000051e 	bne	r2,zero,72cc <__multiply+0x21c>
    72b8:	d8c00117 	ldw	r3,4(sp)
    72bc:	ad7fff04 	addi	r21,r21,-4
    72c0:	18ffffc4 	addi	r3,r3,-1
    72c4:	d8c00115 	stw	r3,4(sp)
    72c8:	183ff91e 	bne	r3,zero,72b0 <__multiply+0x200>
    72cc:	d8800517 	ldw	r2,20(sp)
    72d0:	d8c00117 	ldw	r3,4(sp)
    72d4:	10c00415 	stw	r3,16(r2)
    72d8:	dfc00f17 	ldw	ra,60(sp)
    72dc:	df000e17 	ldw	fp,56(sp)
    72e0:	ddc00d17 	ldw	r23,52(sp)
    72e4:	dd800c17 	ldw	r22,48(sp)
    72e8:	dd400b17 	ldw	r21,44(sp)
    72ec:	dd000a17 	ldw	r20,40(sp)
    72f0:	dcc00917 	ldw	r19,36(sp)
    72f4:	dc800817 	ldw	r18,32(sp)
    72f8:	dc400717 	ldw	r17,28(sp)
    72fc:	dc000617 	ldw	r16,24(sp)
    7300:	dec01004 	addi	sp,sp,64
    7304:	f800283a 	ret

00007308 <__pow5mult>:
    7308:	defffb04 	addi	sp,sp,-20
    730c:	dcc00315 	stw	r19,12(sp)
    7310:	dc800215 	stw	r18,8(sp)
    7314:	dc000015 	stw	r16,0(sp)
    7318:	dfc00415 	stw	ra,16(sp)
    731c:	dc400115 	stw	r17,4(sp)
    7320:	308000cc 	andi	r2,r6,3
    7324:	3021883a 	mov	r16,r6
    7328:	2027883a 	mov	r19,r4
    732c:	2825883a 	mov	r18,r5
    7330:	10002e1e 	bne	r2,zero,73ec <__pow5mult+0xe4>
    7334:	8021d0ba 	srai	r16,r16,2
    7338:	80001a26 	beq	r16,zero,73a4 <__pow5mult+0x9c>
    733c:	9c401217 	ldw	r17,72(r19)
    7340:	8800061e 	bne	r17,zero,735c <__pow5mult+0x54>
    7344:	00003406 	br	7418 <__pow5mult+0x110>
    7348:	8021d07a 	srai	r16,r16,1
    734c:	80001526 	beq	r16,zero,73a4 <__pow5mult+0x9c>
    7350:	88c00017 	ldw	r3,0(r17)
    7354:	18001b26 	beq	r3,zero,73c4 <__pow5mult+0xbc>
    7358:	1823883a 	mov	r17,r3
    735c:	80c0004c 	andi	r3,r16,1
    7360:	183ff926 	beq	r3,zero,7348 <__pow5mult+0x40>
    7364:	900b883a 	mov	r5,r18
    7368:	880d883a 	mov	r6,r17
    736c:	9809883a 	mov	r4,r19
    7370:	00070b00 	call	70b0 <__multiply>
    7374:	90001b26 	beq	r18,zero,73e4 <__pow5mult+0xdc>
    7378:	91000117 	ldw	r4,4(r18)
    737c:	98c01317 	ldw	r3,76(r19)
    7380:	8021d07a 	srai	r16,r16,1
    7384:	2109883a 	add	r4,r4,r4
    7388:	2109883a 	add	r4,r4,r4
    738c:	1907883a 	add	r3,r3,r4
    7390:	19000017 	ldw	r4,0(r3)
    7394:	91000015 	stw	r4,0(r18)
    7398:	1c800015 	stw	r18,0(r3)
    739c:	1025883a 	mov	r18,r2
    73a0:	803feb1e 	bne	r16,zero,7350 <__pow5mult+0x48>
    73a4:	9005883a 	mov	r2,r18
    73a8:	dfc00417 	ldw	ra,16(sp)
    73ac:	dcc00317 	ldw	r19,12(sp)
    73b0:	dc800217 	ldw	r18,8(sp)
    73b4:	dc400117 	ldw	r17,4(sp)
    73b8:	dc000017 	ldw	r16,0(sp)
    73bc:	dec00504 	addi	sp,sp,20
    73c0:	f800283a 	ret
    73c4:	880b883a 	mov	r5,r17
    73c8:	880d883a 	mov	r6,r17
    73cc:	9809883a 	mov	r4,r19
    73d0:	00070b00 	call	70b0 <__multiply>
    73d4:	88800015 	stw	r2,0(r17)
    73d8:	10000015 	stw	zero,0(r2)
    73dc:	1023883a 	mov	r17,r2
    73e0:	003fde06 	br	735c <__pow5mult+0x54>
    73e4:	1025883a 	mov	r18,r2
    73e8:	003fd706 	br	7348 <__pow5mult+0x40>
    73ec:	10bfffc4 	addi	r2,r2,-1
    73f0:	1085883a 	add	r2,r2,r2
    73f4:	00c00074 	movhi	r3,1
    73f8:	18f6f104 	addi	r3,r3,-9276
    73fc:	1085883a 	add	r2,r2,r2
    7400:	1885883a 	add	r2,r3,r2
    7404:	11800017 	ldw	r6,0(r2)
    7408:	000f883a 	mov	r7,zero
    740c:	0006d140 	call	6d14 <__multadd>
    7410:	1025883a 	mov	r18,r2
    7414:	003fc706 	br	7334 <__pow5mult+0x2c>
    7418:	9809883a 	mov	r4,r19
    741c:	01409c44 	movi	r5,625
    7420:	00070740 	call	7074 <__i2b>
    7424:	98801215 	stw	r2,72(r19)
    7428:	1023883a 	mov	r17,r2
    742c:	10000015 	stw	zero,0(r2)
    7430:	003fca06 	br	735c <__pow5mult+0x54>

00007434 <__lshift>:
    7434:	defff904 	addi	sp,sp,-28
    7438:	dd400515 	stw	r21,20(sp)
    743c:	dc400115 	stw	r17,4(sp)
    7440:	2d400417 	ldw	r21,16(r5)
    7444:	3023d17a 	srai	r17,r6,5
    7448:	28800217 	ldw	r2,8(r5)
    744c:	dd000415 	stw	r20,16(sp)
    7450:	8d6b883a 	add	r21,r17,r21
    7454:	dcc00315 	stw	r19,12(sp)
    7458:	dc800215 	stw	r18,8(sp)
    745c:	dc000015 	stw	r16,0(sp)
    7460:	dfc00615 	stw	ra,24(sp)
    7464:	ac000044 	addi	r16,r21,1
    7468:	2825883a 	mov	r18,r5
    746c:	3029883a 	mov	r20,r6
    7470:	2027883a 	mov	r19,r4
    7474:	29400117 	ldw	r5,4(r5)
    7478:	1400030e 	bge	r2,r16,7488 <__lshift+0x54>
    747c:	1085883a 	add	r2,r2,r2
    7480:	29400044 	addi	r5,r5,1
    7484:	143ffd16 	blt	r2,r16,747c <__lshift+0x48>
    7488:	9809883a 	mov	r4,r19
    748c:	0006c440 	call	6c44 <_Balloc>
    7490:	10c00504 	addi	r3,r2,20
    7494:	0440090e 	bge	zero,r17,74bc <__lshift+0x88>
    7498:	000f883a 	mov	r7,zero
    749c:	18000015 	stw	zero,0(r3)
    74a0:	39c00044 	addi	r7,r7,1
    74a4:	18c00104 	addi	r3,r3,4
    74a8:	3c7ffc1e 	bne	r7,r17,749c <__lshift+0x68>
    74ac:	38c00144 	addi	r3,r7,5
    74b0:	18c7883a 	add	r3,r3,r3
    74b4:	18c7883a 	add	r3,r3,r3
    74b8:	10c7883a 	add	r3,r2,r3
    74bc:	92000417 	ldw	r8,16(r18)
    74c0:	a18007cc 	andi	r6,r20,31
    74c4:	91c00504 	addi	r7,r18,20
    74c8:	42000144 	addi	r8,r8,5
    74cc:	4211883a 	add	r8,r8,r8
    74d0:	4211883a 	add	r8,r8,r8
    74d4:	9211883a 	add	r8,r18,r8
    74d8:	30002226 	beq	r6,zero,7564 <__lshift+0x130>
    74dc:	02800804 	movi	r10,32
    74e0:	5195c83a 	sub	r10,r10,r6
    74e4:	000b883a 	mov	r5,zero
    74e8:	3a400017 	ldw	r9,0(r7)
    74ec:	18c00104 	addi	r3,r3,4
    74f0:	39c00104 	addi	r7,r7,4
    74f4:	4992983a 	sll	r9,r9,r6
    74f8:	2a4ab03a 	or	r5,r5,r9
    74fc:	197fff15 	stw	r5,-4(r3)
    7500:	397fff17 	ldw	r5,-4(r7)
    7504:	2a8ad83a 	srl	r5,r5,r10
    7508:	3a3ff736 	bltu	r7,r8,74e8 <__lshift+0xb4>
    750c:	19400015 	stw	r5,0(r3)
    7510:	28000126 	beq	r5,zero,7518 <__lshift+0xe4>
    7514:	ac000084 	addi	r16,r21,2
    7518:	91000117 	ldw	r4,4(r18)
    751c:	98c01317 	ldw	r3,76(r19)
    7520:	843fffc4 	addi	r16,r16,-1
    7524:	2109883a 	add	r4,r4,r4
    7528:	2109883a 	add	r4,r4,r4
    752c:	1907883a 	add	r3,r3,r4
    7530:	19000017 	ldw	r4,0(r3)
    7534:	14000415 	stw	r16,16(r2)
    7538:	91000015 	stw	r4,0(r18)
    753c:	1c800015 	stw	r18,0(r3)
    7540:	dfc00617 	ldw	ra,24(sp)
    7544:	dd400517 	ldw	r21,20(sp)
    7548:	dd000417 	ldw	r20,16(sp)
    754c:	dcc00317 	ldw	r19,12(sp)
    7550:	dc800217 	ldw	r18,8(sp)
    7554:	dc400117 	ldw	r17,4(sp)
    7558:	dc000017 	ldw	r16,0(sp)
    755c:	dec00704 	addi	sp,sp,28
    7560:	f800283a 	ret
    7564:	39400017 	ldw	r5,0(r7)
    7568:	18c00104 	addi	r3,r3,4
    756c:	39c00104 	addi	r7,r7,4
    7570:	197fff15 	stw	r5,-4(r3)
    7574:	3a3fe82e 	bgeu	r7,r8,7518 <__lshift+0xe4>
    7578:	39400017 	ldw	r5,0(r7)
    757c:	18c00104 	addi	r3,r3,4
    7580:	39c00104 	addi	r7,r7,4
    7584:	197fff15 	stw	r5,-4(r3)
    7588:	3a3ff636 	bltu	r7,r8,7564 <__lshift+0x130>
    758c:	003fe206 	br	7518 <__lshift+0xe4>

00007590 <__mcmp>:
    7590:	20800417 	ldw	r2,16(r4)
    7594:	28c00417 	ldw	r3,16(r5)
    7598:	10c5c83a 	sub	r2,r2,r3
    759c:	10000f1e 	bne	r2,zero,75dc <__mcmp+0x4c>
    75a0:	18c00144 	addi	r3,r3,5
    75a4:	18c7883a 	add	r3,r3,r3
    75a8:	18c7883a 	add	r3,r3,r3
    75ac:	21c00504 	addi	r7,r4,20
    75b0:	28cb883a 	add	r5,r5,r3
    75b4:	20c9883a 	add	r4,r4,r3
    75b8:	213fff04 	addi	r4,r4,-4
    75bc:	297fff04 	addi	r5,r5,-4
    75c0:	21800017 	ldw	r6,0(r4)
    75c4:	28c00017 	ldw	r3,0(r5)
    75c8:	30c0021e 	bne	r6,r3,75d4 <__mcmp+0x44>
    75cc:	393ffa36 	bltu	r7,r4,75b8 <__mcmp+0x28>
    75d0:	f800283a 	ret
    75d4:	30c00236 	bltu	r6,r3,75e0 <__mcmp+0x50>
    75d8:	00800044 	movi	r2,1
    75dc:	f800283a 	ret
    75e0:	00bfffc4 	movi	r2,-1
    75e4:	f800283a 	ret

000075e8 <__mdiff>:
    75e8:	defffb04 	addi	sp,sp,-20
    75ec:	dc000015 	stw	r16,0(sp)
    75f0:	2821883a 	mov	r16,r5
    75f4:	dc800215 	stw	r18,8(sp)
    75f8:	300b883a 	mov	r5,r6
    75fc:	2025883a 	mov	r18,r4
    7600:	8009883a 	mov	r4,r16
    7604:	dc400115 	stw	r17,4(sp)
    7608:	dfc00415 	stw	ra,16(sp)
    760c:	dcc00315 	stw	r19,12(sp)
    7610:	3023883a 	mov	r17,r6
    7614:	00075900 	call	7590 <__mcmp>
    7618:	10005026 	beq	r2,zero,775c <__mdiff+0x174>
    761c:	10004a16 	blt	r2,zero,7748 <__mdiff+0x160>
    7620:	0027883a 	mov	r19,zero
    7624:	81400117 	ldw	r5,4(r16)
    7628:	9009883a 	mov	r4,r18
    762c:	0006c440 	call	6c44 <_Balloc>
    7630:	82400417 	ldw	r9,16(r16)
    7634:	89800417 	ldw	r6,16(r17)
    7638:	14c00315 	stw	r19,12(r2)
    763c:	4b800144 	addi	r14,r9,5
    7640:	31800144 	addi	r6,r6,5
    7644:	739d883a 	add	r14,r14,r14
    7648:	318d883a 	add	r6,r6,r6
    764c:	739d883a 	add	r14,r14,r14
    7650:	318d883a 	add	r6,r6,r6
    7654:	81c00504 	addi	r7,r16,20
    7658:	839d883a 	add	r14,r16,r14
    765c:	8a000504 	addi	r8,r17,20
    7660:	898d883a 	add	r6,r17,r6
    7664:	10c00504 	addi	r3,r2,20
    7668:	0009883a 	mov	r4,zero
    766c:	3b000017 	ldw	r12,0(r7)
    7670:	42c00017 	ldw	r11,0(r8)
    7674:	42000104 	addi	r8,r8,4
    7678:	62bfffcc 	andi	r10,r12,65535
    767c:	5b7fffcc 	andi	r13,r11,65535
    7680:	5109883a 	add	r4,r10,r4
    7684:	2355c83a 	sub	r10,r4,r13
    7688:	5816d43a 	srli	r11,r11,16
    768c:	6008d43a 	srli	r4,r12,16
    7690:	501bd43a 	srai	r13,r10,16
    7694:	1a80000d 	sth	r10,0(r3)
    7698:	22c9c83a 	sub	r4,r4,r11
    769c:	2349883a 	add	r4,r4,r13
    76a0:	1900008d 	sth	r4,2(r3)
    76a4:	39c00104 	addi	r7,r7,4
    76a8:	2009d43a 	srai	r4,r4,16
    76ac:	18c00104 	addi	r3,r3,4
    76b0:	41bfee36 	bltu	r8,r6,766c <__mdiff+0x84>
    76b4:	180b883a 	mov	r5,r3
    76b8:	3815883a 	mov	r10,r7
    76bc:	3b80132e 	bgeu	r7,r14,770c <__mdiff+0x124>
    76c0:	3a000017 	ldw	r8,0(r7)
    76c4:	18c00104 	addi	r3,r3,4
    76c8:	39c00104 	addi	r7,r7,4
    76cc:	41bfffcc 	andi	r6,r8,65535
    76d0:	310d883a 	add	r6,r6,r4
    76d4:	3009d43a 	srai	r4,r6,16
    76d8:	4010d43a 	srli	r8,r8,16
    76dc:	19bfff0d 	sth	r6,-4(r3)
    76e0:	2209883a 	add	r4,r4,r8
    76e4:	193fff8d 	sth	r4,-2(r3)
    76e8:	2009d43a 	srai	r4,r4,16
    76ec:	3bbff436 	bltu	r7,r14,76c0 <__mdiff+0xd8>
    76f0:	0286303a 	nor	r3,zero,r10
    76f4:	1b87883a 	add	r3,r3,r14
    76f8:	1806d0ba 	srli	r3,r3,2
    76fc:	18c00044 	addi	r3,r3,1
    7700:	18c7883a 	add	r3,r3,r3
    7704:	18c7883a 	add	r3,r3,r3
    7708:	28c7883a 	add	r3,r5,r3
    770c:	193fff17 	ldw	r4,-4(r3)
    7710:	18ffff04 	addi	r3,r3,-4
    7714:	2000041e 	bne	r4,zero,7728 <__mdiff+0x140>
    7718:	18ffff04 	addi	r3,r3,-4
    771c:	19000017 	ldw	r4,0(r3)
    7720:	4a7fffc4 	addi	r9,r9,-1
    7724:	203ffc26 	beq	r4,zero,7718 <__mdiff+0x130>
    7728:	12400415 	stw	r9,16(r2)
    772c:	dfc00417 	ldw	ra,16(sp)
    7730:	dcc00317 	ldw	r19,12(sp)
    7734:	dc800217 	ldw	r18,8(sp)
    7738:	dc400117 	ldw	r17,4(sp)
    773c:	dc000017 	ldw	r16,0(sp)
    7740:	dec00504 	addi	sp,sp,20
    7744:	f800283a 	ret
    7748:	8005883a 	mov	r2,r16
    774c:	04c00044 	movi	r19,1
    7750:	8821883a 	mov	r16,r17
    7754:	1023883a 	mov	r17,r2
    7758:	003fb206 	br	7624 <__mdiff+0x3c>
    775c:	9009883a 	mov	r4,r18
    7760:	000b883a 	mov	r5,zero
    7764:	0006c440 	call	6c44 <_Balloc>
    7768:	00c00044 	movi	r3,1
    776c:	10c00415 	stw	r3,16(r2)
    7770:	10000515 	stw	zero,20(r2)
    7774:	dfc00417 	ldw	ra,16(sp)
    7778:	dcc00317 	ldw	r19,12(sp)
    777c:	dc800217 	ldw	r18,8(sp)
    7780:	dc400117 	ldw	r17,4(sp)
    7784:	dc000017 	ldw	r16,0(sp)
    7788:	dec00504 	addi	sp,sp,20
    778c:	f800283a 	ret

00007790 <__ulp>:
    7790:	295ffc2c 	andhi	r5,r5,32752
    7794:	00bf3034 	movhi	r2,64704
    7798:	2887883a 	add	r3,r5,r2
    779c:	00c0020e 	bge	zero,r3,77a8 <__ulp+0x18>
    77a0:	0005883a 	mov	r2,zero
    77a4:	f800283a 	ret
    77a8:	00c7c83a 	sub	r3,zero,r3
    77ac:	1805d53a 	srai	r2,r3,20
    77b0:	00c004c4 	movi	r3,19
    77b4:	18800a0e 	bge	r3,r2,77e0 <__ulp+0x50>
    77b8:	01000c84 	movi	r4,50
    77bc:	0007883a 	mov	r3,zero
    77c0:	20800516 	blt	r4,r2,77d8 <__ulp+0x48>
    77c4:	01000cc4 	movi	r4,51
    77c8:	2085c83a 	sub	r2,r4,r2
    77cc:	01000044 	movi	r4,1
    77d0:	2084983a 	sll	r2,r4,r2
    77d4:	f800283a 	ret
    77d8:	00800044 	movi	r2,1
    77dc:	f800283a 	ret
    77e0:	00c00234 	movhi	r3,8
    77e4:	1887d83a 	sra	r3,r3,r2
    77e8:	0005883a 	mov	r2,zero
    77ec:	f800283a 	ret

000077f0 <__b2d>:
    77f0:	defffa04 	addi	sp,sp,-24
    77f4:	dc000015 	stw	r16,0(sp)
    77f8:	24000417 	ldw	r16,16(r4)
    77fc:	dc400115 	stw	r17,4(sp)
    7800:	dcc00315 	stw	r19,12(sp)
    7804:	84000144 	addi	r16,r16,5
    7808:	8421883a 	add	r16,r16,r16
    780c:	8421883a 	add	r16,r16,r16
    7810:	2421883a 	add	r16,r4,r16
    7814:	847fff17 	ldw	r17,-4(r16)
    7818:	24c00504 	addi	r19,r4,20
    781c:	dd000415 	stw	r20,16(sp)
    7820:	8809883a 	mov	r4,r17
    7824:	dc800215 	stw	r18,8(sp)
    7828:	2829883a 	mov	r20,r5
    782c:	dfc00515 	stw	ra,20(sp)
    7830:	0006f5c0 	call	6f5c <__hi0bits>
    7834:	00c00804 	movi	r3,32
    7838:	1887c83a 	sub	r3,r3,r2
    783c:	a0c00015 	stw	r3,0(r20)
    7840:	00c00284 	movi	r3,10
    7844:	84bfff04 	addi	r18,r16,-4
    7848:	18801216 	blt	r3,r2,7894 <__b2d+0xa4>
    784c:	010002c4 	movi	r4,11
    7850:	2089c83a 	sub	r4,r4,r2
    7854:	8906d83a 	srl	r3,r17,r4
    7858:	18cffc34 	orhi	r3,r3,16368
    785c:	9c80322e 	bgeu	r19,r18,7928 <__b2d+0x138>
    7860:	817ffe17 	ldw	r5,-8(r16)
    7864:	2908d83a 	srl	r4,r5,r4
    7868:	10800544 	addi	r2,r2,21
    786c:	88a2983a 	sll	r17,r17,r2
    7870:	2444b03a 	or	r2,r4,r17
    7874:	dfc00517 	ldw	ra,20(sp)
    7878:	dd000417 	ldw	r20,16(sp)
    787c:	dcc00317 	ldw	r19,12(sp)
    7880:	dc800217 	ldw	r18,8(sp)
    7884:	dc400117 	ldw	r17,4(sp)
    7888:	dc000017 	ldw	r16,0(sp)
    788c:	dec00604 	addi	sp,sp,24
    7890:	f800283a 	ret
    7894:	9c801636 	bltu	r19,r18,78f0 <__b2d+0x100>
    7898:	113ffd44 	addi	r4,r2,-11
    789c:	000b883a 	mov	r5,zero
    78a0:	20001726 	beq	r4,zero,7900 <__b2d+0x110>
    78a4:	00c00ac4 	movi	r3,43
    78a8:	1885c83a 	sub	r2,r3,r2
    78ac:	8906983a 	sll	r3,r17,r4
    78b0:	288cd83a 	srl	r6,r5,r2
    78b4:	18cffc34 	orhi	r3,r3,16368
    78b8:	1986b03a 	or	r3,r3,r6
    78bc:	9c801c2e 	bgeu	r19,r18,7930 <__b2d+0x140>
    78c0:	91bfff17 	ldw	r6,-4(r18)
    78c4:	3084d83a 	srl	r2,r6,r2
    78c8:	2908983a 	sll	r4,r5,r4
    78cc:	1104b03a 	or	r2,r2,r4
    78d0:	dfc00517 	ldw	ra,20(sp)
    78d4:	dd000417 	ldw	r20,16(sp)
    78d8:	dcc00317 	ldw	r19,12(sp)
    78dc:	dc800217 	ldw	r18,8(sp)
    78e0:	dc400117 	ldw	r17,4(sp)
    78e4:	dc000017 	ldw	r16,0(sp)
    78e8:	dec00604 	addi	sp,sp,24
    78ec:	f800283a 	ret
    78f0:	113ffd44 	addi	r4,r2,-11
    78f4:	84bffe04 	addi	r18,r16,-8
    78f8:	817ffe17 	ldw	r5,-8(r16)
    78fc:	203fe91e 	bne	r4,zero,78a4 <__b2d+0xb4>
    7900:	88cffc34 	orhi	r3,r17,16368
    7904:	2805883a 	mov	r2,r5
    7908:	dfc00517 	ldw	ra,20(sp)
    790c:	dd000417 	ldw	r20,16(sp)
    7910:	dcc00317 	ldw	r19,12(sp)
    7914:	dc800217 	ldw	r18,8(sp)
    7918:	dc400117 	ldw	r17,4(sp)
    791c:	dc000017 	ldw	r16,0(sp)
    7920:	dec00604 	addi	sp,sp,24
    7924:	f800283a 	ret
    7928:	0009883a 	mov	r4,zero
    792c:	003fce06 	br	7868 <__b2d+0x78>
    7930:	0005883a 	mov	r2,zero
    7934:	003fe406 	br	78c8 <__b2d+0xd8>

00007938 <__d2b>:
    7938:	defff804 	addi	sp,sp,-32
    793c:	dc400315 	stw	r17,12(sp)
    7940:	3023883a 	mov	r17,r6
    7944:	dc800415 	stw	r18,16(sp)
    7948:	8824907a 	slli	r18,r17,1
    794c:	dcc00515 	stw	r19,20(sp)
    7950:	2827883a 	mov	r19,r5
    7954:	9024d57a 	srli	r18,r18,21
    7958:	01400044 	movi	r5,1
    795c:	dd000615 	stw	r20,24(sp)
    7960:	dc000215 	stw	r16,8(sp)
    7964:	dfc00715 	stw	ra,28(sp)
    7968:	3829883a 	mov	r20,r7
    796c:	0006c440 	call	6c44 <_Balloc>
    7970:	1021883a 	mov	r16,r2
    7974:	00800434 	movhi	r2,16
    7978:	10bfffc4 	addi	r2,r2,-1
    797c:	88a2703a 	and	r17,r17,r2
    7980:	90000126 	beq	r18,zero,7988 <__d2b+0x50>
    7984:	8c400434 	orhi	r17,r17,16
    7988:	dc400015 	stw	r17,0(sp)
    798c:	98002226 	beq	r19,zero,7a18 <__d2b+0xe0>
    7990:	d9000104 	addi	r4,sp,4
    7994:	dcc00115 	stw	r19,4(sp)
    7998:	0006fc40 	call	6fc4 <__lo0bits>
    799c:	d8c00017 	ldw	r3,0(sp)
    79a0:	10002d1e 	bne	r2,zero,7a58 <__d2b+0x120>
    79a4:	d9000117 	ldw	r4,4(sp)
    79a8:	81000515 	stw	r4,20(r16)
    79ac:	1823003a 	cmpeq	r17,r3,zero
    79b0:	01000084 	movi	r4,2
    79b4:	2463c83a 	sub	r17,r4,r17
    79b8:	80c00615 	stw	r3,24(r16)
    79bc:	84400415 	stw	r17,16(r16)
    79c0:	90001d1e 	bne	r18,zero,7a38 <__d2b+0x100>
    79c4:	88c00104 	addi	r3,r17,4
    79c8:	18c7883a 	add	r3,r3,r3
    79cc:	18c7883a 	add	r3,r3,r3
    79d0:	80c7883a 	add	r3,r16,r3
    79d4:	19000017 	ldw	r4,0(r3)
    79d8:	10bef384 	addi	r2,r2,-1074
    79dc:	a0800015 	stw	r2,0(r20)
    79e0:	0006f5c0 	call	6f5c <__hi0bits>
    79e4:	8822917a 	slli	r17,r17,5
    79e8:	d8c00817 	ldw	r3,32(sp)
    79ec:	8885c83a 	sub	r2,r17,r2
    79f0:	18800015 	stw	r2,0(r3)
    79f4:	8005883a 	mov	r2,r16
    79f8:	dfc00717 	ldw	ra,28(sp)
    79fc:	dd000617 	ldw	r20,24(sp)
    7a00:	dcc00517 	ldw	r19,20(sp)
    7a04:	dc800417 	ldw	r18,16(sp)
    7a08:	dc400317 	ldw	r17,12(sp)
    7a0c:	dc000217 	ldw	r16,8(sp)
    7a10:	dec00804 	addi	sp,sp,32
    7a14:	f800283a 	ret
    7a18:	d809883a 	mov	r4,sp
    7a1c:	0006fc40 	call	6fc4 <__lo0bits>
    7a20:	d8c00017 	ldw	r3,0(sp)
    7a24:	04400044 	movi	r17,1
    7a28:	84400415 	stw	r17,16(r16)
    7a2c:	80c00515 	stw	r3,20(r16)
    7a30:	10800804 	addi	r2,r2,32
    7a34:	903fe326 	beq	r18,zero,79c4 <__d2b+0x8c>
    7a38:	00c00d44 	movi	r3,53
    7a3c:	94bef344 	addi	r18,r18,-1075
    7a40:	90a5883a 	add	r18,r18,r2
    7a44:	1885c83a 	sub	r2,r3,r2
    7a48:	d8c00817 	ldw	r3,32(sp)
    7a4c:	a4800015 	stw	r18,0(r20)
    7a50:	18800015 	stw	r2,0(r3)
    7a54:	003fe706 	br	79f4 <__d2b+0xbc>
    7a58:	01000804 	movi	r4,32
    7a5c:	2089c83a 	sub	r4,r4,r2
    7a60:	1908983a 	sll	r4,r3,r4
    7a64:	d9400117 	ldw	r5,4(sp)
    7a68:	1886d83a 	srl	r3,r3,r2
    7a6c:	2148b03a 	or	r4,r4,r5
    7a70:	81000515 	stw	r4,20(r16)
    7a74:	d8c00015 	stw	r3,0(sp)
    7a78:	003fcc06 	br	79ac <__d2b+0x74>

00007a7c <__ratio>:
    7a7c:	defff904 	addi	sp,sp,-28
    7a80:	dc400315 	stw	r17,12(sp)
    7a84:	2823883a 	mov	r17,r5
    7a88:	d9400104 	addi	r5,sp,4
    7a8c:	dfc00615 	stw	ra,24(sp)
    7a90:	dcc00515 	stw	r19,20(sp)
    7a94:	dc800415 	stw	r18,16(sp)
    7a98:	2027883a 	mov	r19,r4
    7a9c:	dc000215 	stw	r16,8(sp)
    7aa0:	00077f00 	call	77f0 <__b2d>
    7aa4:	8809883a 	mov	r4,r17
    7aa8:	d80b883a 	mov	r5,sp
    7aac:	1025883a 	mov	r18,r2
    7ab0:	1821883a 	mov	r16,r3
    7ab4:	00077f00 	call	77f0 <__b2d>
    7ab8:	99400417 	ldw	r5,16(r19)
    7abc:	89000417 	ldw	r4,16(r17)
    7ac0:	d9800117 	ldw	r6,4(sp)
    7ac4:	2909c83a 	sub	r4,r5,r4
    7ac8:	d9400017 	ldw	r5,0(sp)
    7acc:	2008917a 	slli	r4,r4,5
    7ad0:	314bc83a 	sub	r5,r6,r5
    7ad4:	290b883a 	add	r5,r5,r4
    7ad8:	01400e0e 	bge	zero,r5,7b14 <__ratio+0x98>
    7adc:	280a953a 	slli	r5,r5,20
    7ae0:	2c21883a 	add	r16,r5,r16
    7ae4:	9009883a 	mov	r4,r18
    7ae8:	800b883a 	mov	r5,r16
    7aec:	100d883a 	mov	r6,r2
    7af0:	180f883a 	mov	r7,r3
    7af4:	000a0c00 	call	a0c0 <__divdf3>
    7af8:	dfc00617 	ldw	ra,24(sp)
    7afc:	dcc00517 	ldw	r19,20(sp)
    7b00:	dc800417 	ldw	r18,16(sp)
    7b04:	dc400317 	ldw	r17,12(sp)
    7b08:	dc000217 	ldw	r16,8(sp)
    7b0c:	dec00704 	addi	sp,sp,28
    7b10:	f800283a 	ret
    7b14:	280a953a 	slli	r5,r5,20
    7b18:	1947c83a 	sub	r3,r3,r5
    7b1c:	003ff106 	br	7ae4 <__ratio+0x68>

00007b20 <_mprec_log10>:
    7b20:	defffe04 	addi	sp,sp,-8
    7b24:	dc000015 	stw	r16,0(sp)
    7b28:	dfc00115 	stw	ra,4(sp)
    7b2c:	008005c4 	movi	r2,23
    7b30:	2021883a 	mov	r16,r4
    7b34:	11000d0e 	bge	r2,r4,7b6c <_mprec_log10+0x4c>
    7b38:	0005883a 	mov	r2,zero
    7b3c:	00cffc34 	movhi	r3,16368
    7b40:	843fffc4 	addi	r16,r16,-1
    7b44:	1009883a 	mov	r4,r2
    7b48:	180b883a 	mov	r5,r3
    7b4c:	000d883a 	mov	r6,zero
    7b50:	01d00934 	movhi	r7,16420
    7b54:	0009ddc0 	call	9ddc <__muldf3>
    7b58:	803ff91e 	bne	r16,zero,7b40 <_mprec_log10+0x20>
    7b5c:	dfc00117 	ldw	ra,4(sp)
    7b60:	dc000017 	ldw	r16,0(sp)
    7b64:	dec00204 	addi	sp,sp,8
    7b68:	f800283a 	ret
    7b6c:	202090fa 	slli	r16,r4,3
    7b70:	00800074 	movhi	r2,1
    7b74:	10b6bf04 	addi	r2,r2,-9476
    7b78:	1421883a 	add	r16,r2,r16
    7b7c:	80800017 	ldw	r2,0(r16)
    7b80:	80c00117 	ldw	r3,4(r16)
    7b84:	dfc00117 	ldw	ra,4(sp)
    7b88:	dc000017 	ldw	r16,0(sp)
    7b8c:	dec00204 	addi	sp,sp,8
    7b90:	f800283a 	ret

00007b94 <__copybits>:
    7b94:	297fffc4 	addi	r5,r5,-1
    7b98:	31c00417 	ldw	r7,16(r6)
    7b9c:	2811d17a 	srai	r8,r5,5
    7ba0:	30800504 	addi	r2,r6,20
    7ba4:	39c00144 	addi	r7,r7,5
    7ba8:	42000044 	addi	r8,r8,1
    7bac:	39cf883a 	add	r7,r7,r7
    7bb0:	4211883a 	add	r8,r8,r8
    7bb4:	39cf883a 	add	r7,r7,r7
    7bb8:	4211883a 	add	r8,r8,r8
    7bbc:	31cf883a 	add	r7,r6,r7
    7bc0:	2211883a 	add	r8,r4,r8
    7bc4:	11c00d2e 	bgeu	r2,r7,7bfc <__copybits+0x68>
    7bc8:	2007883a 	mov	r3,r4
    7bcc:	11400017 	ldw	r5,0(r2)
    7bd0:	18c00104 	addi	r3,r3,4
    7bd4:	10800104 	addi	r2,r2,4
    7bd8:	197fff15 	stw	r5,-4(r3)
    7bdc:	11fffb36 	bltu	r2,r7,7bcc <__copybits+0x38>
    7be0:	3985c83a 	sub	r2,r7,r6
    7be4:	10bffac4 	addi	r2,r2,-21
    7be8:	1004d0ba 	srli	r2,r2,2
    7bec:	10800044 	addi	r2,r2,1
    7bf0:	1085883a 	add	r2,r2,r2
    7bf4:	1085883a 	add	r2,r2,r2
    7bf8:	2089883a 	add	r4,r4,r2
    7bfc:	2200032e 	bgeu	r4,r8,7c0c <__copybits+0x78>
    7c00:	20000015 	stw	zero,0(r4)
    7c04:	21000104 	addi	r4,r4,4
    7c08:	223ffd36 	bltu	r4,r8,7c00 <__copybits+0x6c>
    7c0c:	f800283a 	ret

00007c10 <__any_on>:
    7c10:	21800417 	ldw	r6,16(r4)
    7c14:	2805d17a 	srai	r2,r5,5
    7c18:	20c00504 	addi	r3,r4,20
    7c1c:	30800f0e 	bge	r6,r2,7c5c <__any_on+0x4c>
    7c20:	3005883a 	mov	r2,r6
    7c24:	10800144 	addi	r2,r2,5
    7c28:	1085883a 	add	r2,r2,r2
    7c2c:	1085883a 	add	r2,r2,r2
    7c30:	2089883a 	add	r4,r4,r2
    7c34:	1900152e 	bgeu	r3,r4,7c8c <__any_on+0x7c>
    7c38:	20bfff17 	ldw	r2,-4(r4)
    7c3c:	213fff04 	addi	r4,r4,-4
    7c40:	1000041e 	bne	r2,zero,7c54 <__any_on+0x44>
    7c44:	1900112e 	bgeu	r3,r4,7c8c <__any_on+0x7c>
    7c48:	213fff04 	addi	r4,r4,-4
    7c4c:	20800017 	ldw	r2,0(r4)
    7c50:	103ffc26 	beq	r2,zero,7c44 <__any_on+0x34>
    7c54:	00800044 	movi	r2,1
    7c58:	f800283a 	ret
    7c5c:	11bff10e 	bge	r2,r6,7c24 <__any_on+0x14>
    7c60:	294007cc 	andi	r5,r5,31
    7c64:	283fef26 	beq	r5,zero,7c24 <__any_on+0x14>
    7c68:	11800144 	addi	r6,r2,5
    7c6c:	318d883a 	add	r6,r6,r6
    7c70:	318d883a 	add	r6,r6,r6
    7c74:	218d883a 	add	r6,r4,r6
    7c78:	31800017 	ldw	r6,0(r6)
    7c7c:	314ed83a 	srl	r7,r6,r5
    7c80:	394a983a 	sll	r5,r7,r5
    7c84:	29bff31e 	bne	r5,r6,7c54 <__any_on+0x44>
    7c88:	003fe606 	br	7c24 <__any_on+0x14>
    7c8c:	0005883a 	mov	r2,zero
    7c90:	f800283a 	ret

00007c94 <_putc_r>:
    7c94:	defffc04 	addi	sp,sp,-16
    7c98:	dc000215 	stw	r16,8(sp)
    7c9c:	dfc00315 	stw	ra,12(sp)
    7ca0:	2021883a 	mov	r16,r4
    7ca4:	20000226 	beq	r4,zero,7cb0 <_putc_r+0x1c>
    7ca8:	20800e17 	ldw	r2,56(r4)
    7cac:	10001d26 	beq	r2,zero,7d24 <_putc_r+0x90>
    7cb0:	30800217 	ldw	r2,8(r6)
    7cb4:	10bfffc4 	addi	r2,r2,-1
    7cb8:	30800215 	stw	r2,8(r6)
    7cbc:	10000a16 	blt	r2,zero,7ce8 <_putc_r+0x54>
    7cc0:	30800017 	ldw	r2,0(r6)
    7cc4:	11400005 	stb	r5,0(r2)
    7cc8:	30800017 	ldw	r2,0(r6)
    7ccc:	10c00044 	addi	r3,r2,1
    7cd0:	10800003 	ldbu	r2,0(r2)
    7cd4:	30c00015 	stw	r3,0(r6)
    7cd8:	dfc00317 	ldw	ra,12(sp)
    7cdc:	dc000217 	ldw	r16,8(sp)
    7ce0:	dec00404 	addi	sp,sp,16
    7ce4:	f800283a 	ret
    7ce8:	30c00617 	ldw	r3,24(r6)
    7cec:	10c01316 	blt	r2,r3,7d3c <_putc_r+0xa8>
    7cf0:	30800017 	ldw	r2,0(r6)
    7cf4:	01000284 	movi	r4,10
    7cf8:	11400005 	stb	r5,0(r2)
    7cfc:	30c00017 	ldw	r3,0(r6)
    7d00:	19400003 	ldbu	r5,0(r3)
    7d04:	29000d26 	beq	r5,r4,7d3c <_putc_r+0xa8>
    7d08:	18c00044 	addi	r3,r3,1
    7d0c:	2805883a 	mov	r2,r5
    7d10:	30c00015 	stw	r3,0(r6)
    7d14:	dfc00317 	ldw	ra,12(sp)
    7d18:	dc000217 	ldw	r16,8(sp)
    7d1c:	dec00404 	addi	sp,sp,16
    7d20:	f800283a 	ret
    7d24:	d9400015 	stw	r5,0(sp)
    7d28:	d9800115 	stw	r6,4(sp)
    7d2c:	00051040 	call	5104 <__sinit>
    7d30:	d9800117 	ldw	r6,4(sp)
    7d34:	d9400017 	ldw	r5,0(sp)
    7d38:	003fdd06 	br	7cb0 <_putc_r+0x1c>
    7d3c:	8009883a 	mov	r4,r16
    7d40:	dfc00317 	ldw	ra,12(sp)
    7d44:	dc000217 	ldw	r16,8(sp)
    7d48:	dec00404 	addi	sp,sp,16
    7d4c:	00087741 	jmpi	8774 <__swbuf_r>

00007d50 <putc>:
    7d50:	defffc04 	addi	sp,sp,-16
    7d54:	dc400115 	stw	r17,4(sp)
    7d58:	04400074 	movhi	r17,1
    7d5c:	8c7eb504 	addi	r17,r17,-1324
    7d60:	88800017 	ldw	r2,0(r17)
    7d64:	dc800215 	stw	r18,8(sp)
    7d68:	dc000015 	stw	r16,0(sp)
    7d6c:	dfc00315 	stw	ra,12(sp)
    7d70:	2025883a 	mov	r18,r4
    7d74:	2821883a 	mov	r16,r5
    7d78:	10000226 	beq	r2,zero,7d84 <putc+0x34>
    7d7c:	10c00e17 	ldw	r3,56(r2)
    7d80:	18002126 	beq	r3,zero,7e08 <putc+0xb8>
    7d84:	80800217 	ldw	r2,8(r16)
    7d88:	10bfffc4 	addi	r2,r2,-1
    7d8c:	80800215 	stw	r2,8(r16)
    7d90:	10000c16 	blt	r2,zero,7dc4 <putc+0x74>
    7d94:	80800017 	ldw	r2,0(r16)
    7d98:	14800005 	stb	r18,0(r2)
    7d9c:	80800017 	ldw	r2,0(r16)
    7da0:	10c00044 	addi	r3,r2,1
    7da4:	10800003 	ldbu	r2,0(r2)
    7da8:	80c00015 	stw	r3,0(r16)
    7dac:	dfc00317 	ldw	ra,12(sp)
    7db0:	dc800217 	ldw	r18,8(sp)
    7db4:	dc400117 	ldw	r17,4(sp)
    7db8:	dc000017 	ldw	r16,0(sp)
    7dbc:	dec00404 	addi	sp,sp,16
    7dc0:	f800283a 	ret
    7dc4:	80c00617 	ldw	r3,24(r16)
    7dc8:	10c01216 	blt	r2,r3,7e14 <putc+0xc4>
    7dcc:	80800017 	ldw	r2,0(r16)
    7dd0:	01000284 	movi	r4,10
    7dd4:	14800005 	stb	r18,0(r2)
    7dd8:	80c00017 	ldw	r3,0(r16)
    7ddc:	19400003 	ldbu	r5,0(r3)
    7de0:	29001526 	beq	r5,r4,7e38 <putc+0xe8>
    7de4:	18c00044 	addi	r3,r3,1
    7de8:	2805883a 	mov	r2,r5
    7dec:	80c00015 	stw	r3,0(r16)
    7df0:	dfc00317 	ldw	ra,12(sp)
    7df4:	dc800217 	ldw	r18,8(sp)
    7df8:	dc400117 	ldw	r17,4(sp)
    7dfc:	dc000017 	ldw	r16,0(sp)
    7e00:	dec00404 	addi	sp,sp,16
    7e04:	f800283a 	ret
    7e08:	1009883a 	mov	r4,r2
    7e0c:	00051040 	call	5104 <__sinit>
    7e10:	003fdc06 	br	7d84 <putc+0x34>
    7e14:	89000017 	ldw	r4,0(r17)
    7e18:	900b883a 	mov	r5,r18
    7e1c:	800d883a 	mov	r6,r16
    7e20:	dfc00317 	ldw	ra,12(sp)
    7e24:	dc800217 	ldw	r18,8(sp)
    7e28:	dc400117 	ldw	r17,4(sp)
    7e2c:	dc000017 	ldw	r16,0(sp)
    7e30:	dec00404 	addi	sp,sp,16
    7e34:	00087741 	jmpi	8774 <__swbuf_r>
    7e38:	89000017 	ldw	r4,0(r17)
    7e3c:	003ff706 	br	7e1c <putc+0xcc>

00007e40 <_realloc_r>:
    7e40:	defff504 	addi	sp,sp,-44
    7e44:	dd400615 	stw	r21,24(sp)
    7e48:	dc800315 	stw	r18,12(sp)
    7e4c:	dc000115 	stw	r16,4(sp)
    7e50:	dfc00a15 	stw	ra,40(sp)
    7e54:	df000915 	stw	fp,36(sp)
    7e58:	ddc00815 	stw	r23,32(sp)
    7e5c:	dd800715 	stw	r22,28(sp)
    7e60:	dd000515 	stw	r20,20(sp)
    7e64:	dcc00415 	stw	r19,16(sp)
    7e68:	dc400215 	stw	r17,8(sp)
    7e6c:	2821883a 	mov	r16,r5
    7e70:	202b883a 	mov	r21,r4
    7e74:	3025883a 	mov	r18,r6
    7e78:	28009626 	beq	r5,zero,80d4 <_realloc_r+0x294>
    7e7c:	000b46c0 	call	b46c <__malloc_lock>
    7e80:	80bfff17 	ldw	r2,-4(r16)
    7e84:	04ffff04 	movi	r19,-4
    7e88:	90c002c4 	addi	r3,r18,11
    7e8c:	01000584 	movi	r4,22
    7e90:	85bffe04 	addi	r22,r16,-8
    7e94:	14e6703a 	and	r19,r2,r19
    7e98:	20c0372e 	bgeu	r4,r3,7f78 <_realloc_r+0x138>
    7e9c:	047ffe04 	movi	r17,-8
    7ea0:	1c62703a 	and	r17,r3,r17
    7ea4:	8807883a 	mov	r3,r17
    7ea8:	88005a16 	blt	r17,zero,8014 <_realloc_r+0x1d4>
    7eac:	8c805936 	bltu	r17,r18,8014 <_realloc_r+0x1d4>
    7eb0:	98c0340e 	bge	r19,r3,7f84 <_realloc_r+0x144>
    7eb4:	07000074 	movhi	fp,1
    7eb8:	e7388a04 	addi	fp,fp,-7640
    7ebc:	e1400217 	ldw	r5,8(fp)
    7ec0:	b4c9883a 	add	r4,r22,r19
    7ec4:	29009026 	beq	r5,r4,8108 <_realloc_r+0x2c8>
    7ec8:	21800117 	ldw	r6,4(r4)
    7ecc:	01ffff84 	movi	r7,-2
    7ed0:	31ce703a 	and	r7,r6,r7
    7ed4:	21cf883a 	add	r7,r4,r7
    7ed8:	39c00117 	ldw	r7,4(r7)
    7edc:	39c0004c 	andi	r7,r7,1
    7ee0:	38004326 	beq	r7,zero,7ff0 <_realloc_r+0x1b0>
    7ee4:	000d883a 	mov	r6,zero
    7ee8:	0009883a 	mov	r4,zero
    7eec:	1080004c 	andi	r2,r2,1
    7ef0:	10005a1e 	bne	r2,zero,805c <_realloc_r+0x21c>
    7ef4:	85fffe17 	ldw	r23,-8(r16)
    7ef8:	00bfff04 	movi	r2,-4
    7efc:	b5efc83a 	sub	r23,r22,r23
    7f00:	b9c00117 	ldw	r7,4(r23)
    7f04:	388e703a 	and	r7,r7,r2
    7f08:	3ccf883a 	add	r7,r7,r19
    7f0c:	20005226 	beq	r4,zero,8058 <_realloc_r+0x218>
    7f10:	31e9883a 	add	r20,r6,r7
    7f14:	2140c726 	beq	r4,r5,8234 <_realloc_r+0x3f4>
    7f18:	a0c04f16 	blt	r20,r3,8058 <_realloc_r+0x218>
    7f1c:	20800317 	ldw	r2,12(r4)
    7f20:	20c00217 	ldw	r3,8(r4)
    7f24:	99bfff04 	addi	r6,r19,-4
    7f28:	01000904 	movi	r4,36
    7f2c:	18800315 	stw	r2,12(r3)
    7f30:	10c00215 	stw	r3,8(r2)
    7f34:	b8c00217 	ldw	r3,8(r23)
    7f38:	b8800317 	ldw	r2,12(r23)
    7f3c:	bc800204 	addi	r18,r23,8
    7f40:	18800315 	stw	r2,12(r3)
    7f44:	10c00215 	stw	r3,8(r2)
    7f48:	2180ed36 	bltu	r4,r6,8300 <_realloc_r+0x4c0>
    7f4c:	008004c4 	movi	r2,19
    7f50:	11809b2e 	bgeu	r2,r6,81c0 <_realloc_r+0x380>
    7f54:	80800017 	ldw	r2,0(r16)
    7f58:	b8800215 	stw	r2,8(r23)
    7f5c:	80800117 	ldw	r2,4(r16)
    7f60:	b8800315 	stw	r2,12(r23)
    7f64:	008006c4 	movi	r2,27
    7f68:	1180f936 	bltu	r2,r6,8350 <_realloc_r+0x510>
    7f6c:	b8800404 	addi	r2,r23,16
    7f70:	80c00204 	addi	r3,r16,8
    7f74:	00009406 	br	81c8 <_realloc_r+0x388>
    7f78:	00c00404 	movi	r3,16
    7f7c:	1823883a 	mov	r17,r3
    7f80:	003fca06 	br	7eac <_realloc_r+0x6c>
    7f84:	9829883a 	mov	r20,r19
    7f88:	a447c83a 	sub	r3,r20,r17
    7f8c:	010003c4 	movi	r4,15
    7f90:	1080004c 	andi	r2,r2,1
    7f94:	20c02336 	bltu	r4,r3,8024 <_realloc_r+0x1e4>
    7f98:	1504b03a 	or	r2,r2,r20
    7f9c:	b0800115 	stw	r2,4(r22)
    7fa0:	b52d883a 	add	r22,r22,r20
    7fa4:	b0800117 	ldw	r2,4(r22)
    7fa8:	10800054 	ori	r2,r2,1
    7fac:	b0800115 	stw	r2,4(r22)
    7fb0:	a809883a 	mov	r4,r21
    7fb4:	000b48c0 	call	b48c <__malloc_unlock>
    7fb8:	8025883a 	mov	r18,r16
    7fbc:	9005883a 	mov	r2,r18
    7fc0:	dfc00a17 	ldw	ra,40(sp)
    7fc4:	df000917 	ldw	fp,36(sp)
    7fc8:	ddc00817 	ldw	r23,32(sp)
    7fcc:	dd800717 	ldw	r22,28(sp)
    7fd0:	dd400617 	ldw	r21,24(sp)
    7fd4:	dd000517 	ldw	r20,20(sp)
    7fd8:	dcc00417 	ldw	r19,16(sp)
    7fdc:	dc800317 	ldw	r18,12(sp)
    7fe0:	dc400217 	ldw	r17,8(sp)
    7fe4:	dc000117 	ldw	r16,4(sp)
    7fe8:	dec00b04 	addi	sp,sp,44
    7fec:	f800283a 	ret
    7ff0:	01ffff04 	movi	r7,-4
    7ff4:	31cc703a 	and	r6,r6,r7
    7ff8:	34e9883a 	add	r20,r6,r19
    7ffc:	a0ffbb16 	blt	r20,r3,7eec <_realloc_r+0xac>
    8000:	20c00317 	ldw	r3,12(r4)
    8004:	21000217 	ldw	r4,8(r4)
    8008:	20c00315 	stw	r3,12(r4)
    800c:	19000215 	stw	r4,8(r3)
    8010:	003fdd06 	br	7f88 <_realloc_r+0x148>
    8014:	00800304 	movi	r2,12
    8018:	a8800015 	stw	r2,0(r21)
    801c:	0025883a 	mov	r18,zero
    8020:	003fe606 	br	7fbc <_realloc_r+0x17c>
    8024:	1444b03a 	or	r2,r2,r17
    8028:	b0800115 	stw	r2,4(r22)
    802c:	b44b883a 	add	r5,r22,r17
    8030:	18800054 	ori	r2,r3,1
    8034:	28800115 	stw	r2,4(r5)
    8038:	28c7883a 	add	r3,r5,r3
    803c:	18800117 	ldw	r2,4(r3)
    8040:	a809883a 	mov	r4,r21
    8044:	29400204 	addi	r5,r5,8
    8048:	10800054 	ori	r2,r2,1
    804c:	18800115 	stw	r2,4(r3)
    8050:	00054880 	call	5488 <_free_r>
    8054:	003fd606 	br	7fb0 <_realloc_r+0x170>
    8058:	38c0330e 	bge	r7,r3,8128 <_realloc_r+0x2e8>
    805c:	900b883a 	mov	r5,r18
    8060:	a809883a 	mov	r4,r21
    8064:	00060200 	call	6020 <_malloc_r>
    8068:	1025883a 	mov	r18,r2
    806c:	10001626 	beq	r2,zero,80c8 <_realloc_r+0x288>
    8070:	80bfff17 	ldw	r2,-4(r16)
    8074:	00ffff84 	movi	r3,-2
    8078:	913ffe04 	addi	r4,r18,-8
    807c:	10c6703a 	and	r3,r2,r3
    8080:	b0c7883a 	add	r3,r22,r3
    8084:	20c09926 	beq	r4,r3,82ec <_realloc_r+0x4ac>
    8088:	99bfff04 	addi	r6,r19,-4
    808c:	00800904 	movi	r2,36
    8090:	11806436 	bltu	r2,r6,8224 <_realloc_r+0x3e4>
    8094:	00c004c4 	movi	r3,19
    8098:	19804036 	bltu	r3,r6,819c <_realloc_r+0x35c>
    809c:	9005883a 	mov	r2,r18
    80a0:	8007883a 	mov	r3,r16
    80a4:	19000017 	ldw	r4,0(r3)
    80a8:	11000015 	stw	r4,0(r2)
    80ac:	19000117 	ldw	r4,4(r3)
    80b0:	11000115 	stw	r4,4(r2)
    80b4:	18c00217 	ldw	r3,8(r3)
    80b8:	10c00215 	stw	r3,8(r2)
    80bc:	a809883a 	mov	r4,r21
    80c0:	800b883a 	mov	r5,r16
    80c4:	00054880 	call	5488 <_free_r>
    80c8:	a809883a 	mov	r4,r21
    80cc:	000b48c0 	call	b48c <__malloc_unlock>
    80d0:	003fba06 	br	7fbc <_realloc_r+0x17c>
    80d4:	300b883a 	mov	r5,r6
    80d8:	dfc00a17 	ldw	ra,40(sp)
    80dc:	df000917 	ldw	fp,36(sp)
    80e0:	ddc00817 	ldw	r23,32(sp)
    80e4:	dd800717 	ldw	r22,28(sp)
    80e8:	dd400617 	ldw	r21,24(sp)
    80ec:	dd000517 	ldw	r20,20(sp)
    80f0:	dcc00417 	ldw	r19,16(sp)
    80f4:	dc800317 	ldw	r18,12(sp)
    80f8:	dc400217 	ldw	r17,8(sp)
    80fc:	dc000117 	ldw	r16,4(sp)
    8100:	dec00b04 	addi	sp,sp,44
    8104:	00060201 	jmpi	6020 <_malloc_r>
    8108:	29800117 	ldw	r6,4(r5)
    810c:	013fff04 	movi	r4,-4
    8110:	89c00404 	addi	r7,r17,16
    8114:	310c703a 	and	r6,r6,r4
    8118:	34c9883a 	add	r4,r6,r19
    811c:	21c0340e 	bge	r4,r7,81f0 <_realloc_r+0x3b0>
    8120:	2809883a 	mov	r4,r5
    8124:	003f7106 	br	7eec <_realloc_r+0xac>
    8128:	b8800317 	ldw	r2,12(r23)
    812c:	b8c00217 	ldw	r3,8(r23)
    8130:	99bfff04 	addi	r6,r19,-4
    8134:	01000904 	movi	r4,36
    8138:	18800315 	stw	r2,12(r3)
    813c:	10c00215 	stw	r3,8(r2)
    8140:	bc800204 	addi	r18,r23,8
    8144:	21807836 	bltu	r4,r6,8328 <_realloc_r+0x4e8>
    8148:	008004c4 	movi	r2,19
    814c:	1180732e 	bgeu	r2,r6,831c <_realloc_r+0x4dc>
    8150:	80800017 	ldw	r2,0(r16)
    8154:	b8800215 	stw	r2,8(r23)
    8158:	80800117 	ldw	r2,4(r16)
    815c:	b8800315 	stw	r2,12(r23)
    8160:	008006c4 	movi	r2,27
    8164:	11808936 	bltu	r2,r6,838c <_realloc_r+0x54c>
    8168:	b8800404 	addi	r2,r23,16
    816c:	80c00204 	addi	r3,r16,8
    8170:	19000017 	ldw	r4,0(r3)
    8174:	9021883a 	mov	r16,r18
    8178:	3829883a 	mov	r20,r7
    817c:	11000015 	stw	r4,0(r2)
    8180:	19000117 	ldw	r4,4(r3)
    8184:	b82d883a 	mov	r22,r23
    8188:	11000115 	stw	r4,4(r2)
    818c:	18c00217 	ldw	r3,8(r3)
    8190:	10c00215 	stw	r3,8(r2)
    8194:	b8800117 	ldw	r2,4(r23)
    8198:	003f7b06 	br	7f88 <_realloc_r+0x148>
    819c:	80c00017 	ldw	r3,0(r16)
    81a0:	90c00015 	stw	r3,0(r18)
    81a4:	80c00117 	ldw	r3,4(r16)
    81a8:	90c00115 	stw	r3,4(r18)
    81ac:	00c006c4 	movi	r3,27
    81b0:	19804636 	bltu	r3,r6,82cc <_realloc_r+0x48c>
    81b4:	90800204 	addi	r2,r18,8
    81b8:	80c00204 	addi	r3,r16,8
    81bc:	003fb906 	br	80a4 <_realloc_r+0x264>
    81c0:	9005883a 	mov	r2,r18
    81c4:	8007883a 	mov	r3,r16
    81c8:	19000017 	ldw	r4,0(r3)
    81cc:	9021883a 	mov	r16,r18
    81d0:	b82d883a 	mov	r22,r23
    81d4:	11000015 	stw	r4,0(r2)
    81d8:	19000117 	ldw	r4,4(r3)
    81dc:	11000115 	stw	r4,4(r2)
    81e0:	18c00217 	ldw	r3,8(r3)
    81e4:	10c00215 	stw	r3,8(r2)
    81e8:	b8800117 	ldw	r2,4(r23)
    81ec:	003f6606 	br	7f88 <_realloc_r+0x148>
    81f0:	2445c83a 	sub	r2,r4,r17
    81f4:	b46d883a 	add	r22,r22,r17
    81f8:	10800054 	ori	r2,r2,1
    81fc:	b0800115 	stw	r2,4(r22)
    8200:	80bfff17 	ldw	r2,-4(r16)
    8204:	a809883a 	mov	r4,r21
    8208:	e5800215 	stw	r22,8(fp)
    820c:	1080004c 	andi	r2,r2,1
    8210:	88a2b03a 	or	r17,r17,r2
    8214:	847fff15 	stw	r17,-4(r16)
    8218:	000b48c0 	call	b48c <__malloc_unlock>
    821c:	8025883a 	mov	r18,r16
    8220:	003f6606 	br	7fbc <_realloc_r+0x17c>
    8224:	9009883a 	mov	r4,r18
    8228:	800b883a 	mov	r5,r16
    822c:	00069dc0 	call	69dc <memmove>
    8230:	003fa206 	br	80bc <_realloc_r+0x27c>
    8234:	88800404 	addi	r2,r17,16
    8238:	a0bf8716 	blt	r20,r2,8058 <_realloc_r+0x218>
    823c:	b8800317 	ldw	r2,12(r23)
    8240:	b8c00217 	ldw	r3,8(r23)
    8244:	99bfff04 	addi	r6,r19,-4
    8248:	01000904 	movi	r4,36
    824c:	18800315 	stw	r2,12(r3)
    8250:	10c00215 	stw	r3,8(r2)
    8254:	bc800204 	addi	r18,r23,8
    8258:	21806536 	bltu	r4,r6,83f0 <_realloc_r+0x5b0>
    825c:	008004c4 	movi	r2,19
    8260:	1180592e 	bgeu	r2,r6,83c8 <_realloc_r+0x588>
    8264:	80800017 	ldw	r2,0(r16)
    8268:	b8800215 	stw	r2,8(r23)
    826c:	80800117 	ldw	r2,4(r16)
    8270:	b8800315 	stw	r2,12(r23)
    8274:	008006c4 	movi	r2,27
    8278:	11806136 	bltu	r2,r6,8400 <_realloc_r+0x5c0>
    827c:	b8800404 	addi	r2,r23,16
    8280:	80c00204 	addi	r3,r16,8
    8284:	19000017 	ldw	r4,0(r3)
    8288:	11000015 	stw	r4,0(r2)
    828c:	19000117 	ldw	r4,4(r3)
    8290:	11000115 	stw	r4,4(r2)
    8294:	18c00217 	ldw	r3,8(r3)
    8298:	10c00215 	stw	r3,8(r2)
    829c:	a447c83a 	sub	r3,r20,r17
    82a0:	bc45883a 	add	r2,r23,r17
    82a4:	18c00054 	ori	r3,r3,1
    82a8:	10c00115 	stw	r3,4(r2)
    82ac:	b8c00117 	ldw	r3,4(r23)
    82b0:	e0800215 	stw	r2,8(fp)
    82b4:	a809883a 	mov	r4,r21
    82b8:	1880004c 	andi	r2,r3,1
    82bc:	88a2b03a 	or	r17,r17,r2
    82c0:	bc400115 	stw	r17,4(r23)
    82c4:	000b48c0 	call	b48c <__malloc_unlock>
    82c8:	003f3c06 	br	7fbc <_realloc_r+0x17c>
    82cc:	80c00217 	ldw	r3,8(r16)
    82d0:	90c00215 	stw	r3,8(r18)
    82d4:	80c00317 	ldw	r3,12(r16)
    82d8:	90c00315 	stw	r3,12(r18)
    82dc:	30802426 	beq	r6,r2,8370 <_realloc_r+0x530>
    82e0:	90800404 	addi	r2,r18,16
    82e4:	80c00404 	addi	r3,r16,16
    82e8:	003f6e06 	br	80a4 <_realloc_r+0x264>
    82ec:	953fff17 	ldw	r20,-4(r18)
    82f0:	00ffff04 	movi	r3,-4
    82f4:	a0e8703a 	and	r20,r20,r3
    82f8:	a4e9883a 	add	r20,r20,r19
    82fc:	003f2206 	br	7f88 <_realloc_r+0x148>
    8300:	800b883a 	mov	r5,r16
    8304:	9009883a 	mov	r4,r18
    8308:	00069dc0 	call	69dc <memmove>
    830c:	9021883a 	mov	r16,r18
    8310:	b8800117 	ldw	r2,4(r23)
    8314:	b82d883a 	mov	r22,r23
    8318:	003f1b06 	br	7f88 <_realloc_r+0x148>
    831c:	9005883a 	mov	r2,r18
    8320:	8007883a 	mov	r3,r16
    8324:	003f9206 	br	8170 <_realloc_r+0x330>
    8328:	800b883a 	mov	r5,r16
    832c:	9009883a 	mov	r4,r18
    8330:	d9c00015 	stw	r7,0(sp)
    8334:	00069dc0 	call	69dc <memmove>
    8338:	d9c00017 	ldw	r7,0(sp)
    833c:	9021883a 	mov	r16,r18
    8340:	b8800117 	ldw	r2,4(r23)
    8344:	3829883a 	mov	r20,r7
    8348:	b82d883a 	mov	r22,r23
    834c:	003f0e06 	br	7f88 <_realloc_r+0x148>
    8350:	80800217 	ldw	r2,8(r16)
    8354:	b8800415 	stw	r2,16(r23)
    8358:	80800317 	ldw	r2,12(r16)
    835c:	b8800515 	stw	r2,20(r23)
    8360:	31001226 	beq	r6,r4,83ac <_realloc_r+0x56c>
    8364:	b8800604 	addi	r2,r23,24
    8368:	80c00404 	addi	r3,r16,16
    836c:	003f9606 	br	81c8 <_realloc_r+0x388>
    8370:	81000417 	ldw	r4,16(r16)
    8374:	90800604 	addi	r2,r18,24
    8378:	80c00604 	addi	r3,r16,24
    837c:	91000415 	stw	r4,16(r18)
    8380:	81000517 	ldw	r4,20(r16)
    8384:	91000515 	stw	r4,20(r18)
    8388:	003f4606 	br	80a4 <_realloc_r+0x264>
    838c:	80800217 	ldw	r2,8(r16)
    8390:	b8800415 	stw	r2,16(r23)
    8394:	80800317 	ldw	r2,12(r16)
    8398:	b8800515 	stw	r2,20(r23)
    839c:	31000d26 	beq	r6,r4,83d4 <_realloc_r+0x594>
    83a0:	b8800604 	addi	r2,r23,24
    83a4:	80c00404 	addi	r3,r16,16
    83a8:	003f7106 	br	8170 <_realloc_r+0x330>
    83ac:	81000417 	ldw	r4,16(r16)
    83b0:	b8800804 	addi	r2,r23,32
    83b4:	80c00604 	addi	r3,r16,24
    83b8:	b9000615 	stw	r4,24(r23)
    83bc:	81000517 	ldw	r4,20(r16)
    83c0:	b9000715 	stw	r4,28(r23)
    83c4:	003f8006 	br	81c8 <_realloc_r+0x388>
    83c8:	9005883a 	mov	r2,r18
    83cc:	8007883a 	mov	r3,r16
    83d0:	003fac06 	br	8284 <_realloc_r+0x444>
    83d4:	81000417 	ldw	r4,16(r16)
    83d8:	b8800804 	addi	r2,r23,32
    83dc:	80c00604 	addi	r3,r16,24
    83e0:	b9000615 	stw	r4,24(r23)
    83e4:	81000517 	ldw	r4,20(r16)
    83e8:	b9000715 	stw	r4,28(r23)
    83ec:	003f6006 	br	8170 <_realloc_r+0x330>
    83f0:	9009883a 	mov	r4,r18
    83f4:	800b883a 	mov	r5,r16
    83f8:	00069dc0 	call	69dc <memmove>
    83fc:	003fa706 	br	829c <_realloc_r+0x45c>
    8400:	80800217 	ldw	r2,8(r16)
    8404:	b8800415 	stw	r2,16(r23)
    8408:	80800317 	ldw	r2,12(r16)
    840c:	b8800515 	stw	r2,20(r23)
    8410:	31000326 	beq	r6,r4,8420 <_realloc_r+0x5e0>
    8414:	b8800604 	addi	r2,r23,24
    8418:	80c00404 	addi	r3,r16,16
    841c:	003f9906 	br	8284 <_realloc_r+0x444>
    8420:	81000417 	ldw	r4,16(r16)
    8424:	b8800804 	addi	r2,r23,32
    8428:	80c00604 	addi	r3,r16,24
    842c:	b9000615 	stw	r4,24(r23)
    8430:	81000517 	ldw	r4,20(r16)
    8434:	b9000715 	stw	r4,28(r23)
    8438:	003f9206 	br	8284 <_realloc_r+0x444>

0000843c <__isinfd>:
    843c:	0105c83a 	sub	r2,zero,r4
    8440:	1108b03a 	or	r4,r2,r4
    8444:	2004d7fa 	srli	r2,r4,31
    8448:	00e00034 	movhi	r3,32768
    844c:	18ffffc4 	addi	r3,r3,-1
    8450:	28ca703a 	and	r5,r5,r3
    8454:	1144b03a 	or	r2,r2,r5
    8458:	00dffc34 	movhi	r3,32752
    845c:	1885c83a 	sub	r2,r3,r2
    8460:	0087c83a 	sub	r3,zero,r2
    8464:	1884b03a 	or	r2,r3,r2
    8468:	1005d7fa 	srai	r2,r2,31
    846c:	10800044 	addi	r2,r2,1
    8470:	f800283a 	ret

00008474 <__isnand>:
    8474:	0105c83a 	sub	r2,zero,r4
    8478:	1108b03a 	or	r4,r2,r4
    847c:	2004d7fa 	srli	r2,r4,31
    8480:	00e00034 	movhi	r3,32768
    8484:	18ffffc4 	addi	r3,r3,-1
    8488:	28ca703a 	and	r5,r5,r3
    848c:	1144b03a 	or	r2,r2,r5
    8490:	00dffc34 	movhi	r3,32752
    8494:	1885c83a 	sub	r2,r3,r2
    8498:	1004d7fa 	srli	r2,r2,31
    849c:	f800283a 	ret

000084a0 <_sbrk_r>:
    84a0:	defffd04 	addi	sp,sp,-12
    84a4:	dc400115 	stw	r17,4(sp)
    84a8:	dc000015 	stw	r16,0(sp)
    84ac:	2023883a 	mov	r17,r4
    84b0:	04000074 	movhi	r16,1
    84b4:	84060904 	addi	r16,r16,6180
    84b8:	2809883a 	mov	r4,r5
    84bc:	dfc00215 	stw	ra,8(sp)
    84c0:	80000015 	stw	zero,0(r16)
    84c4:	000b6700 	call	b670 <sbrk>
    84c8:	00ffffc4 	movi	r3,-1
    84cc:	10c00526 	beq	r2,r3,84e4 <_sbrk_r+0x44>
    84d0:	dfc00217 	ldw	ra,8(sp)
    84d4:	dc400117 	ldw	r17,4(sp)
    84d8:	dc000017 	ldw	r16,0(sp)
    84dc:	dec00304 	addi	sp,sp,12
    84e0:	f800283a 	ret
    84e4:	80c00017 	ldw	r3,0(r16)
    84e8:	183ff926 	beq	r3,zero,84d0 <_sbrk_r+0x30>
    84ec:	88c00015 	stw	r3,0(r17)
    84f0:	dfc00217 	ldw	ra,8(sp)
    84f4:	dc400117 	ldw	r17,4(sp)
    84f8:	dc000017 	ldw	r16,0(sp)
    84fc:	dec00304 	addi	sp,sp,12
    8500:	f800283a 	ret

00008504 <__sread>:
    8504:	defffe04 	addi	sp,sp,-8
    8508:	dc000015 	stw	r16,0(sp)
    850c:	2821883a 	mov	r16,r5
    8510:	2940038f 	ldh	r5,14(r5)
    8514:	dfc00115 	stw	ra,4(sp)
    8518:	0008cf00 	call	8cf0 <_read_r>
    851c:	10000716 	blt	r2,zero,853c <__sread+0x38>
    8520:	80c01417 	ldw	r3,80(r16)
    8524:	1887883a 	add	r3,r3,r2
    8528:	80c01415 	stw	r3,80(r16)
    852c:	dfc00117 	ldw	ra,4(sp)
    8530:	dc000017 	ldw	r16,0(sp)
    8534:	dec00204 	addi	sp,sp,8
    8538:	f800283a 	ret
    853c:	80c0030b 	ldhu	r3,12(r16)
    8540:	18fbffcc 	andi	r3,r3,61439
    8544:	80c0030d 	sth	r3,12(r16)
    8548:	dfc00117 	ldw	ra,4(sp)
    854c:	dc000017 	ldw	r16,0(sp)
    8550:	dec00204 	addi	sp,sp,8
    8554:	f800283a 	ret

00008558 <__swrite>:
    8558:	2880030b 	ldhu	r2,12(r5)
    855c:	defffb04 	addi	sp,sp,-20
    8560:	dcc00315 	stw	r19,12(sp)
    8564:	10c0400c 	andi	r3,r2,256
    8568:	18ffffcc 	andi	r3,r3,65535
    856c:	18e0001c 	xori	r3,r3,32768
    8570:	dc800215 	stw	r18,8(sp)
    8574:	dc400115 	stw	r17,4(sp)
    8578:	dc000015 	stw	r16,0(sp)
    857c:	dfc00415 	stw	ra,16(sp)
    8580:	18e00004 	addi	r3,r3,-32768
    8584:	2821883a 	mov	r16,r5
    8588:	2027883a 	mov	r19,r4
    858c:	3025883a 	mov	r18,r6
    8590:	3823883a 	mov	r17,r7
    8594:	18000526 	beq	r3,zero,85ac <__swrite+0x54>
    8598:	2940038f 	ldh	r5,14(r5)
    859c:	000d883a 	mov	r6,zero
    85a0:	01c00084 	movi	r7,2
    85a4:	0008c840 	call	8c84 <_lseek_r>
    85a8:	8080030b 	ldhu	r2,12(r16)
    85ac:	8140038f 	ldh	r5,14(r16)
    85b0:	10bbffcc 	andi	r2,r2,61439
    85b4:	9809883a 	mov	r4,r19
    85b8:	900d883a 	mov	r6,r18
    85bc:	880f883a 	mov	r7,r17
    85c0:	8080030d 	sth	r2,12(r16)
    85c4:	dfc00417 	ldw	ra,16(sp)
    85c8:	dcc00317 	ldw	r19,12(sp)
    85cc:	dc800217 	ldw	r18,8(sp)
    85d0:	dc400117 	ldw	r17,4(sp)
    85d4:	dc000017 	ldw	r16,0(sp)
    85d8:	dec00504 	addi	sp,sp,20
    85dc:	00088cc1 	jmpi	88cc <_write_r>

000085e0 <__sseek>:
    85e0:	defffe04 	addi	sp,sp,-8
    85e4:	dc000015 	stw	r16,0(sp)
    85e8:	2821883a 	mov	r16,r5
    85ec:	2940038f 	ldh	r5,14(r5)
    85f0:	dfc00115 	stw	ra,4(sp)
    85f4:	0008c840 	call	8c84 <_lseek_r>
    85f8:	00ffffc4 	movi	r3,-1
    85fc:	10c00826 	beq	r2,r3,8620 <__sseek+0x40>
    8600:	80c0030b 	ldhu	r3,12(r16)
    8604:	80801415 	stw	r2,80(r16)
    8608:	18c40014 	ori	r3,r3,4096
    860c:	80c0030d 	sth	r3,12(r16)
    8610:	dfc00117 	ldw	ra,4(sp)
    8614:	dc000017 	ldw	r16,0(sp)
    8618:	dec00204 	addi	sp,sp,8
    861c:	f800283a 	ret
    8620:	80c0030b 	ldhu	r3,12(r16)
    8624:	18fbffcc 	andi	r3,r3,61439
    8628:	80c0030d 	sth	r3,12(r16)
    862c:	dfc00117 	ldw	ra,4(sp)
    8630:	dc000017 	ldw	r16,0(sp)
    8634:	dec00204 	addi	sp,sp,8
    8638:	f800283a 	ret

0000863c <__sclose>:
    863c:	2940038f 	ldh	r5,14(r5)
    8640:	0008a041 	jmpi	8a04 <_close_r>

00008644 <strcmp>:
    8644:	2904b03a 	or	r2,r5,r4
    8648:	108000cc 	andi	r2,r2,3
    864c:	1000171e 	bne	r2,zero,86ac <strcmp+0x68>
    8650:	20800017 	ldw	r2,0(r4)
    8654:	28c00017 	ldw	r3,0(r5)
    8658:	10c0141e 	bne	r2,r3,86ac <strcmp+0x68>
    865c:	027fbff4 	movhi	r9,65279
    8660:	4a7fbfc4 	addi	r9,r9,-257
    8664:	1247883a 	add	r3,r2,r9
    8668:	0084303a 	nor	r2,zero,r2
    866c:	1884703a 	and	r2,r3,r2
    8670:	02202074 	movhi	r8,32897
    8674:	42202004 	addi	r8,r8,-32640
    8678:	1204703a 	and	r2,r2,r8
    867c:	10000226 	beq	r2,zero,8688 <strcmp+0x44>
    8680:	00001706 	br	86e0 <strcmp+0x9c>
    8684:	3000161e 	bne	r6,zero,86e0 <strcmp+0x9c>
    8688:	21000104 	addi	r4,r4,4
    868c:	20800017 	ldw	r2,0(r4)
    8690:	29400104 	addi	r5,r5,4
    8694:	28c00017 	ldw	r3,0(r5)
    8698:	124f883a 	add	r7,r2,r9
    869c:	008c303a 	nor	r6,zero,r2
    86a0:	398c703a 	and	r6,r7,r6
    86a4:	320c703a 	and	r6,r6,r8
    86a8:	10fff626 	beq	r2,r3,8684 <strcmp+0x40>
    86ac:	20800007 	ldb	r2,0(r4)
    86b0:	1000051e 	bne	r2,zero,86c8 <strcmp+0x84>
    86b4:	00000606 	br	86d0 <strcmp+0x8c>
    86b8:	21000044 	addi	r4,r4,1
    86bc:	20800007 	ldb	r2,0(r4)
    86c0:	29400044 	addi	r5,r5,1
    86c4:	10000226 	beq	r2,zero,86d0 <strcmp+0x8c>
    86c8:	28c00007 	ldb	r3,0(r5)
    86cc:	10fffa26 	beq	r2,r3,86b8 <strcmp+0x74>
    86d0:	20c00003 	ldbu	r3,0(r4)
    86d4:	28800003 	ldbu	r2,0(r5)
    86d8:	1885c83a 	sub	r2,r3,r2
    86dc:	f800283a 	ret
    86e0:	0005883a 	mov	r2,zero
    86e4:	f800283a 	ret

000086e8 <strlen>:
    86e8:	208000cc 	andi	r2,r4,3
    86ec:	10001f1e 	bne	r2,zero,876c <strlen+0x84>
    86f0:	20800017 	ldw	r2,0(r4)
    86f4:	01ffbff4 	movhi	r7,65279
    86f8:	39ffbfc4 	addi	r7,r7,-257
    86fc:	01a02074 	movhi	r6,32897
    8700:	31a02004 	addi	r6,r6,-32640
    8704:	11c7883a 	add	r3,r2,r7
    8708:	0084303a 	nor	r2,zero,r2
    870c:	1886703a 	and	r3,r3,r2
    8710:	1986703a 	and	r3,r3,r6
    8714:	2005883a 	mov	r2,r4
    8718:	1800101e 	bne	r3,zero,875c <strlen+0x74>
    871c:	10800104 	addi	r2,r2,4
    8720:	10c00017 	ldw	r3,0(r2)
    8724:	19cb883a 	add	r5,r3,r7
    8728:	00c6303a 	nor	r3,zero,r3
    872c:	28c6703a 	and	r3,r5,r3
    8730:	1986703a 	and	r3,r3,r6
    8734:	1800091e 	bne	r3,zero,875c <strlen+0x74>
    8738:	10800104 	addi	r2,r2,4
    873c:	10c00017 	ldw	r3,0(r2)
    8740:	19cb883a 	add	r5,r3,r7
    8744:	00c6303a 	nor	r3,zero,r3
    8748:	28c6703a 	and	r3,r5,r3
    874c:	1986703a 	and	r3,r3,r6
    8750:	183ff226 	beq	r3,zero,871c <strlen+0x34>
    8754:	00000106 	br	875c <strlen+0x74>
    8758:	10800044 	addi	r2,r2,1
    875c:	10c00007 	ldb	r3,0(r2)
    8760:	183ffd1e 	bne	r3,zero,8758 <strlen+0x70>
    8764:	1105c83a 	sub	r2,r2,r4
    8768:	f800283a 	ret
    876c:	2005883a 	mov	r2,r4
    8770:	003ffa06 	br	875c <strlen+0x74>

00008774 <__swbuf_r>:
    8774:	defffc04 	addi	sp,sp,-16
    8778:	dc800215 	stw	r18,8(sp)
    877c:	dc400115 	stw	r17,4(sp)
    8780:	dc000015 	stw	r16,0(sp)
    8784:	dfc00315 	stw	ra,12(sp)
    8788:	2023883a 	mov	r17,r4
    878c:	2825883a 	mov	r18,r5
    8790:	3021883a 	mov	r16,r6
    8794:	20000226 	beq	r4,zero,87a0 <__swbuf_r+0x2c>
    8798:	20800e17 	ldw	r2,56(r4)
    879c:	10003b26 	beq	r2,zero,888c <__swbuf_r+0x118>
    87a0:	8080030b 	ldhu	r2,12(r16)
    87a4:	80c00617 	ldw	r3,24(r16)
    87a8:	1080020c 	andi	r2,r2,8
    87ac:	10bfffcc 	andi	r2,r2,65535
    87b0:	10a0001c 	xori	r2,r2,32768
    87b4:	80c00215 	stw	r3,8(r16)
    87b8:	10a00004 	addi	r2,r2,-32768
    87bc:	10002226 	beq	r2,zero,8848 <__swbuf_r+0xd4>
    87c0:	80800417 	ldw	r2,16(r16)
    87c4:	10002026 	beq	r2,zero,8848 <__swbuf_r+0xd4>
    87c8:	80c00017 	ldw	r3,0(r16)
    87cc:	81000517 	ldw	r4,20(r16)
    87d0:	94803fcc 	andi	r18,r18,255
    87d4:	1885c83a 	sub	r2,r3,r2
    87d8:	1100250e 	bge	r2,r4,8870 <__swbuf_r+0xfc>
    87dc:	10800044 	addi	r2,r2,1
    87e0:	81400217 	ldw	r5,8(r16)
    87e4:	19000044 	addi	r4,r3,1
    87e8:	297fffc4 	addi	r5,r5,-1
    87ec:	81400215 	stw	r5,8(r16)
    87f0:	1c800005 	stb	r18,0(r3)
    87f4:	80c00517 	ldw	r3,20(r16)
    87f8:	81000015 	stw	r4,0(r16)
    87fc:	18800c26 	beq	r3,r2,8830 <__swbuf_r+0xbc>
    8800:	8080030b 	ldhu	r2,12(r16)
    8804:	1080004c 	andi	r2,r2,1
    8808:	10000226 	beq	r2,zero,8814 <__swbuf_r+0xa0>
    880c:	00800284 	movi	r2,10
    8810:	90800726 	beq	r18,r2,8830 <__swbuf_r+0xbc>
    8814:	9005883a 	mov	r2,r18
    8818:	dfc00317 	ldw	ra,12(sp)
    881c:	dc800217 	ldw	r18,8(sp)
    8820:	dc400117 	ldw	r17,4(sp)
    8824:	dc000017 	ldw	r16,0(sp)
    8828:	dec00404 	addi	sp,sp,16
    882c:	f800283a 	ret
    8830:	8809883a 	mov	r4,r17
    8834:	800b883a 	mov	r5,r16
    8838:	0004e480 	call	4e48 <_fflush_r>
    883c:	103ff526 	beq	r2,zero,8814 <__swbuf_r+0xa0>
    8840:	04bfffc4 	movi	r18,-1
    8844:	003ff306 	br	8814 <__swbuf_r+0xa0>
    8848:	8809883a 	mov	r4,r17
    884c:	800b883a 	mov	r5,r16
    8850:	000347c0 	call	347c <__swsetup_r>
    8854:	10000f1e 	bne	r2,zero,8894 <__swbuf_r+0x120>
    8858:	80800417 	ldw	r2,16(r16)
    885c:	80c00017 	ldw	r3,0(r16)
    8860:	81000517 	ldw	r4,20(r16)
    8864:	94803fcc 	andi	r18,r18,255
    8868:	1885c83a 	sub	r2,r3,r2
    886c:	113fdb16 	blt	r2,r4,87dc <__swbuf_r+0x68>
    8870:	8809883a 	mov	r4,r17
    8874:	800b883a 	mov	r5,r16
    8878:	0004e480 	call	4e48 <_fflush_r>
    887c:	103ff01e 	bne	r2,zero,8840 <__swbuf_r+0xcc>
    8880:	80c00017 	ldw	r3,0(r16)
    8884:	00800044 	movi	r2,1
    8888:	003fd506 	br	87e0 <__swbuf_r+0x6c>
    888c:	00051040 	call	5104 <__sinit>
    8890:	003fc306 	br	87a0 <__swbuf_r+0x2c>
    8894:	8080030b 	ldhu	r2,12(r16)
    8898:	04bfffc4 	movi	r18,-1
    889c:	10801014 	ori	r2,r2,64
    88a0:	8080030d 	sth	r2,12(r16)
    88a4:	00800244 	movi	r2,9
    88a8:	88800015 	stw	r2,0(r17)
    88ac:	003fd906 	br	8814 <__swbuf_r+0xa0>

000088b0 <__swbuf>:
    88b0:	00c00074 	movhi	r3,1
    88b4:	18feb504 	addi	r3,r3,-1324
    88b8:	2005883a 	mov	r2,r4
    88bc:	19000017 	ldw	r4,0(r3)
    88c0:	280d883a 	mov	r6,r5
    88c4:	100b883a 	mov	r5,r2
    88c8:	00087741 	jmpi	8774 <__swbuf_r>

000088cc <_write_r>:
    88cc:	defffd04 	addi	sp,sp,-12
    88d0:	dc400115 	stw	r17,4(sp)
    88d4:	dc000015 	stw	r16,0(sp)
    88d8:	2023883a 	mov	r17,r4
    88dc:	04000074 	movhi	r16,1
    88e0:	84060904 	addi	r16,r16,6180
    88e4:	2809883a 	mov	r4,r5
    88e8:	300b883a 	mov	r5,r6
    88ec:	380d883a 	mov	r6,r7
    88f0:	dfc00215 	stw	ra,8(sp)
    88f4:	80000015 	stw	zero,0(r16)
    88f8:	000b7700 	call	b770 <write>
    88fc:	00ffffc4 	movi	r3,-1
    8900:	10c00526 	beq	r2,r3,8918 <_write_r+0x4c>
    8904:	dfc00217 	ldw	ra,8(sp)
    8908:	dc400117 	ldw	r17,4(sp)
    890c:	dc000017 	ldw	r16,0(sp)
    8910:	dec00304 	addi	sp,sp,12
    8914:	f800283a 	ret
    8918:	80c00017 	ldw	r3,0(r16)
    891c:	183ff926 	beq	r3,zero,8904 <_write_r+0x38>
    8920:	88c00015 	stw	r3,0(r17)
    8924:	dfc00217 	ldw	ra,8(sp)
    8928:	dc400117 	ldw	r17,4(sp)
    892c:	dc000017 	ldw	r16,0(sp)
    8930:	dec00304 	addi	sp,sp,12
    8934:	f800283a 	ret

00008938 <_calloc_r>:
    8938:	defffe04 	addi	sp,sp,-8
    893c:	dc000015 	stw	r16,0(sp)
    8940:	2021883a 	mov	r16,r4
    8944:	3009883a 	mov	r4,r6
    8948:	dfc00115 	stw	ra,4(sp)
    894c:	000a8440 	call	a844 <__mulsi3>
    8950:	8009883a 	mov	r4,r16
    8954:	100b883a 	mov	r5,r2
    8958:	00060200 	call	6020 <_malloc_r>
    895c:	1021883a 	mov	r16,r2
    8960:	10000c26 	beq	r2,zero,8994 <_calloc_r+0x5c>
    8964:	11bfff17 	ldw	r6,-4(r2)
    8968:	00ffff04 	movi	r3,-4
    896c:	00800904 	movi	r2,36
    8970:	30cc703a 	and	r6,r6,r3
    8974:	30cd883a 	add	r6,r6,r3
    8978:	11801436 	bltu	r2,r6,89cc <_calloc_r+0x94>
    897c:	00c004c4 	movi	r3,19
    8980:	19800936 	bltu	r3,r6,89a8 <_calloc_r+0x70>
    8984:	8005883a 	mov	r2,r16
    8988:	10000015 	stw	zero,0(r2)
    898c:	10000115 	stw	zero,4(r2)
    8990:	10000215 	stw	zero,8(r2)
    8994:	8005883a 	mov	r2,r16
    8998:	dfc00117 	ldw	ra,4(sp)
    899c:	dc000017 	ldw	r16,0(sp)
    89a0:	dec00204 	addi	sp,sp,8
    89a4:	f800283a 	ret
    89a8:	80000015 	stw	zero,0(r16)
    89ac:	80000115 	stw	zero,4(r16)
    89b0:	00c006c4 	movi	r3,27
    89b4:	19800d2e 	bgeu	r3,r6,89ec <_calloc_r+0xb4>
    89b8:	80000215 	stw	zero,8(r16)
    89bc:	80000315 	stw	zero,12(r16)
    89c0:	30800c26 	beq	r6,r2,89f4 <_calloc_r+0xbc>
    89c4:	80800404 	addi	r2,r16,16
    89c8:	003fef06 	br	8988 <_calloc_r+0x50>
    89cc:	8009883a 	mov	r4,r16
    89d0:	000b883a 	mov	r5,zero
    89d4:	0006b680 	call	6b68 <memset>
    89d8:	8005883a 	mov	r2,r16
    89dc:	dfc00117 	ldw	ra,4(sp)
    89e0:	dc000017 	ldw	r16,0(sp)
    89e4:	dec00204 	addi	sp,sp,8
    89e8:	f800283a 	ret
    89ec:	80800204 	addi	r2,r16,8
    89f0:	003fe506 	br	8988 <_calloc_r+0x50>
    89f4:	80000415 	stw	zero,16(r16)
    89f8:	80000515 	stw	zero,20(r16)
    89fc:	80800604 	addi	r2,r16,24
    8a00:	003fe106 	br	8988 <_calloc_r+0x50>

00008a04 <_close_r>:
    8a04:	defffd04 	addi	sp,sp,-12
    8a08:	dc400115 	stw	r17,4(sp)
    8a0c:	dc000015 	stw	r16,0(sp)
    8a10:	2023883a 	mov	r17,r4
    8a14:	04000074 	movhi	r16,1
    8a18:	84060904 	addi	r16,r16,6180
    8a1c:	2809883a 	mov	r4,r5
    8a20:	dfc00215 	stw	ra,8(sp)
    8a24:	80000015 	stw	zero,0(r16)
    8a28:	000aef80 	call	aef8 <close>
    8a2c:	00ffffc4 	movi	r3,-1
    8a30:	10c00526 	beq	r2,r3,8a48 <_close_r+0x44>
    8a34:	dfc00217 	ldw	ra,8(sp)
    8a38:	dc400117 	ldw	r17,4(sp)
    8a3c:	dc000017 	ldw	r16,0(sp)
    8a40:	dec00304 	addi	sp,sp,12
    8a44:	f800283a 	ret
    8a48:	80c00017 	ldw	r3,0(r16)
    8a4c:	183ff926 	beq	r3,zero,8a34 <_close_r+0x30>
    8a50:	88c00015 	stw	r3,0(r17)
    8a54:	dfc00217 	ldw	ra,8(sp)
    8a58:	dc400117 	ldw	r17,4(sp)
    8a5c:	dc000017 	ldw	r16,0(sp)
    8a60:	dec00304 	addi	sp,sp,12
    8a64:	f800283a 	ret

00008a68 <_fclose_r>:
    8a68:	defffc04 	addi	sp,sp,-16
    8a6c:	dc400115 	stw	r17,4(sp)
    8a70:	dc000015 	stw	r16,0(sp)
    8a74:	dfc00315 	stw	ra,12(sp)
    8a78:	dc800215 	stw	r18,8(sp)
    8a7c:	2821883a 	mov	r16,r5
    8a80:	2023883a 	mov	r17,r4
    8a84:	28003426 	beq	r5,zero,8b58 <_fclose_r+0xf0>
    8a88:	000530c0 	call	530c <__sfp_lock_acquire>
    8a8c:	88000226 	beq	r17,zero,8a98 <_fclose_r+0x30>
    8a90:	88800e17 	ldw	r2,56(r17)
    8a94:	10003826 	beq	r2,zero,8b78 <_fclose_r+0x110>
    8a98:	8080030f 	ldh	r2,12(r16)
    8a9c:	10002526 	beq	r2,zero,8b34 <_fclose_r+0xcc>
    8aa0:	8809883a 	mov	r4,r17
    8aa4:	800b883a 	mov	r5,r16
    8aa8:	0004e480 	call	4e48 <_fflush_r>
    8aac:	1025883a 	mov	r18,r2
    8ab0:	80800b17 	ldw	r2,44(r16)
    8ab4:	10000426 	beq	r2,zero,8ac8 <_fclose_r+0x60>
    8ab8:	81400717 	ldw	r5,28(r16)
    8abc:	8809883a 	mov	r4,r17
    8ac0:	103ee83a 	callr	r2
    8ac4:	10003516 	blt	r2,zero,8b9c <_fclose_r+0x134>
    8ac8:	8080030b 	ldhu	r2,12(r16)
    8acc:	1080200c 	andi	r2,r2,128
    8ad0:	10bfffcc 	andi	r2,r2,65535
    8ad4:	10a0001c 	xori	r2,r2,32768
    8ad8:	10a00004 	addi	r2,r2,-32768
    8adc:	10002b1e 	bne	r2,zero,8b8c <_fclose_r+0x124>
    8ae0:	81400c17 	ldw	r5,48(r16)
    8ae4:	28000526 	beq	r5,zero,8afc <_fclose_r+0x94>
    8ae8:	80801004 	addi	r2,r16,64
    8aec:	28800226 	beq	r5,r2,8af8 <_fclose_r+0x90>
    8af0:	8809883a 	mov	r4,r17
    8af4:	00054880 	call	5488 <_free_r>
    8af8:	80000c15 	stw	zero,48(r16)
    8afc:	81401117 	ldw	r5,68(r16)
    8b00:	28000326 	beq	r5,zero,8b10 <_fclose_r+0xa8>
    8b04:	8809883a 	mov	r4,r17
    8b08:	00054880 	call	5488 <_free_r>
    8b0c:	80001115 	stw	zero,68(r16)
    8b10:	8000030d 	sth	zero,12(r16)
    8b14:	00053100 	call	5310 <__sfp_lock_release>
    8b18:	9005883a 	mov	r2,r18
    8b1c:	dfc00317 	ldw	ra,12(sp)
    8b20:	dc800217 	ldw	r18,8(sp)
    8b24:	dc400117 	ldw	r17,4(sp)
    8b28:	dc000017 	ldw	r16,0(sp)
    8b2c:	dec00404 	addi	sp,sp,16
    8b30:	f800283a 	ret
    8b34:	00053100 	call	5310 <__sfp_lock_release>
    8b38:	0025883a 	mov	r18,zero
    8b3c:	9005883a 	mov	r2,r18
    8b40:	dfc00317 	ldw	ra,12(sp)
    8b44:	dc800217 	ldw	r18,8(sp)
    8b48:	dc400117 	ldw	r17,4(sp)
    8b4c:	dc000017 	ldw	r16,0(sp)
    8b50:	dec00404 	addi	sp,sp,16
    8b54:	f800283a 	ret
    8b58:	0025883a 	mov	r18,zero
    8b5c:	9005883a 	mov	r2,r18
    8b60:	dfc00317 	ldw	ra,12(sp)
    8b64:	dc800217 	ldw	r18,8(sp)
    8b68:	dc400117 	ldw	r17,4(sp)
    8b6c:	dc000017 	ldw	r16,0(sp)
    8b70:	dec00404 	addi	sp,sp,16
    8b74:	f800283a 	ret
    8b78:	8809883a 	mov	r4,r17
    8b7c:	00051040 	call	5104 <__sinit>
    8b80:	8080030f 	ldh	r2,12(r16)
    8b84:	103fc61e 	bne	r2,zero,8aa0 <_fclose_r+0x38>
    8b88:	003fea06 	br	8b34 <_fclose_r+0xcc>
    8b8c:	81400417 	ldw	r5,16(r16)
    8b90:	8809883a 	mov	r4,r17
    8b94:	00054880 	call	5488 <_free_r>
    8b98:	003fd106 	br	8ae0 <_fclose_r+0x78>
    8b9c:	04bfffc4 	movi	r18,-1
    8ba0:	003fc906 	br	8ac8 <_fclose_r+0x60>

00008ba4 <fclose>:
    8ba4:	00800074 	movhi	r2,1
    8ba8:	10beb504 	addi	r2,r2,-1324
    8bac:	200b883a 	mov	r5,r4
    8bb0:	11000017 	ldw	r4,0(r2)
    8bb4:	0008a681 	jmpi	8a68 <_fclose_r>

00008bb8 <_fstat_r>:
    8bb8:	defffd04 	addi	sp,sp,-12
    8bbc:	dc400115 	stw	r17,4(sp)
    8bc0:	dc000015 	stw	r16,0(sp)
    8bc4:	2023883a 	mov	r17,r4
    8bc8:	04000074 	movhi	r16,1
    8bcc:	84060904 	addi	r16,r16,6180
    8bd0:	2809883a 	mov	r4,r5
    8bd4:	300b883a 	mov	r5,r6
    8bd8:	dfc00215 	stw	ra,8(sp)
    8bdc:	80000015 	stw	zero,0(r16)
    8be0:	000b0400 	call	b040 <fstat>
    8be4:	00ffffc4 	movi	r3,-1
    8be8:	10c00526 	beq	r2,r3,8c00 <_fstat_r+0x48>
    8bec:	dfc00217 	ldw	ra,8(sp)
    8bf0:	dc400117 	ldw	r17,4(sp)
    8bf4:	dc000017 	ldw	r16,0(sp)
    8bf8:	dec00304 	addi	sp,sp,12
    8bfc:	f800283a 	ret
    8c00:	80c00017 	ldw	r3,0(r16)
    8c04:	183ff926 	beq	r3,zero,8bec <_fstat_r+0x34>
    8c08:	88c00015 	stw	r3,0(r17)
    8c0c:	dfc00217 	ldw	ra,8(sp)
    8c10:	dc400117 	ldw	r17,4(sp)
    8c14:	dc000017 	ldw	r16,0(sp)
    8c18:	dec00304 	addi	sp,sp,12
    8c1c:	f800283a 	ret

00008c20 <_isatty_r>:
    8c20:	defffd04 	addi	sp,sp,-12
    8c24:	dc400115 	stw	r17,4(sp)
    8c28:	dc000015 	stw	r16,0(sp)
    8c2c:	2023883a 	mov	r17,r4
    8c30:	04000074 	movhi	r16,1
    8c34:	84060904 	addi	r16,r16,6180
    8c38:	2809883a 	mov	r4,r5
    8c3c:	dfc00215 	stw	ra,8(sp)
    8c40:	80000015 	stw	zero,0(r16)
    8c44:	000b1400 	call	b140 <isatty>
    8c48:	00ffffc4 	movi	r3,-1
    8c4c:	10c00526 	beq	r2,r3,8c64 <_isatty_r+0x44>
    8c50:	dfc00217 	ldw	ra,8(sp)
    8c54:	dc400117 	ldw	r17,4(sp)
    8c58:	dc000017 	ldw	r16,0(sp)
    8c5c:	dec00304 	addi	sp,sp,12
    8c60:	f800283a 	ret
    8c64:	80c00017 	ldw	r3,0(r16)
    8c68:	183ff926 	beq	r3,zero,8c50 <_isatty_r+0x30>
    8c6c:	88c00015 	stw	r3,0(r17)
    8c70:	dfc00217 	ldw	ra,8(sp)
    8c74:	dc400117 	ldw	r17,4(sp)
    8c78:	dc000017 	ldw	r16,0(sp)
    8c7c:	dec00304 	addi	sp,sp,12
    8c80:	f800283a 	ret

00008c84 <_lseek_r>:
    8c84:	defffd04 	addi	sp,sp,-12
    8c88:	dc400115 	stw	r17,4(sp)
    8c8c:	dc000015 	stw	r16,0(sp)
    8c90:	2023883a 	mov	r17,r4
    8c94:	04000074 	movhi	r16,1
    8c98:	84060904 	addi	r16,r16,6180
    8c9c:	2809883a 	mov	r4,r5
    8ca0:	300b883a 	mov	r5,r6
    8ca4:	380d883a 	mov	r6,r7
    8ca8:	dfc00215 	stw	ra,8(sp)
    8cac:	80000015 	stw	zero,0(r16)
    8cb0:	000b3200 	call	b320 <lseek>
    8cb4:	00ffffc4 	movi	r3,-1
    8cb8:	10c00526 	beq	r2,r3,8cd0 <_lseek_r+0x4c>
    8cbc:	dfc00217 	ldw	ra,8(sp)
    8cc0:	dc400117 	ldw	r17,4(sp)
    8cc4:	dc000017 	ldw	r16,0(sp)
    8cc8:	dec00304 	addi	sp,sp,12
    8ccc:	f800283a 	ret
    8cd0:	80c00017 	ldw	r3,0(r16)
    8cd4:	183ff926 	beq	r3,zero,8cbc <_lseek_r+0x38>
    8cd8:	88c00015 	stw	r3,0(r17)
    8cdc:	dfc00217 	ldw	ra,8(sp)
    8ce0:	dc400117 	ldw	r17,4(sp)
    8ce4:	dc000017 	ldw	r16,0(sp)
    8ce8:	dec00304 	addi	sp,sp,12
    8cec:	f800283a 	ret

00008cf0 <_read_r>:
    8cf0:	defffd04 	addi	sp,sp,-12
    8cf4:	dc400115 	stw	r17,4(sp)
    8cf8:	dc000015 	stw	r16,0(sp)
    8cfc:	2023883a 	mov	r17,r4
    8d00:	04000074 	movhi	r16,1
    8d04:	84060904 	addi	r16,r16,6180
    8d08:	2809883a 	mov	r4,r5
    8d0c:	300b883a 	mov	r5,r6
    8d10:	380d883a 	mov	r6,r7
    8d14:	dfc00215 	stw	ra,8(sp)
    8d18:	80000015 	stw	zero,0(r16)
    8d1c:	000b4fc0 	call	b4fc <read>
    8d20:	00ffffc4 	movi	r3,-1
    8d24:	10c00526 	beq	r2,r3,8d3c <_read_r+0x4c>
    8d28:	dfc00217 	ldw	ra,8(sp)
    8d2c:	dc400117 	ldw	r17,4(sp)
    8d30:	dc000017 	ldw	r16,0(sp)
    8d34:	dec00304 	addi	sp,sp,12
    8d38:	f800283a 	ret
    8d3c:	80c00017 	ldw	r3,0(r16)
    8d40:	183ff926 	beq	r3,zero,8d28 <_read_r+0x38>
    8d44:	88c00015 	stw	r3,0(r17)
    8d48:	dfc00217 	ldw	ra,8(sp)
    8d4c:	dc400117 	ldw	r17,4(sp)
    8d50:	dc000017 	ldw	r16,0(sp)
    8d54:	dec00304 	addi	sp,sp,12
    8d58:	f800283a 	ret

00008d5c <__udivdi3>:
    8d5c:	defff504 	addi	sp,sp,-44
    8d60:	dd000515 	stw	r20,20(sp)
    8d64:	dcc00415 	stw	r19,16(sp)
    8d68:	dc800315 	stw	r18,12(sp)
    8d6c:	dc400215 	stw	r17,8(sp)
    8d70:	dc000115 	stw	r16,4(sp)
    8d74:	dfc00a15 	stw	ra,40(sp)
    8d78:	df000915 	stw	fp,36(sp)
    8d7c:	ddc00815 	stw	r23,32(sp)
    8d80:	dd800715 	stw	r22,28(sp)
    8d84:	dd400615 	stw	r21,24(sp)
    8d88:	2025883a 	mov	r18,r4
    8d8c:	2823883a 	mov	r17,r5
    8d90:	3021883a 	mov	r16,r6
    8d94:	2027883a 	mov	r19,r4
    8d98:	2829883a 	mov	r20,r5
    8d9c:	3800451e 	bne	r7,zero,8eb4 <__udivdi3+0x158>
    8da0:	2980652e 	bgeu	r5,r6,8f38 <__udivdi3+0x1dc>
    8da4:	00bfffd4 	movui	r2,65535
    8da8:	1180b436 	bltu	r2,r6,907c <__udivdi3+0x320>
    8dac:	00803fc4 	movi	r2,255
    8db0:	11816636 	bltu	r2,r6,934c <__udivdi3+0x5f0>
    8db4:	0005883a 	mov	r2,zero
    8db8:	0007883a 	mov	r3,zero
    8dbc:	3084d83a 	srl	r2,r6,r2
    8dc0:	01000074 	movhi	r4,1
    8dc4:	2136f904 	addi	r4,r4,-9244
    8dc8:	2085883a 	add	r2,r4,r2
    8dcc:	10800003 	ldbu	r2,0(r2)
    8dd0:	10c7883a 	add	r3,r2,r3
    8dd4:	00800804 	movi	r2,32
    8dd8:	10c5c83a 	sub	r2,r2,r3
    8ddc:	10000526 	beq	r2,zero,8df4 <__udivdi3+0x98>
    8de0:	88a2983a 	sll	r17,r17,r2
    8de4:	90c6d83a 	srl	r3,r18,r3
    8de8:	30a0983a 	sll	r16,r6,r2
    8dec:	90a6983a 	sll	r19,r18,r2
    8df0:	88e8b03a 	or	r20,r17,r3
    8df4:	8022d43a 	srli	r17,r16,16
    8df8:	a009883a 	mov	r4,r20
    8dfc:	857fffcc 	andi	r21,r16,65535
    8e00:	880b883a 	mov	r5,r17
    8e04:	000a83c0 	call	a83c <__umodsi3>
    8e08:	a009883a 	mov	r4,r20
    8e0c:	880b883a 	mov	r5,r17
    8e10:	102d883a 	mov	r22,r2
    8e14:	000a8340 	call	a834 <__udivsi3>
    8e18:	1009883a 	mov	r4,r2
    8e1c:	a80b883a 	mov	r5,r21
    8e20:	1025883a 	mov	r18,r2
    8e24:	000a8440 	call	a844 <__mulsi3>
    8e28:	1009883a 	mov	r4,r2
    8e2c:	b006943a 	slli	r3,r22,16
    8e30:	9804d43a 	srli	r2,r19,16
    8e34:	1886b03a 	or	r3,r3,r2
    8e38:	1900052e 	bgeu	r3,r4,8e50 <__udivdi3+0xf4>
    8e3c:	1c07883a 	add	r3,r3,r16
    8e40:	90bfffc4 	addi	r2,r18,-1
    8e44:	1c000136 	bltu	r3,r16,8e4c <__udivdi3+0xf0>
    8e48:	19015536 	bltu	r3,r4,93a0 <__udivdi3+0x644>
    8e4c:	1025883a 	mov	r18,r2
    8e50:	1929c83a 	sub	r20,r3,r4
    8e54:	880b883a 	mov	r5,r17
    8e58:	a009883a 	mov	r4,r20
    8e5c:	000a83c0 	call	a83c <__umodsi3>
    8e60:	102d883a 	mov	r22,r2
    8e64:	880b883a 	mov	r5,r17
    8e68:	a009883a 	mov	r4,r20
    8e6c:	b02c943a 	slli	r22,r22,16
    8e70:	000a8340 	call	a834 <__udivsi3>
    8e74:	1009883a 	mov	r4,r2
    8e78:	a80b883a 	mov	r5,r21
    8e7c:	9cffffcc 	andi	r19,r19,65535
    8e80:	1023883a 	mov	r17,r2
    8e84:	b4e6b03a 	or	r19,r22,r19
    8e88:	000a8440 	call	a844 <__mulsi3>
    8e8c:	9880052e 	bgeu	r19,r2,8ea4 <__udivdi3+0x148>
    8e90:	9c27883a 	add	r19,r19,r16
    8e94:	88ffffc4 	addi	r3,r17,-1
    8e98:	9c011436 	bltu	r19,r16,92ec <__udivdi3+0x590>
    8e9c:	9881132e 	bgeu	r19,r2,92ec <__udivdi3+0x590>
    8ea0:	8c7fff84 	addi	r17,r17,-2
    8ea4:	9004943a 	slli	r2,r18,16
    8ea8:	0007883a 	mov	r3,zero
    8eac:	8884b03a 	or	r2,r17,r2
    8eb0:	00001506 	br	8f08 <__udivdi3+0x1ac>
    8eb4:	29c06a36 	bltu	r5,r7,9060 <__udivdi3+0x304>
    8eb8:	00bfffd4 	movui	r2,65535
    8ebc:	11c06a2e 	bgeu	r2,r7,9068 <__udivdi3+0x30c>
    8ec0:	00804034 	movhi	r2,256
    8ec4:	10bfffc4 	addi	r2,r2,-1
    8ec8:	11c11436 	bltu	r2,r7,931c <__udivdi3+0x5c0>
    8ecc:	00c00404 	movi	r3,16
    8ed0:	180b883a 	mov	r5,r3
    8ed4:	38c6d83a 	srl	r3,r7,r3
    8ed8:	01000074 	movhi	r4,1
    8edc:	2136f904 	addi	r4,r4,-9244
    8ee0:	04000804 	movi	r16,32
    8ee4:	20c7883a 	add	r3,r4,r3
    8ee8:	18800003 	ldbu	r2,0(r3)
    8eec:	1145883a 	add	r2,r2,r5
    8ef0:	80a1c83a 	sub	r16,r16,r2
    8ef4:	80006e1e 	bne	r16,zero,90b0 <__udivdi3+0x354>
    8ef8:	0007883a 	mov	r3,zero
    8efc:	3c406a36 	bltu	r7,r17,90a8 <__udivdi3+0x34c>
    8f00:	9180692e 	bgeu	r18,r6,90a8 <__udivdi3+0x34c>
    8f04:	0005883a 	mov	r2,zero
    8f08:	dfc00a17 	ldw	ra,40(sp)
    8f0c:	df000917 	ldw	fp,36(sp)
    8f10:	ddc00817 	ldw	r23,32(sp)
    8f14:	dd800717 	ldw	r22,28(sp)
    8f18:	dd400617 	ldw	r21,24(sp)
    8f1c:	dd000517 	ldw	r20,20(sp)
    8f20:	dcc00417 	ldw	r19,16(sp)
    8f24:	dc800317 	ldw	r18,12(sp)
    8f28:	dc400217 	ldw	r17,8(sp)
    8f2c:	dc000117 	ldw	r16,4(sp)
    8f30:	dec00b04 	addi	sp,sp,44
    8f34:	f800283a 	ret
    8f38:	3000041e 	bne	r6,zero,8f4c <__udivdi3+0x1f0>
    8f3c:	01000044 	movi	r4,1
    8f40:	000b883a 	mov	r5,zero
    8f44:	000a8340 	call	a834 <__udivsi3>
    8f48:	1021883a 	mov	r16,r2
    8f4c:	00bfffd4 	movui	r2,65535
    8f50:	1400502e 	bgeu	r2,r16,9094 <__udivdi3+0x338>
    8f54:	00804034 	movhi	r2,256
    8f58:	10bfffc4 	addi	r2,r2,-1
    8f5c:	1400f536 	bltu	r2,r16,9334 <__udivdi3+0x5d8>
    8f60:	00800404 	movi	r2,16
    8f64:	1007883a 	mov	r3,r2
    8f68:	8084d83a 	srl	r2,r16,r2
    8f6c:	01000074 	movhi	r4,1
    8f70:	2136f904 	addi	r4,r4,-9244
    8f74:	2085883a 	add	r2,r4,r2
    8f78:	10800003 	ldbu	r2,0(r2)
    8f7c:	10c7883a 	add	r3,r2,r3
    8f80:	00800804 	movi	r2,32
    8f84:	10c5c83a 	sub	r2,r2,r3
    8f88:	1000a01e 	bne	r2,zero,920c <__udivdi3+0x4b0>
    8f8c:	8028d43a 	srli	r20,r16,16
    8f90:	8c23c83a 	sub	r17,r17,r16
    8f94:	857fffcc 	andi	r21,r16,65535
    8f98:	00c00044 	movi	r3,1
    8f9c:	8809883a 	mov	r4,r17
    8fa0:	a00b883a 	mov	r5,r20
    8fa4:	d8c00015 	stw	r3,0(sp)
    8fa8:	000a83c0 	call	a83c <__umodsi3>
    8fac:	8809883a 	mov	r4,r17
    8fb0:	a00b883a 	mov	r5,r20
    8fb4:	102d883a 	mov	r22,r2
    8fb8:	000a8340 	call	a834 <__udivsi3>
    8fbc:	1009883a 	mov	r4,r2
    8fc0:	a80b883a 	mov	r5,r21
    8fc4:	1025883a 	mov	r18,r2
    8fc8:	000a8440 	call	a844 <__mulsi3>
    8fcc:	1009883a 	mov	r4,r2
    8fd0:	b00c943a 	slli	r6,r22,16
    8fd4:	9804d43a 	srli	r2,r19,16
    8fd8:	d8c00017 	ldw	r3,0(sp)
    8fdc:	308cb03a 	or	r6,r6,r2
    8fe0:	3100052e 	bgeu	r6,r4,8ff8 <__udivdi3+0x29c>
    8fe4:	340d883a 	add	r6,r6,r16
    8fe8:	90bfffc4 	addi	r2,r18,-1
    8fec:	34000136 	bltu	r6,r16,8ff4 <__udivdi3+0x298>
    8ff0:	3100e836 	bltu	r6,r4,9394 <__udivdi3+0x638>
    8ff4:	1025883a 	mov	r18,r2
    8ff8:	3123c83a 	sub	r17,r6,r4
    8ffc:	8809883a 	mov	r4,r17
    9000:	a00b883a 	mov	r5,r20
    9004:	d8c00015 	stw	r3,0(sp)
    9008:	000a83c0 	call	a83c <__umodsi3>
    900c:	102d883a 	mov	r22,r2
    9010:	8809883a 	mov	r4,r17
    9014:	a00b883a 	mov	r5,r20
    9018:	b02c943a 	slli	r22,r22,16
    901c:	000a8340 	call	a834 <__udivsi3>
    9020:	1009883a 	mov	r4,r2
    9024:	a80b883a 	mov	r5,r21
    9028:	9cffffcc 	andi	r19,r19,65535
    902c:	1023883a 	mov	r17,r2
    9030:	b4e6b03a 	or	r19,r22,r19
    9034:	000a8440 	call	a844 <__mulsi3>
    9038:	d8c00017 	ldw	r3,0(sp)
    903c:	9880052e 	bgeu	r19,r2,9054 <__udivdi3+0x2f8>
    9040:	9c27883a 	add	r19,r19,r16
    9044:	893fffc4 	addi	r4,r17,-1
    9048:	9c00aa36 	bltu	r19,r16,92f4 <__udivdi3+0x598>
    904c:	9880a92e 	bgeu	r19,r2,92f4 <__udivdi3+0x598>
    9050:	8c7fff84 	addi	r17,r17,-2
    9054:	9004943a 	slli	r2,r18,16
    9058:	8884b03a 	or	r2,r17,r2
    905c:	003faa06 	br	8f08 <__udivdi3+0x1ac>
    9060:	0007883a 	mov	r3,zero
    9064:	003fa706 	br	8f04 <__udivdi3+0x1a8>
    9068:	00803fc4 	movi	r2,255
    906c:	11c0ae36 	bltu	r2,r7,9328 <__udivdi3+0x5cc>
    9070:	0007883a 	mov	r3,zero
    9074:	000b883a 	mov	r5,zero
    9078:	003f9606 	br	8ed4 <__udivdi3+0x178>
    907c:	00804034 	movhi	r2,256
    9080:	10bfffc4 	addi	r2,r2,-1
    9084:	1180ae36 	bltu	r2,r6,9340 <__udivdi3+0x5e4>
    9088:	00800404 	movi	r2,16
    908c:	1007883a 	mov	r3,r2
    9090:	003f4a06 	br	8dbc <__udivdi3+0x60>
    9094:	00803fc4 	movi	r2,255
    9098:	1400af36 	bltu	r2,r16,9358 <__udivdi3+0x5fc>
    909c:	0005883a 	mov	r2,zero
    90a0:	0007883a 	mov	r3,zero
    90a4:	003fb006 	br	8f68 <__udivdi3+0x20c>
    90a8:	00800044 	movi	r2,1
    90ac:	003f9606 	br	8f08 <__udivdi3+0x1ac>
    90b0:	3c0e983a 	sll	r7,r7,r16
    90b4:	3086d83a 	srl	r3,r6,r2
    90b8:	88aed83a 	srl	r23,r17,r2
    90bc:	9084d83a 	srl	r2,r18,r2
    90c0:	38e6b03a 	or	r19,r7,r3
    90c4:	9828d43a 	srli	r20,r19,16
    90c8:	8c22983a 	sll	r17,r17,r16
    90cc:	b809883a 	mov	r4,r23
    90d0:	a00b883a 	mov	r5,r20
    90d4:	342a983a 	sll	r21,r6,r16
    90d8:	88a2b03a 	or	r17,r17,r2
    90dc:	000a83c0 	call	a83c <__umodsi3>
    90e0:	b809883a 	mov	r4,r23
    90e4:	a00b883a 	mov	r5,r20
    90e8:	1039883a 	mov	fp,r2
    90ec:	9dbfffcc 	andi	r22,r19,65535
    90f0:	000a8340 	call	a834 <__udivsi3>
    90f4:	1009883a 	mov	r4,r2
    90f8:	b00b883a 	mov	r5,r22
    90fc:	102f883a 	mov	r23,r2
    9100:	000a8440 	call	a844 <__mulsi3>
    9104:	1009883a 	mov	r4,r2
    9108:	e00e943a 	slli	r7,fp,16
    910c:	8804d43a 	srli	r2,r17,16
    9110:	388eb03a 	or	r7,r7,r2
    9114:	3900042e 	bgeu	r7,r4,9128 <__udivdi3+0x3cc>
    9118:	3ccf883a 	add	r7,r7,r19
    911c:	b8bfffc4 	addi	r2,r23,-1
    9120:	3cc0942e 	bgeu	r7,r19,9374 <__udivdi3+0x618>
    9124:	102f883a 	mov	r23,r2
    9128:	3939c83a 	sub	fp,r7,r4
    912c:	a00b883a 	mov	r5,r20
    9130:	e009883a 	mov	r4,fp
    9134:	000a83c0 	call	a83c <__umodsi3>
    9138:	a00b883a 	mov	r5,r20
    913c:	e009883a 	mov	r4,fp
    9140:	d8800015 	stw	r2,0(sp)
    9144:	000a8340 	call	a834 <__udivsi3>
    9148:	1009883a 	mov	r4,r2
    914c:	b00b883a 	mov	r5,r22
    9150:	1029883a 	mov	r20,r2
    9154:	000a8440 	call	a844 <__mulsi3>
    9158:	d8c00017 	ldw	r3,0(sp)
    915c:	8c7fffcc 	andi	r17,r17,65535
    9160:	1806943a 	slli	r3,r3,16
    9164:	1c46b03a 	or	r3,r3,r17
    9168:	1880042e 	bgeu	r3,r2,917c <__udivdi3+0x420>
    916c:	1cc7883a 	add	r3,r3,r19
    9170:	a13fffc4 	addi	r4,r20,-1
    9174:	1cc07b2e 	bgeu	r3,r19,9364 <__udivdi3+0x608>
    9178:	2029883a 	mov	r20,r4
    917c:	b82e943a 	slli	r23,r23,16
    9180:	a822d43a 	srli	r17,r21,16
    9184:	ad7fffcc 	andi	r21,r21,65535
    9188:	a5e8b03a 	or	r20,r20,r23
    918c:	a5bfffcc 	andi	r22,r20,65535
    9190:	b009883a 	mov	r4,r22
    9194:	a80b883a 	mov	r5,r21
    9198:	18afc83a 	sub	r23,r3,r2
    919c:	a026d43a 	srli	r19,r20,16
    91a0:	000a8440 	call	a844 <__mulsi3>
    91a4:	b009883a 	mov	r4,r22
    91a8:	880b883a 	mov	r5,r17
    91ac:	1039883a 	mov	fp,r2
    91b0:	000a8440 	call	a844 <__mulsi3>
    91b4:	a80b883a 	mov	r5,r21
    91b8:	9809883a 	mov	r4,r19
    91bc:	102d883a 	mov	r22,r2
    91c0:	000a8440 	call	a844 <__mulsi3>
    91c4:	9809883a 	mov	r4,r19
    91c8:	880b883a 	mov	r5,r17
    91cc:	102b883a 	mov	r21,r2
    91d0:	000a8440 	call	a844 <__mulsi3>
    91d4:	100b883a 	mov	r5,r2
    91d8:	e004d43a 	srli	r2,fp,16
    91dc:	ad89883a 	add	r4,r21,r22
    91e0:	2089883a 	add	r4,r4,r2
    91e4:	2540022e 	bgeu	r4,r21,91f0 <__udivdi3+0x494>
    91e8:	00800074 	movhi	r2,1
    91ec:	288b883a 	add	r5,r5,r2
    91f0:	2004d43a 	srli	r2,r4,16
    91f4:	288b883a 	add	r5,r5,r2
    91f8:	b9404536 	bltu	r23,r5,9310 <__udivdi3+0x5b4>
    91fc:	b9403f26 	beq	r23,r5,92fc <__udivdi3+0x5a0>
    9200:	a005883a 	mov	r2,r20
    9204:	0007883a 	mov	r3,zero
    9208:	003f3f06 	br	8f08 <__udivdi3+0x1ac>
    920c:	80a0983a 	sll	r16,r16,r2
    9210:	88eed83a 	srl	r23,r17,r3
    9214:	90c6d83a 	srl	r3,r18,r3
    9218:	8028d43a 	srli	r20,r16,16
    921c:	88a2983a 	sll	r17,r17,r2
    9220:	b809883a 	mov	r4,r23
    9224:	a00b883a 	mov	r5,r20
    9228:	88ecb03a 	or	r22,r17,r3
    922c:	90a6983a 	sll	r19,r18,r2
    9230:	000a83c0 	call	a83c <__umodsi3>
    9234:	b809883a 	mov	r4,r23
    9238:	a00b883a 	mov	r5,r20
    923c:	1023883a 	mov	r17,r2
    9240:	857fffcc 	andi	r21,r16,65535
    9244:	000a8340 	call	a834 <__udivsi3>
    9248:	1009883a 	mov	r4,r2
    924c:	a80b883a 	mov	r5,r21
    9250:	102f883a 	mov	r23,r2
    9254:	000a8440 	call	a844 <__mulsi3>
    9258:	1009883a 	mov	r4,r2
    925c:	880a943a 	slli	r5,r17,16
    9260:	b004d43a 	srli	r2,r22,16
    9264:	288ab03a 	or	r5,r5,r2
    9268:	2900062e 	bgeu	r5,r4,9284 <__udivdi3+0x528>
    926c:	2c0b883a 	add	r5,r5,r16
    9270:	b8bfffc4 	addi	r2,r23,-1
    9274:	2c004536 	bltu	r5,r16,938c <__udivdi3+0x630>
    9278:	2900442e 	bgeu	r5,r4,938c <__udivdi3+0x630>
    927c:	bdffff84 	addi	r23,r23,-2
    9280:	2c0b883a 	add	r5,r5,r16
    9284:	2925c83a 	sub	r18,r5,r4
    9288:	9009883a 	mov	r4,r18
    928c:	a00b883a 	mov	r5,r20
    9290:	000a83c0 	call	a83c <__umodsi3>
    9294:	1023883a 	mov	r17,r2
    9298:	9009883a 	mov	r4,r18
    929c:	a00b883a 	mov	r5,r20
    92a0:	8822943a 	slli	r17,r17,16
    92a4:	000a8340 	call	a834 <__udivsi3>
    92a8:	1009883a 	mov	r4,r2
    92ac:	a80b883a 	mov	r5,r21
    92b0:	b5bfffcc 	andi	r22,r22,65535
    92b4:	1025883a 	mov	r18,r2
    92b8:	8da2b03a 	or	r17,r17,r22
    92bc:	000a8440 	call	a844 <__mulsi3>
    92c0:	8880062e 	bgeu	r17,r2,92dc <__udivdi3+0x580>
    92c4:	8c23883a 	add	r17,r17,r16
    92c8:	90ffffc4 	addi	r3,r18,-1
    92cc:	8c002d36 	bltu	r17,r16,9384 <__udivdi3+0x628>
    92d0:	88802c2e 	bgeu	r17,r2,9384 <__udivdi3+0x628>
    92d4:	94bfff84 	addi	r18,r18,-2
    92d8:	8c23883a 	add	r17,r17,r16
    92dc:	b806943a 	slli	r3,r23,16
    92e0:	88a3c83a 	sub	r17,r17,r2
    92e4:	90c6b03a 	or	r3,r18,r3
    92e8:	003f2c06 	br	8f9c <__udivdi3+0x240>
    92ec:	1823883a 	mov	r17,r3
    92f0:	003eec06 	br	8ea4 <__udivdi3+0x148>
    92f4:	2023883a 	mov	r17,r4
    92f8:	003f5606 	br	9054 <__udivdi3+0x2f8>
    92fc:	2008943a 	slli	r4,r4,16
    9300:	9420983a 	sll	r16,r18,r16
    9304:	e73fffcc 	andi	fp,fp,65535
    9308:	2709883a 	add	r4,r4,fp
    930c:	813fbc2e 	bgeu	r16,r4,9200 <__udivdi3+0x4a4>
    9310:	a0bfffc4 	addi	r2,r20,-1
    9314:	0007883a 	mov	r3,zero
    9318:	003efb06 	br	8f08 <__udivdi3+0x1ac>
    931c:	00c00604 	movi	r3,24
    9320:	180b883a 	mov	r5,r3
    9324:	003eeb06 	br	8ed4 <__udivdi3+0x178>
    9328:	00c00204 	movi	r3,8
    932c:	180b883a 	mov	r5,r3
    9330:	003ee806 	br	8ed4 <__udivdi3+0x178>
    9334:	00800604 	movi	r2,24
    9338:	1007883a 	mov	r3,r2
    933c:	003f0a06 	br	8f68 <__udivdi3+0x20c>
    9340:	00800604 	movi	r2,24
    9344:	1007883a 	mov	r3,r2
    9348:	003e9c06 	br	8dbc <__udivdi3+0x60>
    934c:	00800204 	movi	r2,8
    9350:	1007883a 	mov	r3,r2
    9354:	003e9906 	br	8dbc <__udivdi3+0x60>
    9358:	00800204 	movi	r2,8
    935c:	1007883a 	mov	r3,r2
    9360:	003f0106 	br	8f68 <__udivdi3+0x20c>
    9364:	18bf842e 	bgeu	r3,r2,9178 <__udivdi3+0x41c>
    9368:	a53fff84 	addi	r20,r20,-2
    936c:	1cc7883a 	add	r3,r3,r19
    9370:	003f8206 	br	917c <__udivdi3+0x420>
    9374:	393f6b2e 	bgeu	r7,r4,9124 <__udivdi3+0x3c8>
    9378:	bdffff84 	addi	r23,r23,-2
    937c:	3ccf883a 	add	r7,r7,r19
    9380:	003f6906 	br	9128 <__udivdi3+0x3cc>
    9384:	1825883a 	mov	r18,r3
    9388:	003fd406 	br	92dc <__udivdi3+0x580>
    938c:	102f883a 	mov	r23,r2
    9390:	003fbc06 	br	9284 <__udivdi3+0x528>
    9394:	94bfff84 	addi	r18,r18,-2
    9398:	340d883a 	add	r6,r6,r16
    939c:	003f1606 	br	8ff8 <__udivdi3+0x29c>
    93a0:	94bfff84 	addi	r18,r18,-2
    93a4:	1c07883a 	add	r3,r3,r16
    93a8:	003ea906 	br	8e50 <__udivdi3+0xf4>

000093ac <__umoddi3>:
    93ac:	defff304 	addi	sp,sp,-52
    93b0:	dd000715 	stw	r20,28(sp)
    93b4:	dcc00615 	stw	r19,24(sp)
    93b8:	dc800515 	stw	r18,20(sp)
    93bc:	dc400415 	stw	r17,16(sp)
    93c0:	dc000315 	stw	r16,12(sp)
    93c4:	dfc00c15 	stw	ra,48(sp)
    93c8:	df000b15 	stw	fp,44(sp)
    93cc:	ddc00a15 	stw	r23,40(sp)
    93d0:	dd800915 	stw	r22,36(sp)
    93d4:	dd400815 	stw	r21,32(sp)
    93d8:	2025883a 	mov	r18,r4
    93dc:	2823883a 	mov	r17,r5
    93e0:	3021883a 	mov	r16,r6
    93e4:	2027883a 	mov	r19,r4
    93e8:	2829883a 	mov	r20,r5
    93ec:	38003a1e 	bne	r7,zero,94d8 <__umoddi3+0x12c>
    93f0:	2980522e 	bgeu	r5,r6,953c <__umoddi3+0x190>
    93f4:	00bfffd4 	movui	r2,65535
    93f8:	1180a436 	bltu	r2,r6,968c <__umoddi3+0x2e0>
    93fc:	00803fc4 	movi	r2,255
    9400:	11816036 	bltu	r2,r6,9984 <__umoddi3+0x5d8>
    9404:	0005883a 	mov	r2,zero
    9408:	0009883a 	mov	r4,zero
    940c:	3084d83a 	srl	r2,r6,r2
    9410:	00c00074 	movhi	r3,1
    9414:	18f6f904 	addi	r3,r3,-9244
    9418:	05400804 	movi	r21,32
    941c:	1885883a 	add	r2,r3,r2
    9420:	10800003 	ldbu	r2,0(r2)
    9424:	1109883a 	add	r4,r2,r4
    9428:	a92bc83a 	sub	r21,r21,r4
    942c:	a8010e26 	beq	r21,zero,9868 <__umoddi3+0x4bc>
    9430:	8d62983a 	sll	r17,r17,r21
    9434:	9108d83a 	srl	r4,r18,r4
    9438:	3560983a 	sll	r16,r6,r21
    943c:	9566983a 	sll	r19,r18,r21
    9440:	8928b03a 	or	r20,r17,r4
    9444:	8022d43a 	srli	r17,r16,16
    9448:	a009883a 	mov	r4,r20
    944c:	84bfffcc 	andi	r18,r16,65535
    9450:	880b883a 	mov	r5,r17
    9454:	000a83c0 	call	a83c <__umodsi3>
    9458:	a009883a 	mov	r4,r20
    945c:	880b883a 	mov	r5,r17
    9460:	102d883a 	mov	r22,r2
    9464:	000a8340 	call	a834 <__udivsi3>
    9468:	1009883a 	mov	r4,r2
    946c:	900b883a 	mov	r5,r18
    9470:	000a8440 	call	a844 <__mulsi3>
    9474:	1009883a 	mov	r4,r2
    9478:	b006943a 	slli	r3,r22,16
    947c:	9804d43a 	srli	r2,r19,16
    9480:	1886b03a 	or	r3,r3,r2
    9484:	1900042e 	bgeu	r3,r4,9498 <__umoddi3+0xec>
    9488:	1c07883a 	add	r3,r3,r16
    948c:	1c000236 	bltu	r3,r16,9498 <__umoddi3+0xec>
    9490:	1900012e 	bgeu	r3,r4,9498 <__umoddi3+0xec>
    9494:	1c07883a 	add	r3,r3,r16
    9498:	1929c83a 	sub	r20,r3,r4
    949c:	a009883a 	mov	r4,r20
    94a0:	880b883a 	mov	r5,r17
    94a4:	000a83c0 	call	a83c <__umodsi3>
    94a8:	102d883a 	mov	r22,r2
    94ac:	a009883a 	mov	r4,r20
    94b0:	880b883a 	mov	r5,r17
    94b4:	b02c943a 	slli	r22,r22,16
    94b8:	000a8340 	call	a834 <__udivsi3>
    94bc:	1009883a 	mov	r4,r2
    94c0:	900b883a 	mov	r5,r18
    94c4:	9cffffcc 	andi	r19,r19,65535
    94c8:	000a8440 	call	a844 <__mulsi3>
    94cc:	b4e6b03a 	or	r19,r22,r19
    94d0:	9880572e 	bgeu	r19,r2,9630 <__umoddi3+0x284>
    94d4:	00005206 	br	9620 <__umoddi3+0x274>
    94d8:	29c05936 	bltu	r5,r7,9640 <__umoddi3+0x294>
    94dc:	00bfffd4 	movui	r2,65535
    94e0:	11c0652e 	bgeu	r2,r7,9678 <__umoddi3+0x2cc>
    94e4:	00804034 	movhi	r2,256
    94e8:	10bfffc4 	addi	r2,r2,-1
    94ec:	11c11936 	bltu	r2,r7,9954 <__umoddi3+0x5a8>
    94f0:	00c00404 	movi	r3,16
    94f4:	1827883a 	mov	r19,r3
    94f8:	38c6d83a 	srl	r3,r7,r3
    94fc:	01000074 	movhi	r4,1
    9500:	2136f904 	addi	r4,r4,-9244
    9504:	04000804 	movi	r16,32
    9508:	20c7883a 	add	r3,r4,r3
    950c:	18800003 	ldbu	r2,0(r3)
    9510:	14e7883a 	add	r19,r2,r19
    9514:	84e1c83a 	sub	r16,r16,r19
    9518:	8000671e 	bne	r16,zero,96b8 <__umoddi3+0x30c>
    951c:	3c400136 	bltu	r7,r17,9524 <__umoddi3+0x178>
    9520:	91812536 	bltu	r18,r6,99b8 <__umoddi3+0x60c>
    9524:	9185c83a 	sub	r2,r18,r6
    9528:	89e3c83a 	sub	r17,r17,r7
    952c:	90a5803a 	cmpltu	r18,r18,r2
    9530:	8ca9c83a 	sub	r20,r17,r18
    9534:	a007883a 	mov	r3,r20
    9538:	00004306 	br	9648 <__umoddi3+0x29c>
    953c:	3000041e 	bne	r6,zero,9550 <__umoddi3+0x1a4>
    9540:	01000044 	movi	r4,1
    9544:	000b883a 	mov	r5,zero
    9548:	000a8340 	call	a834 <__udivsi3>
    954c:	1021883a 	mov	r16,r2
    9550:	00bfffd4 	movui	r2,65535
    9554:	1400532e 	bgeu	r2,r16,96a4 <__umoddi3+0x2f8>
    9558:	00804034 	movhi	r2,256
    955c:	10bfffc4 	addi	r2,r2,-1
    9560:	14010536 	bltu	r2,r16,9978 <__umoddi3+0x5cc>
    9564:	00800404 	movi	r2,16
    9568:	1007883a 	mov	r3,r2
    956c:	8084d83a 	srl	r2,r16,r2
    9570:	01000074 	movhi	r4,1
    9574:	2136f904 	addi	r4,r4,-9244
    9578:	05400804 	movi	r21,32
    957c:	2085883a 	add	r2,r4,r2
    9580:	10800003 	ldbu	r2,0(r2)
    9584:	10c7883a 	add	r3,r2,r3
    9588:	a8ebc83a 	sub	r21,r21,r3
    958c:	a800b81e 	bne	r21,zero,9870 <__umoddi3+0x4c4>
    9590:	8028d43a 	srli	r20,r16,16
    9594:	8c23c83a 	sub	r17,r17,r16
    9598:	85bfffcc 	andi	r22,r16,65535
    959c:	8809883a 	mov	r4,r17
    95a0:	a00b883a 	mov	r5,r20
    95a4:	000a83c0 	call	a83c <__umodsi3>
    95a8:	8809883a 	mov	r4,r17
    95ac:	a00b883a 	mov	r5,r20
    95b0:	1025883a 	mov	r18,r2
    95b4:	000a8340 	call	a834 <__udivsi3>
    95b8:	1009883a 	mov	r4,r2
    95bc:	b00b883a 	mov	r5,r22
    95c0:	000a8440 	call	a844 <__mulsi3>
    95c4:	1009883a 	mov	r4,r2
    95c8:	9006943a 	slli	r3,r18,16
    95cc:	9804d43a 	srli	r2,r19,16
    95d0:	1886b03a 	or	r3,r3,r2
    95d4:	1900032e 	bgeu	r3,r4,95e4 <__umoddi3+0x238>
    95d8:	1c07883a 	add	r3,r3,r16
    95dc:	1c000136 	bltu	r3,r16,95e4 <__umoddi3+0x238>
    95e0:	1900f336 	bltu	r3,r4,99b0 <__umoddi3+0x604>
    95e4:	1923c83a 	sub	r17,r3,r4
    95e8:	8809883a 	mov	r4,r17
    95ec:	a00b883a 	mov	r5,r20
    95f0:	000a83c0 	call	a83c <__umodsi3>
    95f4:	102f883a 	mov	r23,r2
    95f8:	8809883a 	mov	r4,r17
    95fc:	a00b883a 	mov	r5,r20
    9600:	b82e943a 	slli	r23,r23,16
    9604:	000a8340 	call	a834 <__udivsi3>
    9608:	1009883a 	mov	r4,r2
    960c:	b00b883a 	mov	r5,r22
    9610:	9cffffcc 	andi	r19,r19,65535
    9614:	000a8440 	call	a844 <__mulsi3>
    9618:	bce6b03a 	or	r19,r23,r19
    961c:	9880042e 	bgeu	r19,r2,9630 <__umoddi3+0x284>
    9620:	9c27883a 	add	r19,r19,r16
    9624:	9c000236 	bltu	r19,r16,9630 <__umoddi3+0x284>
    9628:	9880012e 	bgeu	r19,r2,9630 <__umoddi3+0x284>
    962c:	9c27883a 	add	r19,r19,r16
    9630:	9885c83a 	sub	r2,r19,r2
    9634:	1544d83a 	srl	r2,r2,r21
    9638:	0007883a 	mov	r3,zero
    963c:	00000206 	br	9648 <__umoddi3+0x29c>
    9640:	2005883a 	mov	r2,r4
    9644:	2807883a 	mov	r3,r5
    9648:	dfc00c17 	ldw	ra,48(sp)
    964c:	df000b17 	ldw	fp,44(sp)
    9650:	ddc00a17 	ldw	r23,40(sp)
    9654:	dd800917 	ldw	r22,36(sp)
    9658:	dd400817 	ldw	r21,32(sp)
    965c:	dd000717 	ldw	r20,28(sp)
    9660:	dcc00617 	ldw	r19,24(sp)
    9664:	dc800517 	ldw	r18,20(sp)
    9668:	dc400417 	ldw	r17,16(sp)
    966c:	dc000317 	ldw	r16,12(sp)
    9670:	dec00d04 	addi	sp,sp,52
    9674:	f800283a 	ret
    9678:	00803fc4 	movi	r2,255
    967c:	11c0b236 	bltu	r2,r7,9948 <__umoddi3+0x59c>
    9680:	0007883a 	mov	r3,zero
    9684:	0027883a 	mov	r19,zero
    9688:	003f9b06 	br	94f8 <__umoddi3+0x14c>
    968c:	00804034 	movhi	r2,256
    9690:	10bfffc4 	addi	r2,r2,-1
    9694:	1180b236 	bltu	r2,r6,9960 <__umoddi3+0x5b4>
    9698:	00800404 	movi	r2,16
    969c:	1009883a 	mov	r4,r2
    96a0:	003f5a06 	br	940c <__umoddi3+0x60>
    96a4:	00803fc4 	movi	r2,255
    96a8:	1400b036 	bltu	r2,r16,996c <__umoddi3+0x5c0>
    96ac:	0005883a 	mov	r2,zero
    96b0:	0007883a 	mov	r3,zero
    96b4:	003fad06 	br	956c <__umoddi3+0x1c0>
    96b8:	34c4d83a 	srl	r2,r6,r19
    96bc:	3c0e983a 	sll	r7,r7,r16
    96c0:	8cf8d83a 	srl	fp,r17,r19
    96c4:	8c22983a 	sll	r17,r17,r16
    96c8:	38a8b03a 	or	r20,r7,r2
    96cc:	a02ad43a 	srli	r21,r20,16
    96d0:	94c4d83a 	srl	r2,r18,r19
    96d4:	e009883a 	mov	r4,fp
    96d8:	a80b883a 	mov	r5,r21
    96dc:	342c983a 	sll	r22,r6,r16
    96e0:	88a2b03a 	or	r17,r17,r2
    96e4:	000a83c0 	call	a83c <__umodsi3>
    96e8:	e009883a 	mov	r4,fp
    96ec:	a80b883a 	mov	r5,r21
    96f0:	a5ffffcc 	andi	r23,r20,65535
    96f4:	d8800215 	stw	r2,8(sp)
    96f8:	000a8340 	call	a834 <__udivsi3>
    96fc:	1009883a 	mov	r4,r2
    9700:	b80b883a 	mov	r5,r23
    9704:	1039883a 	mov	fp,r2
    9708:	000a8440 	call	a844 <__mulsi3>
    970c:	d8c00217 	ldw	r3,8(sp)
    9710:	1009883a 	mov	r4,r2
    9714:	8804d43a 	srli	r2,r17,16
    9718:	1806943a 	slli	r3,r3,16
    971c:	9424983a 	sll	r18,r18,r16
    9720:	1886b03a 	or	r3,r3,r2
    9724:	1900042e 	bgeu	r3,r4,9738 <__umoddi3+0x38c>
    9728:	1d07883a 	add	r3,r3,r20
    972c:	e0bfffc4 	addi	r2,fp,-1
    9730:	1d009b2e 	bgeu	r3,r20,99a0 <__umoddi3+0x5f4>
    9734:	1039883a 	mov	fp,r2
    9738:	1907c83a 	sub	r3,r3,r4
    973c:	1809883a 	mov	r4,r3
    9740:	a80b883a 	mov	r5,r21
    9744:	d8c00215 	stw	r3,8(sp)
    9748:	000a83c0 	call	a83c <__umodsi3>
    974c:	d8c00217 	ldw	r3,8(sp)
    9750:	a80b883a 	mov	r5,r21
    9754:	d8800015 	stw	r2,0(sp)
    9758:	1809883a 	mov	r4,r3
    975c:	000a8340 	call	a834 <__udivsi3>
    9760:	1009883a 	mov	r4,r2
    9764:	b80b883a 	mov	r5,r23
    9768:	102b883a 	mov	r21,r2
    976c:	000a8440 	call	a844 <__mulsi3>
    9770:	d9c00017 	ldw	r7,0(sp)
    9774:	8c7fffcc 	andi	r17,r17,65535
    9778:	380e943a 	slli	r7,r7,16
    977c:	3c4eb03a 	or	r7,r7,r17
    9780:	3880042e 	bgeu	r7,r2,9794 <__umoddi3+0x3e8>
    9784:	3d0f883a 	add	r7,r7,r20
    9788:	a8ffffc4 	addi	r3,r21,-1
    978c:	3d00802e 	bgeu	r7,r20,9990 <__umoddi3+0x5e4>
    9790:	182b883a 	mov	r21,r3
    9794:	e038943a 	slli	fp,fp,16
    9798:	b010d43a 	srli	r8,r22,16
    979c:	b1bfffcc 	andi	r6,r22,65535
    97a0:	af2ab03a 	or	r21,r21,fp
    97a4:	a82ed43a 	srli	r23,r21,16
    97a8:	ad7fffcc 	andi	r21,r21,65535
    97ac:	300b883a 	mov	r5,r6
    97b0:	a809883a 	mov	r4,r21
    97b4:	38a3c83a 	sub	r17,r7,r2
    97b8:	d9800115 	stw	r6,4(sp)
    97bc:	da000015 	stw	r8,0(sp)
    97c0:	000a8440 	call	a844 <__mulsi3>
    97c4:	da000017 	ldw	r8,0(sp)
    97c8:	a809883a 	mov	r4,r21
    97cc:	1039883a 	mov	fp,r2
    97d0:	400b883a 	mov	r5,r8
    97d4:	da000215 	stw	r8,8(sp)
    97d8:	000a8440 	call	a844 <__mulsi3>
    97dc:	d9800117 	ldw	r6,4(sp)
    97e0:	b809883a 	mov	r4,r23
    97e4:	d8800015 	stw	r2,0(sp)
    97e8:	300b883a 	mov	r5,r6
    97ec:	000a8440 	call	a844 <__mulsi3>
    97f0:	d8c00217 	ldw	r3,8(sp)
    97f4:	b809883a 	mov	r4,r23
    97f8:	102b883a 	mov	r21,r2
    97fc:	180b883a 	mov	r5,r3
    9800:	000a8440 	call	a844 <__mulsi3>
    9804:	d9c00017 	ldw	r7,0(sp)
    9808:	1007883a 	mov	r3,r2
    980c:	e004d43a 	srli	r2,fp,16
    9810:	a9c9883a 	add	r4,r21,r7
    9814:	2089883a 	add	r4,r4,r2
    9818:	2540022e 	bgeu	r4,r21,9824 <__umoddi3+0x478>
    981c:	00800074 	movhi	r2,1
    9820:	1887883a 	add	r3,r3,r2
    9824:	2004d43a 	srli	r2,r4,16
    9828:	2008943a 	slli	r4,r4,16
    982c:	e73fffcc 	andi	fp,fp,65535
    9830:	1887883a 	add	r3,r3,r2
    9834:	2709883a 	add	r4,r4,fp
    9838:	88c03d36 	bltu	r17,r3,9930 <__umoddi3+0x584>
    983c:	88c06126 	beq	r17,r3,99c4 <__umoddi3+0x618>
    9840:	88c7c83a 	sub	r3,r17,r3
    9844:	202d883a 	mov	r22,r4
    9848:	95adc83a 	sub	r22,r18,r22
    984c:	95a5803a 	cmpltu	r18,r18,r22
    9850:	1c87c83a 	sub	r3,r3,r18
    9854:	1cc4983a 	sll	r2,r3,r19
    9858:	b42cd83a 	srl	r22,r22,r16
    985c:	1c06d83a 	srl	r3,r3,r16
    9860:	1584b03a 	or	r2,r2,r22
    9864:	003f7806 	br	9648 <__umoddi3+0x29c>
    9868:	002b883a 	mov	r21,zero
    986c:	003ef506 	br	9444 <__umoddi3+0x98>
    9870:	8560983a 	sll	r16,r16,r21
    9874:	88e6d83a 	srl	r19,r17,r3
    9878:	90c6d83a 	srl	r3,r18,r3
    987c:	8028d43a 	srli	r20,r16,16
    9880:	8d62983a 	sll	r17,r17,r21
    9884:	9809883a 	mov	r4,r19
    9888:	a00b883a 	mov	r5,r20
    988c:	88eeb03a 	or	r23,r17,r3
    9890:	000a83c0 	call	a83c <__umodsi3>
    9894:	9809883a 	mov	r4,r19
    9898:	a00b883a 	mov	r5,r20
    989c:	1023883a 	mov	r17,r2
    98a0:	85bfffcc 	andi	r22,r16,65535
    98a4:	000a8340 	call	a834 <__udivsi3>
    98a8:	1009883a 	mov	r4,r2
    98ac:	b00b883a 	mov	r5,r22
    98b0:	000a8440 	call	a844 <__mulsi3>
    98b4:	1007883a 	mov	r3,r2
    98b8:	8808943a 	slli	r4,r17,16
    98bc:	b804d43a 	srli	r2,r23,16
    98c0:	9566983a 	sll	r19,r18,r21
    98c4:	2088b03a 	or	r4,r4,r2
    98c8:	20c0042e 	bgeu	r4,r3,98dc <__umoddi3+0x530>
    98cc:	2409883a 	add	r4,r4,r16
    98d0:	24000236 	bltu	r4,r16,98dc <__umoddi3+0x530>
    98d4:	20c0012e 	bgeu	r4,r3,98dc <__umoddi3+0x530>
    98d8:	2409883a 	add	r4,r4,r16
    98dc:	20e5c83a 	sub	r18,r4,r3
    98e0:	9009883a 	mov	r4,r18
    98e4:	a00b883a 	mov	r5,r20
    98e8:	000a83c0 	call	a83c <__umodsi3>
    98ec:	1023883a 	mov	r17,r2
    98f0:	9009883a 	mov	r4,r18
    98f4:	a00b883a 	mov	r5,r20
    98f8:	8822943a 	slli	r17,r17,16
    98fc:	000a8340 	call	a834 <__udivsi3>
    9900:	1009883a 	mov	r4,r2
    9904:	b00b883a 	mov	r5,r22
    9908:	bdffffcc 	andi	r23,r23,65535
    990c:	000a8440 	call	a844 <__mulsi3>
    9910:	8de2b03a 	or	r17,r17,r23
    9914:	8880042e 	bgeu	r17,r2,9928 <__umoddi3+0x57c>
    9918:	8c23883a 	add	r17,r17,r16
    991c:	8c000236 	bltu	r17,r16,9928 <__umoddi3+0x57c>
    9920:	8880012e 	bgeu	r17,r2,9928 <__umoddi3+0x57c>
    9924:	8c23883a 	add	r17,r17,r16
    9928:	88a3c83a 	sub	r17,r17,r2
    992c:	003f1b06 	br	959c <__umoddi3+0x1f0>
    9930:	25adc83a 	sub	r22,r4,r22
    9934:	1d07c83a 	sub	r3,r3,r20
    9938:	2589803a 	cmpltu	r4,r4,r22
    993c:	1907c83a 	sub	r3,r3,r4
    9940:	88c7c83a 	sub	r3,r17,r3
    9944:	003fc006 	br	9848 <__umoddi3+0x49c>
    9948:	00c00204 	movi	r3,8
    994c:	1827883a 	mov	r19,r3
    9950:	003ee906 	br	94f8 <__umoddi3+0x14c>
    9954:	00c00604 	movi	r3,24
    9958:	1827883a 	mov	r19,r3
    995c:	003ee606 	br	94f8 <__umoddi3+0x14c>
    9960:	00800604 	movi	r2,24
    9964:	1009883a 	mov	r4,r2
    9968:	003ea806 	br	940c <__umoddi3+0x60>
    996c:	00800204 	movi	r2,8
    9970:	1007883a 	mov	r3,r2
    9974:	003efd06 	br	956c <__umoddi3+0x1c0>
    9978:	00800604 	movi	r2,24
    997c:	1007883a 	mov	r3,r2
    9980:	003efa06 	br	956c <__umoddi3+0x1c0>
    9984:	00800204 	movi	r2,8
    9988:	1009883a 	mov	r4,r2
    998c:	003e9f06 	br	940c <__umoddi3+0x60>
    9990:	38bf7f2e 	bgeu	r7,r2,9790 <__umoddi3+0x3e4>
    9994:	ad7fff84 	addi	r21,r21,-2
    9998:	3d0f883a 	add	r7,r7,r20
    999c:	003f7d06 	br	9794 <__umoddi3+0x3e8>
    99a0:	193f642e 	bgeu	r3,r4,9734 <__umoddi3+0x388>
    99a4:	e73fff84 	addi	fp,fp,-2
    99a8:	1d07883a 	add	r3,r3,r20
    99ac:	003f6206 	br	9738 <__umoddi3+0x38c>
    99b0:	1c07883a 	add	r3,r3,r16
    99b4:	003f0b06 	br	95e4 <__umoddi3+0x238>
    99b8:	9005883a 	mov	r2,r18
    99bc:	a007883a 	mov	r3,r20
    99c0:	003f2106 	br	9648 <__umoddi3+0x29c>
    99c4:	913fda36 	bltu	r18,r4,9930 <__umoddi3+0x584>
    99c8:	202d883a 	mov	r22,r4
    99cc:	0007883a 	mov	r3,zero
    99d0:	003f9d06 	br	9848 <__umoddi3+0x49c>

000099d4 <_fpadd_parts>:
    99d4:	2005883a 	mov	r2,r4
    99d8:	21000017 	ldw	r4,0(r4)
    99dc:	01c00044 	movi	r7,1
    99e0:	3900622e 	bgeu	r7,r4,9b6c <_fpadd_parts+0x198>
    99e4:	28c00017 	ldw	r3,0(r5)
    99e8:	38c05f2e 	bgeu	r7,r3,9b68 <_fpadd_parts+0x194>
    99ec:	01c00104 	movi	r7,4
    99f0:	21c0c626 	beq	r4,r7,9d0c <_fpadd_parts+0x338>
    99f4:	19c05c26 	beq	r3,r7,9b68 <_fpadd_parts+0x194>
    99f8:	01c00084 	movi	r7,2
    99fc:	19c06b26 	beq	r3,r7,9bac <_fpadd_parts+0x1d8>
    9a00:	21c05926 	beq	r4,r7,9b68 <_fpadd_parts+0x194>
    9a04:	11c00217 	ldw	r7,8(r2)
    9a08:	2ac00217 	ldw	r11,8(r5)
    9a0c:	13000317 	ldw	r12,12(r2)
    9a10:	13400417 	ldw	r13,16(r2)
    9a14:	3ac9c83a 	sub	r4,r7,r11
    9a18:	2a000317 	ldw	r8,12(r5)
    9a1c:	2a400417 	ldw	r9,16(r5)
    9a20:	2015883a 	mov	r10,r4
    9a24:	20007516 	blt	r4,zero,9bfc <_fpadd_parts+0x228>
    9a28:	00c00fc4 	movi	r3,63
    9a2c:	1a805016 	blt	r3,r10,9b70 <_fpadd_parts+0x19c>
    9a30:	0100870e 	bge	zero,r4,9c50 <_fpadd_parts+0x27c>
    9a34:	50fff804 	addi	r3,r10,-32
    9a38:	18009916 	blt	r3,zero,9ca0 <_fpadd_parts+0x2cc>
    9a3c:	48d6d83a 	srl	r11,r9,r3
    9a40:	001d883a 	mov	r14,zero
    9a44:	18009e16 	blt	r3,zero,9cc0 <_fpadd_parts+0x2ec>
    9a48:	01000044 	movi	r4,1
    9a4c:	20c6983a 	sll	r3,r4,r3
    9a50:	0015883a 	mov	r10,zero
    9a54:	513fffc4 	addi	r4,r10,-1
    9a58:	2295403a 	cmpgeu	r10,r4,r10
    9a5c:	1a87c83a 	sub	r3,r3,r10
    9a60:	1a52703a 	and	r9,r3,r9
    9a64:	2210703a 	and	r8,r4,r8
    9a68:	4250b03a 	or	r8,r8,r9
    9a6c:	4010c03a 	cmpne	r8,r8,zero
    9a70:	42d0b03a 	or	r8,r8,r11
    9a74:	7013883a 	mov	r9,r14
    9a78:	11000117 	ldw	r4,4(r2)
    9a7c:	28800117 	ldw	r2,4(r5)
    9a80:	20804126 	beq	r4,r2,9b88 <_fpadd_parts+0x1b4>
    9a84:	20006326 	beq	r4,zero,9c14 <_fpadd_parts+0x240>
    9a88:	4305c83a 	sub	r2,r8,r12
    9a8c:	4091803a 	cmpltu	r8,r8,r2
    9a90:	4b47c83a 	sub	r3,r9,r13
    9a94:	1a07c83a 	sub	r3,r3,r8
    9a98:	18006316 	blt	r3,zero,9c28 <_fpadd_parts+0x254>
    9a9c:	30000115 	stw	zero,4(r6)
    9aa0:	31c00215 	stw	r7,8(r6)
    9aa4:	30800315 	stw	r2,12(r6)
    9aa8:	30c00415 	stw	r3,16(r6)
    9aac:	11ffffc4 	addi	r7,r2,-1
    9ab0:	388b403a 	cmpgeu	r5,r7,r2
    9ab4:	194bc83a 	sub	r5,r3,r5
    9ab8:	01040034 	movhi	r4,4096
    9abc:	213fffc4 	addi	r4,r4,-1
    9ac0:	21401736 	bltu	r4,r5,9b20 <_fpadd_parts+0x14c>
    9ac4:	29008226 	beq	r5,r4,9cd0 <_fpadd_parts+0x2fc>
    9ac8:	31400217 	ldw	r5,8(r6)
    9acc:	02840034 	movhi	r10,4096
    9ad0:	52bfffc4 	addi	r10,r10,-1
    9ad4:	033fff84 	movi	r12,-2
    9ad8:	297fffc4 	addi	r5,r5,-1
    9adc:	00000106 	br	9ae4 <_fpadd_parts+0x110>
    9ae0:	3a804a26 	beq	r7,r10,9c0c <_fpadd_parts+0x238>
    9ae4:	1089883a 	add	r4,r2,r2
    9ae8:	2091803a 	cmpltu	r8,r4,r2
    9aec:	18c7883a 	add	r3,r3,r3
    9af0:	227fffc4 	addi	r9,r4,-1
    9af4:	40d1883a 	add	r8,r8,r3
    9af8:	490f403a 	cmpgeu	r7,r9,r4
    9afc:	41cfc83a 	sub	r7,r8,r7
    9b00:	2817883a 	mov	r11,r5
    9b04:	2005883a 	mov	r2,r4
    9b08:	4007883a 	mov	r3,r8
    9b0c:	297fffc4 	addi	r5,r5,-1
    9b10:	51fff32e 	bgeu	r10,r7,9ae0 <_fpadd_parts+0x10c>
    9b14:	31000315 	stw	r4,12(r6)
    9b18:	32000415 	stw	r8,16(r6)
    9b1c:	32c00215 	stw	r11,8(r6)
    9b20:	010000c4 	movi	r4,3
    9b24:	31000015 	stw	r4,0(r6)
    9b28:	01080034 	movhi	r4,8192
    9b2c:	213fffc4 	addi	r4,r4,-1
    9b30:	20c00b2e 	bgeu	r4,r3,9b60 <_fpadd_parts+0x18c>
    9b34:	180e97fa 	slli	r7,r3,31
    9b38:	1008d07a 	srli	r4,r2,1
    9b3c:	31400217 	ldw	r5,8(r6)
    9b40:	1806d07a 	srli	r3,r3,1
    9b44:	1080004c 	andi	r2,r2,1
    9b48:	3908b03a 	or	r4,r7,r4
    9b4c:	1108b03a 	or	r4,r2,r4
    9b50:	29400044 	addi	r5,r5,1
    9b54:	31000315 	stw	r4,12(r6)
    9b58:	30c00415 	stw	r3,16(r6)
    9b5c:	31400215 	stw	r5,8(r6)
    9b60:	3005883a 	mov	r2,r6
    9b64:	f800283a 	ret
    9b68:	2805883a 	mov	r2,r5
    9b6c:	f800283a 	ret
    9b70:	59c01e0e 	bge	r11,r7,9bec <_fpadd_parts+0x218>
    9b74:	11000117 	ldw	r4,4(r2)
    9b78:	28800117 	ldw	r2,4(r5)
    9b7c:	0011883a 	mov	r8,zero
    9b80:	0013883a 	mov	r9,zero
    9b84:	20bfbf1e 	bne	r4,r2,9a84 <_fpadd_parts+0xb0>
    9b88:	4305883a 	add	r2,r8,r12
    9b8c:	1207803a 	cmpltu	r3,r2,r8
    9b90:	4b53883a 	add	r9,r9,r13
    9b94:	1a47883a 	add	r3,r3,r9
    9b98:	31000115 	stw	r4,4(r6)
    9b9c:	31c00215 	stw	r7,8(r6)
    9ba0:	30800315 	stw	r2,12(r6)
    9ba4:	30c00415 	stw	r3,16(r6)
    9ba8:	003fdd06 	br	9b20 <_fpadd_parts+0x14c>
    9bac:	20ffef1e 	bne	r4,r3,9b6c <_fpadd_parts+0x198>
    9bb0:	31000015 	stw	r4,0(r6)
    9bb4:	10c00117 	ldw	r3,4(r2)
    9bb8:	30c00115 	stw	r3,4(r6)
    9bbc:	10c00217 	ldw	r3,8(r2)
    9bc0:	11000117 	ldw	r4,4(r2)
    9bc4:	29400117 	ldw	r5,4(r5)
    9bc8:	30c00215 	stw	r3,8(r6)
    9bcc:	10c00317 	ldw	r3,12(r2)
    9bd0:	2908703a 	and	r4,r5,r4
    9bd4:	30c00315 	stw	r3,12(r6)
    9bd8:	10c00417 	ldw	r3,16(r2)
    9bdc:	31000115 	stw	r4,4(r6)
    9be0:	3005883a 	mov	r2,r6
    9be4:	30c00415 	stw	r3,16(r6)
    9be8:	f800283a 	ret
    9bec:	580f883a 	mov	r7,r11
    9bf0:	0019883a 	mov	r12,zero
    9bf4:	001b883a 	mov	r13,zero
    9bf8:	003f9f06 	br	9a78 <_fpadd_parts+0xa4>
    9bfc:	0115c83a 	sub	r10,zero,r4
    9c00:	00c00fc4 	movi	r3,63
    9c04:	1abfda16 	blt	r3,r10,9b70 <_fpadd_parts+0x19c>
    9c08:	003f8906 	br	9a30 <_fpadd_parts+0x5c>
    9c0c:	627fb52e 	bgeu	r12,r9,9ae4 <_fpadd_parts+0x110>
    9c10:	003fc006 	br	9b14 <_fpadd_parts+0x140>
    9c14:	6205c83a 	sub	r2,r12,r8
    9c18:	6099803a 	cmpltu	r12,r12,r2
    9c1c:	6a47c83a 	sub	r3,r13,r9
    9c20:	1b07c83a 	sub	r3,r3,r12
    9c24:	183f9d0e 	bge	r3,zero,9a9c <_fpadd_parts+0xc8>
    9c28:	0085c83a 	sub	r2,zero,r2
    9c2c:	1008c03a 	cmpne	r4,r2,zero
    9c30:	00c7c83a 	sub	r3,zero,r3
    9c34:	1907c83a 	sub	r3,r3,r4
    9c38:	01000044 	movi	r4,1
    9c3c:	31000115 	stw	r4,4(r6)
    9c40:	31c00215 	stw	r7,8(r6)
    9c44:	30800315 	stw	r2,12(r6)
    9c48:	30c00415 	stw	r3,16(r6)
    9c4c:	003f9706 	br	9aac <_fpadd_parts+0xd8>
    9c50:	203f8926 	beq	r4,zero,9a78 <_fpadd_parts+0xa4>
    9c54:	50fff804 	addi	r3,r10,-32
    9c58:	3a8f883a 	add	r7,r7,r10
    9c5c:	18002316 	blt	r3,zero,9cec <_fpadd_parts+0x318>
    9c60:	68d6d83a 	srl	r11,r13,r3
    9c64:	001d883a 	mov	r14,zero
    9c68:	18001c16 	blt	r3,zero,9cdc <_fpadd_parts+0x308>
    9c6c:	01000044 	movi	r4,1
    9c70:	20c6983a 	sll	r3,r4,r3
    9c74:	0015883a 	mov	r10,zero
    9c78:	513fffc4 	addi	r4,r10,-1
    9c7c:	2295403a 	cmpgeu	r10,r4,r10
    9c80:	1a87c83a 	sub	r3,r3,r10
    9c84:	1b5a703a 	and	r13,r3,r13
    9c88:	2318703a 	and	r12,r4,r12
    9c8c:	6358b03a 	or	r12,r12,r13
    9c90:	6018c03a 	cmpne	r12,r12,zero
    9c94:	62d8b03a 	or	r12,r12,r11
    9c98:	701b883a 	mov	r13,r14
    9c9c:	003f7606 	br	9a78 <_fpadd_parts+0xa4>
    9ca0:	4808907a 	slli	r4,r9,1
    9ca4:	02c007c4 	movi	r11,31
    9ca8:	5a97c83a 	sub	r11,r11,r10
    9cac:	22c8983a 	sll	r4,r4,r11
    9cb0:	4296d83a 	srl	r11,r8,r10
    9cb4:	4a9cd83a 	srl	r14,r9,r10
    9cb8:	22d6b03a 	or	r11,r4,r11
    9cbc:	003f6106 	br	9a44 <_fpadd_parts+0x70>
    9cc0:	00c00044 	movi	r3,1
    9cc4:	1a94983a 	sll	r10,r3,r10
    9cc8:	0007883a 	mov	r3,zero
    9ccc:	003f6106 	br	9a54 <_fpadd_parts+0x80>
    9cd0:	013fff84 	movi	r4,-2
    9cd4:	21ff7c2e 	bgeu	r4,r7,9ac8 <_fpadd_parts+0xf4>
    9cd8:	003f9106 	br	9b20 <_fpadd_parts+0x14c>
    9cdc:	00c00044 	movi	r3,1
    9ce0:	1a94983a 	sll	r10,r3,r10
    9ce4:	0007883a 	mov	r3,zero
    9ce8:	003fe306 	br	9c78 <_fpadd_parts+0x2a4>
    9cec:	6816907a 	slli	r11,r13,1
    9cf0:	010007c4 	movi	r4,31
    9cf4:	2289c83a 	sub	r4,r4,r10
    9cf8:	5908983a 	sll	r4,r11,r4
    9cfc:	6296d83a 	srl	r11,r12,r10
    9d00:	6a9cd83a 	srl	r14,r13,r10
    9d04:	22d6b03a 	or	r11,r4,r11
    9d08:	003fd706 	br	9c68 <_fpadd_parts+0x294>
    9d0c:	193f971e 	bne	r3,r4,9b6c <_fpadd_parts+0x198>
    9d10:	11000117 	ldw	r4,4(r2)
    9d14:	28c00117 	ldw	r3,4(r5)
    9d18:	20ff9426 	beq	r4,r3,9b6c <_fpadd_parts+0x198>
    9d1c:	00800074 	movhi	r2,1
    9d20:	10b6f404 	addi	r2,r2,-9264
    9d24:	f800283a 	ret

00009d28 <__adddf3>:
    9d28:	deffec04 	addi	sp,sp,-80
    9d2c:	d9001115 	stw	r4,68(sp)
    9d30:	d9401215 	stw	r5,72(sp)
    9d34:	d9001104 	addi	r4,sp,68
    9d38:	d9400a04 	addi	r5,sp,40
    9d3c:	dfc01315 	stw	ra,76(sp)
    9d40:	d9c01015 	stw	r7,64(sp)
    9d44:	d9800f15 	stw	r6,60(sp)
    9d48:	000ac4c0 	call	ac4c <__unpack_d>
    9d4c:	d9000f04 	addi	r4,sp,60
    9d50:	d9400504 	addi	r5,sp,20
    9d54:	000ac4c0 	call	ac4c <__unpack_d>
    9d58:	d9000a04 	addi	r4,sp,40
    9d5c:	d9400504 	addi	r5,sp,20
    9d60:	d80d883a 	mov	r6,sp
    9d64:	00099d40 	call	99d4 <_fpadd_parts>
    9d68:	1009883a 	mov	r4,r2
    9d6c:	000aa280 	call	aa28 <__pack_d>
    9d70:	dfc01317 	ldw	ra,76(sp)
    9d74:	dec01404 	addi	sp,sp,80
    9d78:	f800283a 	ret

00009d7c <__subdf3>:
    9d7c:	deffec04 	addi	sp,sp,-80
    9d80:	d9001115 	stw	r4,68(sp)
    9d84:	d9401215 	stw	r5,72(sp)
    9d88:	d9001104 	addi	r4,sp,68
    9d8c:	d9400a04 	addi	r5,sp,40
    9d90:	dfc01315 	stw	ra,76(sp)
    9d94:	d9c01015 	stw	r7,64(sp)
    9d98:	d9800f15 	stw	r6,60(sp)
    9d9c:	000ac4c0 	call	ac4c <__unpack_d>
    9da0:	d9000f04 	addi	r4,sp,60
    9da4:	d9400504 	addi	r5,sp,20
    9da8:	000ac4c0 	call	ac4c <__unpack_d>
    9dac:	d8800617 	ldw	r2,24(sp)
    9db0:	d9000a04 	addi	r4,sp,40
    9db4:	d9400504 	addi	r5,sp,20
    9db8:	d80d883a 	mov	r6,sp
    9dbc:	1080005c 	xori	r2,r2,1
    9dc0:	d8800615 	stw	r2,24(sp)
    9dc4:	00099d40 	call	99d4 <_fpadd_parts>
    9dc8:	1009883a 	mov	r4,r2
    9dcc:	000aa280 	call	aa28 <__pack_d>
    9dd0:	dfc01317 	ldw	ra,76(sp)
    9dd4:	dec01404 	addi	sp,sp,80
    9dd8:	f800283a 	ret

00009ddc <__muldf3>:
    9ddc:	deffe404 	addi	sp,sp,-112
    9de0:	d9001115 	stw	r4,68(sp)
    9de4:	d9401215 	stw	r5,72(sp)
    9de8:	d9001104 	addi	r4,sp,68
    9dec:	d9400a04 	addi	r5,sp,40
    9df0:	dfc01b15 	stw	ra,108(sp)
    9df4:	d9800f15 	stw	r6,60(sp)
    9df8:	d9c01015 	stw	r7,64(sp)
    9dfc:	ddc01a15 	stw	r23,104(sp)
    9e00:	dd801915 	stw	r22,100(sp)
    9e04:	dd401815 	stw	r21,96(sp)
    9e08:	dd001715 	stw	r20,92(sp)
    9e0c:	dcc01615 	stw	r19,88(sp)
    9e10:	dc801515 	stw	r18,84(sp)
    9e14:	dc401415 	stw	r17,80(sp)
    9e18:	dc001315 	stw	r16,76(sp)
    9e1c:	000ac4c0 	call	ac4c <__unpack_d>
    9e20:	d9000f04 	addi	r4,sp,60
    9e24:	d9400504 	addi	r5,sp,20
    9e28:	000ac4c0 	call	ac4c <__unpack_d>
    9e2c:	d8c00a17 	ldw	r3,40(sp)
    9e30:	00800044 	movi	r2,1
    9e34:	10c01136 	bltu	r2,r3,9e7c <__muldf3+0xa0>
    9e38:	d8c00b17 	ldw	r3,44(sp)
    9e3c:	d8800617 	ldw	r2,24(sp)
    9e40:	d9000a04 	addi	r4,sp,40
    9e44:	1884c03a 	cmpne	r2,r3,r2
    9e48:	d8800b15 	stw	r2,44(sp)
    9e4c:	000aa280 	call	aa28 <__pack_d>
    9e50:	dfc01b17 	ldw	ra,108(sp)
    9e54:	ddc01a17 	ldw	r23,104(sp)
    9e58:	dd801917 	ldw	r22,100(sp)
    9e5c:	dd401817 	ldw	r21,96(sp)
    9e60:	dd001717 	ldw	r20,92(sp)
    9e64:	dcc01617 	ldw	r19,88(sp)
    9e68:	dc801517 	ldw	r18,84(sp)
    9e6c:	dc401417 	ldw	r17,80(sp)
    9e70:	dc001317 	ldw	r16,76(sp)
    9e74:	dec01c04 	addi	sp,sp,112
    9e78:	f800283a 	ret
    9e7c:	d9000517 	ldw	r4,20(sp)
    9e80:	11000636 	bltu	r2,r4,9e9c <__muldf3+0xc0>
    9e84:	d8800617 	ldw	r2,24(sp)
    9e88:	d8c00b17 	ldw	r3,44(sp)
    9e8c:	d9000504 	addi	r4,sp,20
    9e90:	1884c03a 	cmpne	r2,r3,r2
    9e94:	d8800615 	stw	r2,24(sp)
    9e98:	003fec06 	br	9e4c <__muldf3+0x70>
    9e9c:	00800104 	movi	r2,4
    9ea0:	1880051e 	bne	r3,r2,9eb8 <__muldf3+0xdc>
    9ea4:	00800084 	movi	r2,2
    9ea8:	20bfe31e 	bne	r4,r2,9e38 <__muldf3+0x5c>
    9eac:	01000074 	movhi	r4,1
    9eb0:	2136f404 	addi	r4,r4,-9264
    9eb4:	003fe506 	br	9e4c <__muldf3+0x70>
    9eb8:	2080031e 	bne	r4,r2,9ec8 <__muldf3+0xec>
    9ebc:	00800084 	movi	r2,2
    9ec0:	18bffa26 	beq	r3,r2,9eac <__muldf3+0xd0>
    9ec4:	003fef06 	br	9e84 <__muldf3+0xa8>
    9ec8:	00800084 	movi	r2,2
    9ecc:	18bfda26 	beq	r3,r2,9e38 <__muldf3+0x5c>
    9ed0:	20bfec26 	beq	r4,r2,9e84 <__muldf3+0xa8>
    9ed4:	dc000d17 	ldw	r16,52(sp)
    9ed8:	dd000817 	ldw	r20,32(sp)
    9edc:	dc800917 	ldw	r18,36(sp)
    9ee0:	8009883a 	mov	r4,r16
    9ee4:	000b883a 	mov	r5,zero
    9ee8:	a00d883a 	mov	r6,r20
    9eec:	000f883a 	mov	r7,zero
    9ef0:	000a86c0 	call	a86c <__muldi3>
    9ef4:	dc400e17 	ldw	r17,56(sp)
    9ef8:	9009883a 	mov	r4,r18
    9efc:	800d883a 	mov	r6,r16
    9f00:	000b883a 	mov	r5,zero
    9f04:	000f883a 	mov	r7,zero
    9f08:	102f883a 	mov	r23,r2
    9f0c:	1827883a 	mov	r19,r3
    9f10:	000a86c0 	call	a86c <__muldi3>
    9f14:	900d883a 	mov	r6,r18
    9f18:	8809883a 	mov	r4,r17
    9f1c:	000b883a 	mov	r5,zero
    9f20:	000f883a 	mov	r7,zero
    9f24:	102b883a 	mov	r21,r2
    9f28:	1821883a 	mov	r16,r3
    9f2c:	000a86c0 	call	a86c <__muldi3>
    9f30:	8809883a 	mov	r4,r17
    9f34:	000b883a 	mov	r5,zero
    9f38:	a00d883a 	mov	r6,r20
    9f3c:	000f883a 	mov	r7,zero
    9f40:	102d883a 	mov	r22,r2
    9f44:	1825883a 	mov	r18,r3
    9f48:	000a86c0 	call	a86c <__muldi3>
    9f4c:	154b883a 	add	r5,r2,r21
    9f50:	2889803a 	cmpltu	r4,r5,r2
    9f54:	1c07883a 	add	r3,r3,r16
    9f58:	20c9883a 	add	r4,r4,r3
    9f5c:	24004b36 	bltu	r4,r16,a08c <__muldf3+0x2b0>
    9f60:	8100011e 	bne	r16,r4,9f68 <__muldf3+0x18c>
    9f64:	2d404936 	bltu	r5,r21,a08c <__muldf3+0x2b0>
    9f68:	0011883a 	mov	r8,zero
    9f6c:	0007883a 	mov	r3,zero
    9f70:	2ccb883a 	add	r5,r5,r19
    9f74:	b80d883a 	mov	r6,r23
    9f78:	2cc0012e 	bgeu	r5,r19,9f80 <__muldf3+0x1a4>
    9f7c:	02000044 	movi	r8,1
    9f80:	258f883a 	add	r7,r4,r22
    9f84:	3909803a 	cmpltu	r4,r7,r4
    9f88:	da400c17 	ldw	r9,48(sp)
    9f8c:	2489883a 	add	r4,r4,r18
    9f90:	d8800717 	ldw	r2,28(sp)
    9f94:	20c9883a 	add	r4,r4,r3
    9f98:	da800b17 	ldw	r10,44(sp)
    9f9c:	d8c00617 	ldw	r3,24(sp)
    9fa0:	3a11883a 	add	r8,r7,r8
    9fa4:	4885883a 	add	r2,r9,r2
    9fa8:	50c6c03a 	cmpne	r3,r10,r3
    9fac:	41cf803a 	cmpltu	r7,r8,r7
    9fb0:	12400104 	addi	r9,r2,4
    9fb4:	d8c00115 	stw	r3,4(sp)
    9fb8:	3909883a 	add	r4,r7,r4
    9fbc:	da400215 	stw	r9,8(sp)
    9fc0:	03480034 	movhi	r13,8192
    9fc4:	6b7fffc4 	addi	r13,r13,-1
    9fc8:	4007883a 	mov	r3,r8
    9fcc:	6900102e 	bgeu	r13,r4,a010 <__muldf3+0x234>
    9fd0:	10800144 	addi	r2,r2,5
    9fd4:	180ed07a 	srli	r7,r3,1
    9fd8:	18c0004c 	andi	r3,r3,1
    9fdc:	201097fa 	slli	r8,r4,31
    9fe0:	281697fa 	slli	r11,r5,31
    9fe4:	2008d07a 	srli	r4,r4,1
    9fe8:	3014d07a 	srli	r10,r6,1
    9fec:	2812d07a 	srli	r9,r5,1
    9ff0:	1019883a 	mov	r12,r2
    9ff4:	18000226 	beq	r3,zero,a000 <__muldf3+0x224>
    9ff8:	5a8cb03a 	or	r6,r11,r10
    9ffc:	49600034 	orhi	r5,r9,32768
    a000:	41c6b03a 	or	r3,r8,r7
    a004:	10800044 	addi	r2,r2,1
    a008:	693ff236 	bltu	r13,r4,9fd4 <__muldf3+0x1f8>
    a00c:	db000215 	stw	r12,8(sp)
    a010:	03440034 	movhi	r13,4096
    a014:	6b7fffc4 	addi	r13,r13,-1
    a018:	69001336 	bltu	r13,r4,a068 <__muldf3+0x28c>
    a01c:	d8800217 	ldw	r2,8(sp)
    a020:	10bfffc4 	addi	r2,r2,-1
    a024:	18d3883a 	add	r9,r3,r3
    a028:	48c7803a 	cmpltu	r3,r9,r3
    a02c:	2109883a 	add	r4,r4,r4
    a030:	190f883a 	add	r7,r3,r4
    a034:	3191883a 	add	r8,r6,r6
    a038:	4197803a 	cmpltu	r11,r8,r6
    a03c:	2955883a 	add	r10,r5,r5
    a040:	1019883a 	mov	r12,r2
    a044:	4807883a 	mov	r3,r9
    a048:	3809883a 	mov	r4,r7
    a04c:	2800010e 	bge	r5,zero,a054 <__muldf3+0x278>
    a050:	48c00054 	ori	r3,r9,1
    a054:	400d883a 	mov	r6,r8
    a058:	5a8b883a 	add	r5,r11,r10
    a05c:	10bfffc4 	addi	r2,r2,-1
    a060:	69fff02e 	bgeu	r13,r7,a024 <__muldf3+0x248>
    a064:	db000215 	stw	r12,8(sp)
    a068:	18803fcc 	andi	r2,r3,255
    a06c:	01c02004 	movi	r7,128
    a070:	11c00926 	beq	r2,r7,a098 <__muldf3+0x2bc>
    a074:	008000c4 	movi	r2,3
    a078:	d9000415 	stw	r4,16(sp)
    a07c:	d8c00315 	stw	r3,12(sp)
    a080:	d8800015 	stw	r2,0(sp)
    a084:	d809883a 	mov	r4,sp
    a088:	003f7006 	br	9e4c <__muldf3+0x70>
    a08c:	0011883a 	mov	r8,zero
    a090:	00c00044 	movi	r3,1
    a094:	003fb606 	br	9f70 <__muldf3+0x194>
    a098:	19c0400c 	andi	r7,r3,256
    a09c:	383ff51e 	bne	r7,zero,a074 <__muldf3+0x298>
    a0a0:	314ab03a 	or	r5,r6,r5
    a0a4:	283ff326 	beq	r5,zero,a074 <__muldf3+0x298>
    a0a8:	1885883a 	add	r2,r3,r2
    a0ac:	10cb803a 	cmpltu	r5,r2,r3
    a0b0:	00ffc004 	movi	r3,-256
    a0b4:	10c6703a 	and	r3,r2,r3
    a0b8:	2909883a 	add	r4,r5,r4
    a0bc:	003fed06 	br	a074 <__muldf3+0x298>

0000a0c0 <__divdf3>:
    a0c0:	defff104 	addi	sp,sp,-60
    a0c4:	d9000c15 	stw	r4,48(sp)
    a0c8:	d9400d15 	stw	r5,52(sp)
    a0cc:	d9000c04 	addi	r4,sp,48
    a0d0:	d9400504 	addi	r5,sp,20
    a0d4:	dfc00e15 	stw	ra,56(sp)
    a0d8:	d9800a15 	stw	r6,40(sp)
    a0dc:	d9c00b15 	stw	r7,44(sp)
    a0e0:	000ac4c0 	call	ac4c <__unpack_d>
    a0e4:	d9000a04 	addi	r4,sp,40
    a0e8:	d80b883a 	mov	r5,sp
    a0ec:	000ac4c0 	call	ac4c <__unpack_d>
    a0f0:	d8c00517 	ldw	r3,20(sp)
    a0f4:	00800044 	movi	r2,1
    a0f8:	10c00536 	bltu	r2,r3,a110 <__divdf3+0x50>
    a0fc:	d9000504 	addi	r4,sp,20
    a100:	000aa280 	call	aa28 <__pack_d>
    a104:	dfc00e17 	ldw	ra,56(sp)
    a108:	dec00f04 	addi	sp,sp,60
    a10c:	f800283a 	ret
    a110:	d9000017 	ldw	r4,0(sp)
    a114:	11000536 	bltu	r2,r4,a12c <__divdf3+0x6c>
    a118:	d809883a 	mov	r4,sp
    a11c:	000aa280 	call	aa28 <__pack_d>
    a120:	dfc00e17 	ldw	ra,56(sp)
    a124:	dec00f04 	addi	sp,sp,60
    a128:	f800283a 	ret
    a12c:	d9800617 	ldw	r6,24(sp)
    a130:	d9400117 	ldw	r5,4(sp)
    a134:	00800104 	movi	r2,4
    a138:	314af03a 	xor	r5,r6,r5
    a13c:	d9400615 	stw	r5,24(sp)
    a140:	18800226 	beq	r3,r2,a14c <__divdf3+0x8c>
    a144:	01400084 	movi	r5,2
    a148:	1940041e 	bne	r3,r5,a15c <__divdf3+0x9c>
    a14c:	193feb1e 	bne	r3,r4,a0fc <__divdf3+0x3c>
    a150:	01000074 	movhi	r4,1
    a154:	2136f404 	addi	r4,r4,-9264
    a158:	003fe906 	br	a100 <__divdf3+0x40>
    a15c:	20803326 	beq	r4,r2,a22c <__divdf3+0x16c>
    a160:	21403726 	beq	r4,r5,a240 <__divdf3+0x180>
    a164:	d8800217 	ldw	r2,8(sp)
    a168:	d9000717 	ldw	r4,28(sp)
    a16c:	d8c00917 	ldw	r3,36(sp)
    a170:	da000417 	ldw	r8,16(sp)
    a174:	2089c83a 	sub	r4,r4,r2
    a178:	d9000715 	stw	r4,28(sp)
    a17c:	d8800817 	ldw	r2,32(sp)
    a180:	dbc00317 	ldw	r15,12(sp)
    a184:	1a000236 	bltu	r3,r8,a190 <__divdf3+0xd0>
    a188:	40c0081e 	bne	r8,r3,a1ac <__divdf3+0xec>
    a18c:	13c0072e 	bgeu	r2,r15,a1ac <__divdf3+0xec>
    a190:	108b883a 	add	r5,r2,r2
    a194:	288d803a 	cmpltu	r6,r5,r2
    a198:	18c7883a 	add	r3,r3,r3
    a19c:	213fffc4 	addi	r4,r4,-1
    a1a0:	2805883a 	mov	r2,r5
    a1a4:	30c7883a 	add	r3,r6,r3
    a1a8:	d9000715 	stw	r4,28(sp)
    a1ac:	01400f44 	movi	r5,61
    a1b0:	000f883a 	mov	r7,zero
    a1b4:	01040034 	movhi	r4,4096
    a1b8:	0019883a 	mov	r12,zero
    a1bc:	001b883a 	mov	r13,zero
    a1c0:	201697fa 	slli	r11,r4,31
    a1c4:	3814d07a 	srli	r10,r7,1
    a1c8:	297fffc4 	addi	r5,r5,-1
    a1cc:	1a000936 	bltu	r3,r8,a1f4 <__divdf3+0x134>
    a1d0:	13cdc83a 	sub	r6,r2,r15
    a1d4:	1193803a 	cmpltu	r9,r2,r6
    a1d8:	1a1dc83a 	sub	r14,r3,r8
    a1dc:	40c0011e 	bne	r8,r3,a1e4 <__divdf3+0x124>
    a1e0:	13c00436 	bltu	r2,r15,a1f4 <__divdf3+0x134>
    a1e4:	3005883a 	mov	r2,r6
    a1e8:	7247c83a 	sub	r3,r14,r9
    a1ec:	61d8b03a 	or	r12,r12,r7
    a1f0:	691ab03a 	or	r13,r13,r4
    a1f4:	108d883a 	add	r6,r2,r2
    a1f8:	3093803a 	cmpltu	r9,r6,r2
    a1fc:	18c7883a 	add	r3,r3,r3
    a200:	5a8eb03a 	or	r7,r11,r10
    a204:	2008d07a 	srli	r4,r4,1
    a208:	3005883a 	mov	r2,r6
    a20c:	48c7883a 	add	r3,r9,r3
    a210:	283feb1e 	bne	r5,zero,a1c0 <__divdf3+0x100>
    a214:	61003fcc 	andi	r4,r12,255
    a218:	01402004 	movi	r5,128
    a21c:	21400b26 	beq	r4,r5,a24c <__divdf3+0x18c>
    a220:	db000815 	stw	r12,32(sp)
    a224:	db400915 	stw	r13,36(sp)
    a228:	003fb406 	br	a0fc <__divdf3+0x3c>
    a22c:	d8000815 	stw	zero,32(sp)
    a230:	d8000915 	stw	zero,36(sp)
    a234:	d8000715 	stw	zero,28(sp)
    a238:	d9000504 	addi	r4,sp,20
    a23c:	003fb006 	br	a100 <__divdf3+0x40>
    a240:	d8800515 	stw	r2,20(sp)
    a244:	d9000504 	addi	r4,sp,20
    a248:	003fad06 	br	a100 <__divdf3+0x40>
    a24c:	6140400c 	andi	r5,r12,256
    a250:	283ff31e 	bne	r5,zero,a220 <__divdf3+0x160>
    a254:	30c4b03a 	or	r2,r6,r3
    a258:	103ff126 	beq	r2,zero,a220 <__divdf3+0x160>
    a25c:	6109883a 	add	r4,r12,r4
    a260:	2305803a 	cmpltu	r2,r4,r12
    a264:	033fc004 	movi	r12,-256
    a268:	2318703a 	and	r12,r4,r12
    a26c:	135b883a 	add	r13,r2,r13
    a270:	003feb06 	br	a220 <__divdf3+0x160>

0000a274 <__eqdf2>:
    a274:	defff104 	addi	sp,sp,-60
    a278:	d9000c15 	stw	r4,48(sp)
    a27c:	d9400d15 	stw	r5,52(sp)
    a280:	d9000c04 	addi	r4,sp,48
    a284:	d9400504 	addi	r5,sp,20
    a288:	dfc00e15 	stw	ra,56(sp)
    a28c:	d9800a15 	stw	r6,40(sp)
    a290:	d9c00b15 	stw	r7,44(sp)
    a294:	000ac4c0 	call	ac4c <__unpack_d>
    a298:	d9000a04 	addi	r4,sp,40
    a29c:	d80b883a 	mov	r5,sp
    a2a0:	000ac4c0 	call	ac4c <__unpack_d>
    a2a4:	d8c00517 	ldw	r3,20(sp)
    a2a8:	00800044 	movi	r2,1
    a2ac:	10c0052e 	bgeu	r2,r3,a2c4 <__eqdf2+0x50>
    a2b0:	d8c00017 	ldw	r3,0(sp)
    a2b4:	10c0032e 	bgeu	r2,r3,a2c4 <__eqdf2+0x50>
    a2b8:	d9000504 	addi	r4,sp,20
    a2bc:	d80b883a 	mov	r5,sp
    a2c0:	000ad500 	call	ad50 <__fpcmp_parts_d>
    a2c4:	dfc00e17 	ldw	ra,56(sp)
    a2c8:	dec00f04 	addi	sp,sp,60
    a2cc:	f800283a 	ret

0000a2d0 <__nedf2>:
    a2d0:	defff104 	addi	sp,sp,-60
    a2d4:	d9000c15 	stw	r4,48(sp)
    a2d8:	d9400d15 	stw	r5,52(sp)
    a2dc:	d9000c04 	addi	r4,sp,48
    a2e0:	d9400504 	addi	r5,sp,20
    a2e4:	dfc00e15 	stw	ra,56(sp)
    a2e8:	d9800a15 	stw	r6,40(sp)
    a2ec:	d9c00b15 	stw	r7,44(sp)
    a2f0:	000ac4c0 	call	ac4c <__unpack_d>
    a2f4:	d9000a04 	addi	r4,sp,40
    a2f8:	d80b883a 	mov	r5,sp
    a2fc:	000ac4c0 	call	ac4c <__unpack_d>
    a300:	d8c00517 	ldw	r3,20(sp)
    a304:	00800044 	movi	r2,1
    a308:	10c0052e 	bgeu	r2,r3,a320 <__nedf2+0x50>
    a30c:	d8c00017 	ldw	r3,0(sp)
    a310:	10c0032e 	bgeu	r2,r3,a320 <__nedf2+0x50>
    a314:	d9000504 	addi	r4,sp,20
    a318:	d80b883a 	mov	r5,sp
    a31c:	000ad500 	call	ad50 <__fpcmp_parts_d>
    a320:	dfc00e17 	ldw	ra,56(sp)
    a324:	dec00f04 	addi	sp,sp,60
    a328:	f800283a 	ret

0000a32c <__gtdf2>:
    a32c:	defff104 	addi	sp,sp,-60
    a330:	d9000c15 	stw	r4,48(sp)
    a334:	d9400d15 	stw	r5,52(sp)
    a338:	d9000c04 	addi	r4,sp,48
    a33c:	d9400504 	addi	r5,sp,20
    a340:	dfc00e15 	stw	ra,56(sp)
    a344:	d9800a15 	stw	r6,40(sp)
    a348:	d9c00b15 	stw	r7,44(sp)
    a34c:	000ac4c0 	call	ac4c <__unpack_d>
    a350:	d9000a04 	addi	r4,sp,40
    a354:	d80b883a 	mov	r5,sp
    a358:	000ac4c0 	call	ac4c <__unpack_d>
    a35c:	d8c00517 	ldw	r3,20(sp)
    a360:	00800044 	movi	r2,1
    a364:	10c0082e 	bgeu	r2,r3,a388 <__gtdf2+0x5c>
    a368:	d8c00017 	ldw	r3,0(sp)
    a36c:	10c0062e 	bgeu	r2,r3,a388 <__gtdf2+0x5c>
    a370:	d9000504 	addi	r4,sp,20
    a374:	d80b883a 	mov	r5,sp
    a378:	000ad500 	call	ad50 <__fpcmp_parts_d>
    a37c:	dfc00e17 	ldw	ra,56(sp)
    a380:	dec00f04 	addi	sp,sp,60
    a384:	f800283a 	ret
    a388:	00bfffc4 	movi	r2,-1
    a38c:	003ffb06 	br	a37c <__gtdf2+0x50>

0000a390 <__gedf2>:
    a390:	defff104 	addi	sp,sp,-60
    a394:	d9000c15 	stw	r4,48(sp)
    a398:	d9400d15 	stw	r5,52(sp)
    a39c:	d9000c04 	addi	r4,sp,48
    a3a0:	d9400504 	addi	r5,sp,20
    a3a4:	dfc00e15 	stw	ra,56(sp)
    a3a8:	d9800a15 	stw	r6,40(sp)
    a3ac:	d9c00b15 	stw	r7,44(sp)
    a3b0:	000ac4c0 	call	ac4c <__unpack_d>
    a3b4:	d9000a04 	addi	r4,sp,40
    a3b8:	d80b883a 	mov	r5,sp
    a3bc:	000ac4c0 	call	ac4c <__unpack_d>
    a3c0:	d8c00517 	ldw	r3,20(sp)
    a3c4:	00800044 	movi	r2,1
    a3c8:	10c0082e 	bgeu	r2,r3,a3ec <__gedf2+0x5c>
    a3cc:	d8c00017 	ldw	r3,0(sp)
    a3d0:	10c0062e 	bgeu	r2,r3,a3ec <__gedf2+0x5c>
    a3d4:	d9000504 	addi	r4,sp,20
    a3d8:	d80b883a 	mov	r5,sp
    a3dc:	000ad500 	call	ad50 <__fpcmp_parts_d>
    a3e0:	dfc00e17 	ldw	ra,56(sp)
    a3e4:	dec00f04 	addi	sp,sp,60
    a3e8:	f800283a 	ret
    a3ec:	00bfffc4 	movi	r2,-1
    a3f0:	003ffb06 	br	a3e0 <__gedf2+0x50>

0000a3f4 <__ltdf2>:
    a3f4:	defff104 	addi	sp,sp,-60
    a3f8:	d9000c15 	stw	r4,48(sp)
    a3fc:	d9400d15 	stw	r5,52(sp)
    a400:	d9000c04 	addi	r4,sp,48
    a404:	d9400504 	addi	r5,sp,20
    a408:	dfc00e15 	stw	ra,56(sp)
    a40c:	d9800a15 	stw	r6,40(sp)
    a410:	d9c00b15 	stw	r7,44(sp)
    a414:	000ac4c0 	call	ac4c <__unpack_d>
    a418:	d9000a04 	addi	r4,sp,40
    a41c:	d80b883a 	mov	r5,sp
    a420:	000ac4c0 	call	ac4c <__unpack_d>
    a424:	d8c00517 	ldw	r3,20(sp)
    a428:	00800044 	movi	r2,1
    a42c:	10c0052e 	bgeu	r2,r3,a444 <__ltdf2+0x50>
    a430:	d8c00017 	ldw	r3,0(sp)
    a434:	10c0032e 	bgeu	r2,r3,a444 <__ltdf2+0x50>
    a438:	d9000504 	addi	r4,sp,20
    a43c:	d80b883a 	mov	r5,sp
    a440:	000ad500 	call	ad50 <__fpcmp_parts_d>
    a444:	dfc00e17 	ldw	ra,56(sp)
    a448:	dec00f04 	addi	sp,sp,60
    a44c:	f800283a 	ret

0000a450 <__floatsidf>:
    a450:	2004d7fa 	srli	r2,r4,31
    a454:	defff904 	addi	sp,sp,-28
    a458:	00c000c4 	movi	r3,3
    a45c:	dfc00615 	stw	ra,24(sp)
    a460:	dc000515 	stw	r16,20(sp)
    a464:	d8c00015 	stw	r3,0(sp)
    a468:	d8800115 	stw	r2,4(sp)
    a46c:	2000081e 	bne	r4,zero,a490 <__floatsidf+0x40>
    a470:	00800084 	movi	r2,2
    a474:	d8800015 	stw	r2,0(sp)
    a478:	d809883a 	mov	r4,sp
    a47c:	000aa280 	call	aa28 <__pack_d>
    a480:	dfc00617 	ldw	ra,24(sp)
    a484:	dc000517 	ldw	r16,20(sp)
    a488:	dec00704 	addi	sp,sp,28
    a48c:	f800283a 	ret
    a490:	00c00f04 	movi	r3,60
    a494:	d8c00215 	stw	r3,8(sp)
    a498:	10000f1e 	bne	r2,zero,a4d8 <__floatsidf+0x88>
    a49c:	2021883a 	mov	r16,r4
    a4a0:	8009883a 	mov	r4,r16
    a4a4:	000a97c0 	call	a97c <__clzsi2>
    a4a8:	11000744 	addi	r4,r2,29
    a4ac:	0100110e 	bge	zero,r4,a4f4 <__floatsidf+0xa4>
    a4b0:	10ffff44 	addi	r3,r2,-3
    a4b4:	18001216 	blt	r3,zero,a500 <__floatsidf+0xb0>
    a4b8:	80c6983a 	sll	r3,r16,r3
    a4bc:	0009883a 	mov	r4,zero
    a4c0:	014007c4 	movi	r5,31
    a4c4:	2885c83a 	sub	r2,r5,r2
    a4c8:	d9000315 	stw	r4,12(sp)
    a4cc:	d8c00415 	stw	r3,16(sp)
    a4d0:	d8800215 	stw	r2,8(sp)
    a4d4:	003fe806 	br	a478 <__floatsidf+0x28>
    a4d8:	00a00034 	movhi	r2,32768
    a4dc:	20800e26 	beq	r4,r2,a518 <__floatsidf+0xc8>
    a4e0:	0121c83a 	sub	r16,zero,r4
    a4e4:	8009883a 	mov	r4,r16
    a4e8:	000a97c0 	call	a97c <__clzsi2>
    a4ec:	11000744 	addi	r4,r2,29
    a4f0:	013fef16 	blt	zero,r4,a4b0 <__floatsidf+0x60>
    a4f4:	dc000315 	stw	r16,12(sp)
    a4f8:	d8000415 	stw	zero,16(sp)
    a4fc:	003fde06 	br	a478 <__floatsidf+0x28>
    a500:	800ad07a 	srli	r5,r16,1
    a504:	00c007c4 	movi	r3,31
    a508:	1907c83a 	sub	r3,r3,r4
    a50c:	28c6d83a 	srl	r3,r5,r3
    a510:	8108983a 	sll	r4,r16,r4
    a514:	003fea06 	br	a4c0 <__floatsidf+0x70>
    a518:	0005883a 	mov	r2,zero
    a51c:	00f07834 	movhi	r3,49632
    a520:	003fd706 	br	a480 <__floatsidf+0x30>

0000a524 <__fixdfsi>:
    a524:	defff804 	addi	sp,sp,-32
    a528:	d9000515 	stw	r4,20(sp)
    a52c:	d9400615 	stw	r5,24(sp)
    a530:	d9000504 	addi	r4,sp,20
    a534:	d80b883a 	mov	r5,sp
    a538:	dfc00715 	stw	ra,28(sp)
    a53c:	000ac4c0 	call	ac4c <__unpack_d>
    a540:	d8800017 	ldw	r2,0(sp)
    a544:	00c00084 	movi	r3,2
    a548:	10c01c26 	beq	r2,r3,a5bc <__fixdfsi+0x98>
    a54c:	00c00044 	movi	r3,1
    a550:	18801a2e 	bgeu	r3,r2,a5bc <__fixdfsi+0x98>
    a554:	00c00104 	movi	r3,4
    a558:	10c01126 	beq	r2,r3,a5a0 <__fixdfsi+0x7c>
    a55c:	d8800217 	ldw	r2,8(sp)
    a560:	10001616 	blt	r2,zero,a5bc <__fixdfsi+0x98>
    a564:	00c00784 	movi	r3,30
    a568:	18800d16 	blt	r3,r2,a5a0 <__fixdfsi+0x7c>
    a56c:	00c00f04 	movi	r3,60
    a570:	1885c83a 	sub	r2,r3,r2
    a574:	10fff804 	addi	r3,r2,-32
    a578:	d9400317 	ldw	r5,12(sp)
    a57c:	d9000417 	ldw	r4,16(sp)
    a580:	18001616 	blt	r3,zero,a5dc <__fixdfsi+0xb8>
    a584:	20c4d83a 	srl	r2,r4,r3
    a588:	d8c00117 	ldw	r3,4(sp)
    a58c:	18000126 	beq	r3,zero,a594 <__fixdfsi+0x70>
    a590:	0085c83a 	sub	r2,zero,r2
    a594:	dfc00717 	ldw	ra,28(sp)
    a598:	dec00804 	addi	sp,sp,32
    a59c:	f800283a 	ret
    a5a0:	d8800117 	ldw	r2,4(sp)
    a5a4:	1000091e 	bne	r2,zero,a5cc <__fixdfsi+0xa8>
    a5a8:	00a00034 	movhi	r2,32768
    a5ac:	10bfffc4 	addi	r2,r2,-1
    a5b0:	dfc00717 	ldw	ra,28(sp)
    a5b4:	dec00804 	addi	sp,sp,32
    a5b8:	f800283a 	ret
    a5bc:	0005883a 	mov	r2,zero
    a5c0:	dfc00717 	ldw	ra,28(sp)
    a5c4:	dec00804 	addi	sp,sp,32
    a5c8:	f800283a 	ret
    a5cc:	00a00034 	movhi	r2,32768
    a5d0:	dfc00717 	ldw	ra,28(sp)
    a5d4:	dec00804 	addi	sp,sp,32
    a5d8:	f800283a 	ret
    a5dc:	2008907a 	slli	r4,r4,1
    a5e0:	018007c4 	movi	r6,31
    a5e4:	308dc83a 	sub	r6,r6,r2
    a5e8:	2188983a 	sll	r4,r4,r6
    a5ec:	2884d83a 	srl	r2,r5,r2
    a5f0:	2084b03a 	or	r2,r4,r2
    a5f4:	003fe406 	br	a588 <__fixdfsi+0x64>

0000a5f8 <__floatunsidf>:
    a5f8:	defff904 	addi	sp,sp,-28
    a5fc:	dc000515 	stw	r16,20(sp)
    a600:	dfc00615 	stw	ra,24(sp)
    a604:	d8000115 	stw	zero,4(sp)
    a608:	2021883a 	mov	r16,r4
    a60c:	20001726 	beq	r4,zero,a66c <__floatunsidf+0x74>
    a610:	008000c4 	movi	r2,3
    a614:	d8800015 	stw	r2,0(sp)
    a618:	00800f04 	movi	r2,60
    a61c:	d8800215 	stw	r2,8(sp)
    a620:	000a97c0 	call	a97c <__clzsi2>
    a624:	10c00744 	addi	r3,r2,29
    a628:	18001816 	blt	r3,zero,a68c <__floatunsidf+0x94>
    a62c:	18002d26 	beq	r3,zero,a6e4 <__floatunsidf+0xec>
    a630:	113fff44 	addi	r4,r2,-3
    a634:	20002e16 	blt	r4,zero,a6f0 <__floatunsidf+0xf8>
    a638:	8108983a 	sll	r4,r16,r4
    a63c:	0021883a 	mov	r16,zero
    a640:	014007c4 	movi	r5,31
    a644:	2885c83a 	sub	r2,r5,r2
    a648:	dc000315 	stw	r16,12(sp)
    a64c:	d9000415 	stw	r4,16(sp)
    a650:	d8800215 	stw	r2,8(sp)
    a654:	d809883a 	mov	r4,sp
    a658:	000aa280 	call	aa28 <__pack_d>
    a65c:	dfc00617 	ldw	ra,24(sp)
    a660:	dc000517 	ldw	r16,20(sp)
    a664:	dec00704 	addi	sp,sp,28
    a668:	f800283a 	ret
    a66c:	00800084 	movi	r2,2
    a670:	d809883a 	mov	r4,sp
    a674:	d8800015 	stw	r2,0(sp)
    a678:	000aa280 	call	aa28 <__pack_d>
    a67c:	dfc00617 	ldw	ra,24(sp)
    a680:	dc000517 	ldw	r16,20(sp)
    a684:	dec00704 	addi	sp,sp,28
    a688:	f800283a 	ret
    a68c:	00c7c83a 	sub	r3,zero,r3
    a690:	193ff804 	addi	r4,r3,-32
    a694:	20001c16 	blt	r4,zero,a708 <__floatunsidf+0x110>
    a698:	000b883a 	mov	r5,zero
    a69c:	2009d7fa 	srai	r4,r4,31
    a6a0:	80c6d83a 	srl	r3,r16,r3
    a6a4:	297fffc4 	addi	r5,r5,-1
    a6a8:	2c20703a 	and	r16,r5,r16
    a6ac:	8020c03a 	cmpne	r16,r16,zero
    a6b0:	1906703a 	and	r3,r3,r4
    a6b4:	010007c4 	movi	r4,31
    a6b8:	80c6b03a 	or	r3,r16,r3
    a6bc:	2085c83a 	sub	r2,r4,r2
    a6c0:	d809883a 	mov	r4,sp
    a6c4:	d8c00315 	stw	r3,12(sp)
    a6c8:	d8000415 	stw	zero,16(sp)
    a6cc:	d8800215 	stw	r2,8(sp)
    a6d0:	000aa280 	call	aa28 <__pack_d>
    a6d4:	dfc00617 	ldw	ra,24(sp)
    a6d8:	dc000517 	ldw	r16,20(sp)
    a6dc:	dec00704 	addi	sp,sp,28
    a6e0:	f800283a 	ret
    a6e4:	dc000315 	stw	r16,12(sp)
    a6e8:	d8000415 	stw	zero,16(sp)
    a6ec:	003fd906 	br	a654 <__floatunsidf+0x5c>
    a6f0:	800ad07a 	srli	r5,r16,1
    a6f4:	010007c4 	movi	r4,31
    a6f8:	20c9c83a 	sub	r4,r4,r3
    a6fc:	2908d83a 	srl	r4,r5,r4
    a700:	80e0983a 	sll	r16,r16,r3
    a704:	003fce06 	br	a640 <__floatunsidf+0x48>
    a708:	01400044 	movi	r5,1
    a70c:	28ca983a 	sll	r5,r5,r3
    a710:	003fe206 	br	a69c <__floatunsidf+0xa4>

0000a714 <udivmodsi4>:
    a714:	2005883a 	mov	r2,r4
    a718:	2900182e 	bgeu	r5,r4,a77c <udivmodsi4+0x68>
    a71c:	28001716 	blt	r5,zero,a77c <udivmodsi4+0x68>
    a720:	01000804 	movi	r4,32
    a724:	00c00044 	movi	r3,1
    a728:	00000206 	br	a734 <udivmodsi4+0x20>
    a72c:	20001126 	beq	r4,zero,a774 <udivmodsi4+0x60>
    a730:	28000516 	blt	r5,zero,a748 <udivmodsi4+0x34>
    a734:	294b883a 	add	r5,r5,r5
    a738:	213fffc4 	addi	r4,r4,-1
    a73c:	18c7883a 	add	r3,r3,r3
    a740:	28bffa36 	bltu	r5,r2,a72c <udivmodsi4+0x18>
    a744:	18000b26 	beq	r3,zero,a774 <udivmodsi4+0x60>
    a748:	0009883a 	mov	r4,zero
    a74c:	11400236 	bltu	r2,r5,a758 <udivmodsi4+0x44>
    a750:	1145c83a 	sub	r2,r2,r5
    a754:	20c8b03a 	or	r4,r4,r3
    a758:	1806d07a 	srli	r3,r3,1
    a75c:	280ad07a 	srli	r5,r5,1
    a760:	183ffa1e 	bne	r3,zero,a74c <udivmodsi4+0x38>
    a764:	3000021e 	bne	r6,zero,a770 <udivmodsi4+0x5c>
    a768:	2005883a 	mov	r2,r4
    a76c:	f800283a 	ret
    a770:	f800283a 	ret
    a774:	0009883a 	mov	r4,zero
    a778:	003ffa06 	br	a764 <udivmodsi4+0x50>
    a77c:	00c00044 	movi	r3,1
    a780:	0009883a 	mov	r4,zero
    a784:	003ff106 	br	a74c <udivmodsi4+0x38>

0000a788 <__divsi3>:
    a788:	defffe04 	addi	sp,sp,-8
    a78c:	dfc00115 	stw	ra,4(sp)
    a790:	dc000015 	stw	r16,0(sp)
    a794:	20000a16 	blt	r4,zero,a7c0 <__divsi3+0x38>
    a798:	0021883a 	mov	r16,zero
    a79c:	28000b16 	blt	r5,zero,a7cc <__divsi3+0x44>
    a7a0:	000d883a 	mov	r6,zero
    a7a4:	000a7140 	call	a714 <udivmodsi4>
    a7a8:	80000126 	beq	r16,zero,a7b0 <__divsi3+0x28>
    a7ac:	0085c83a 	sub	r2,zero,r2
    a7b0:	dfc00117 	ldw	ra,4(sp)
    a7b4:	dc000017 	ldw	r16,0(sp)
    a7b8:	dec00204 	addi	sp,sp,8
    a7bc:	f800283a 	ret
    a7c0:	0109c83a 	sub	r4,zero,r4
    a7c4:	04000044 	movi	r16,1
    a7c8:	283ff50e 	bge	r5,zero,a7a0 <__divsi3+0x18>
    a7cc:	014bc83a 	sub	r5,zero,r5
    a7d0:	8400005c 	xori	r16,r16,1
    a7d4:	003ff206 	br	a7a0 <__divsi3+0x18>

0000a7d8 <__modsi3>:
    a7d8:	deffff04 	addi	sp,sp,-4
    a7dc:	dfc00015 	stw	ra,0(sp)
    a7e0:	20000516 	blt	r4,zero,a7f8 <__modsi3+0x20>
    a7e4:	28000c16 	blt	r5,zero,a818 <__modsi3+0x40>
    a7e8:	01800044 	movi	r6,1
    a7ec:	dfc00017 	ldw	ra,0(sp)
    a7f0:	dec00104 	addi	sp,sp,4
    a7f4:	000a7141 	jmpi	a714 <udivmodsi4>
    a7f8:	0109c83a 	sub	r4,zero,r4
    a7fc:	28000b16 	blt	r5,zero,a82c <__modsi3+0x54>
    a800:	01800044 	movi	r6,1
    a804:	000a7140 	call	a714 <udivmodsi4>
    a808:	0085c83a 	sub	r2,zero,r2
    a80c:	dfc00017 	ldw	ra,0(sp)
    a810:	dec00104 	addi	sp,sp,4
    a814:	f800283a 	ret
    a818:	014bc83a 	sub	r5,zero,r5
    a81c:	01800044 	movi	r6,1
    a820:	dfc00017 	ldw	ra,0(sp)
    a824:	dec00104 	addi	sp,sp,4
    a828:	000a7141 	jmpi	a714 <udivmodsi4>
    a82c:	014bc83a 	sub	r5,zero,r5
    a830:	003ff306 	br	a800 <__modsi3+0x28>

0000a834 <__udivsi3>:
    a834:	000d883a 	mov	r6,zero
    a838:	000a7141 	jmpi	a714 <udivmodsi4>

0000a83c <__umodsi3>:
    a83c:	01800044 	movi	r6,1
    a840:	000a7141 	jmpi	a714 <udivmodsi4>

0000a844 <__mulsi3>:
    a844:	0005883a 	mov	r2,zero
    a848:	20000726 	beq	r4,zero,a868 <__mulsi3+0x24>
    a84c:	20c0004c 	andi	r3,r4,1
    a850:	2008d07a 	srli	r4,r4,1
    a854:	18000126 	beq	r3,zero,a85c <__mulsi3+0x18>
    a858:	1145883a 	add	r2,r2,r5
    a85c:	294b883a 	add	r5,r5,r5
    a860:	203ffa1e 	bne	r4,zero,a84c <__mulsi3+0x8>
    a864:	f800283a 	ret
    a868:	f800283a 	ret

0000a86c <__muldi3>:
    a86c:	defff604 	addi	sp,sp,-40
    a870:	dd400515 	stw	r21,20(sp)
    a874:	dd000415 	stw	r20,16(sp)
    a878:	257fffcc 	andi	r21,r4,65535
    a87c:	353fffcc 	andi	r20,r6,65535
    a880:	dcc00315 	stw	r19,12(sp)
    a884:	3026d43a 	srli	r19,r6,16
    a888:	dd800615 	stw	r22,24(sp)
    a88c:	dc800215 	stw	r18,8(sp)
    a890:	dc400115 	stw	r17,4(sp)
    a894:	2024d43a 	srli	r18,r4,16
    a898:	2023883a 	mov	r17,r4
    a89c:	282d883a 	mov	r22,r5
    a8a0:	a009883a 	mov	r4,r20
    a8a4:	a80b883a 	mov	r5,r21
    a8a8:	dfc00915 	stw	ra,36(sp)
    a8ac:	df000815 	stw	fp,32(sp)
    a8b0:	ddc00715 	stw	r23,28(sp)
    a8b4:	3839883a 	mov	fp,r7
    a8b8:	dc000015 	stw	r16,0(sp)
    a8bc:	3021883a 	mov	r16,r6
    a8c0:	000a8440 	call	a844 <__mulsi3>
    a8c4:	a80b883a 	mov	r5,r21
    a8c8:	9809883a 	mov	r4,r19
    a8cc:	102f883a 	mov	r23,r2
    a8d0:	000a8440 	call	a844 <__mulsi3>
    a8d4:	a009883a 	mov	r4,r20
    a8d8:	900b883a 	mov	r5,r18
    a8dc:	102b883a 	mov	r21,r2
    a8e0:	000a8440 	call	a844 <__mulsi3>
    a8e4:	9809883a 	mov	r4,r19
    a8e8:	900b883a 	mov	r5,r18
    a8ec:	1029883a 	mov	r20,r2
    a8f0:	000a8440 	call	a844 <__mulsi3>
    a8f4:	1007883a 	mov	r3,r2
    a8f8:	b804d43a 	srli	r2,r23,16
    a8fc:	a549883a 	add	r4,r20,r21
    a900:	2089883a 	add	r4,r4,r2
    a904:	2500022e 	bgeu	r4,r20,a910 <__muldi3+0xa4>
    a908:	00800074 	movhi	r2,1
    a90c:	1887883a 	add	r3,r3,r2
    a910:	200cd43a 	srli	r6,r4,16
    a914:	2004943a 	slli	r2,r4,16
    a918:	e00b883a 	mov	r5,fp
    a91c:	8809883a 	mov	r4,r17
    a920:	bdffffcc 	andi	r23,r23,65535
    a924:	19a3883a 	add	r17,r3,r6
    a928:	15ef883a 	add	r23,r2,r23
    a92c:	000a8440 	call	a844 <__mulsi3>
    a930:	8009883a 	mov	r4,r16
    a934:	b00b883a 	mov	r5,r22
    a938:	1025883a 	mov	r18,r2
    a93c:	000a8440 	call	a844 <__mulsi3>
    a940:	9085883a 	add	r2,r18,r2
    a944:	1447883a 	add	r3,r2,r17
    a948:	b805883a 	mov	r2,r23
    a94c:	dfc00917 	ldw	ra,36(sp)
    a950:	df000817 	ldw	fp,32(sp)
    a954:	ddc00717 	ldw	r23,28(sp)
    a958:	dd800617 	ldw	r22,24(sp)
    a95c:	dd400517 	ldw	r21,20(sp)
    a960:	dd000417 	ldw	r20,16(sp)
    a964:	dcc00317 	ldw	r19,12(sp)
    a968:	dc800217 	ldw	r18,8(sp)
    a96c:	dc400117 	ldw	r17,4(sp)
    a970:	dc000017 	ldw	r16,0(sp)
    a974:	dec00a04 	addi	sp,sp,40
    a978:	f800283a 	ret

0000a97c <__clzsi2>:
    a97c:	00bfffd4 	movui	r2,65535
    a980:	11000b36 	bltu	r2,r4,a9b0 <__clzsi2+0x34>
    a984:	00803fc4 	movi	r2,255
    a988:	11001e2e 	bgeu	r2,r4,aa04 <__clzsi2+0x88>
    a98c:	00c00204 	movi	r3,8
    a990:	20c8d83a 	srl	r4,r4,r3
    a994:	00c00074 	movhi	r3,1
    a998:	18f6f904 	addi	r3,r3,-9244
    a99c:	00800604 	movi	r2,24
    a9a0:	1909883a 	add	r4,r3,r4
    a9a4:	20c00003 	ldbu	r3,0(r4)
    a9a8:	10c5c83a 	sub	r2,r2,r3
    a9ac:	f800283a 	ret
    a9b0:	00804034 	movhi	r2,256
    a9b4:	10bfffc4 	addi	r2,r2,-1
    a9b8:	11000936 	bltu	r2,r4,a9e0 <__clzsi2+0x64>
    a9bc:	00800404 	movi	r2,16
    a9c0:	1007883a 	mov	r3,r2
    a9c4:	20c8d83a 	srl	r4,r4,r3
    a9c8:	00c00074 	movhi	r3,1
    a9cc:	18f6f904 	addi	r3,r3,-9244
    a9d0:	1909883a 	add	r4,r3,r4
    a9d4:	20c00003 	ldbu	r3,0(r4)
    a9d8:	10c5c83a 	sub	r2,r2,r3
    a9dc:	f800283a 	ret
    a9e0:	00c00604 	movi	r3,24
    a9e4:	20c8d83a 	srl	r4,r4,r3
    a9e8:	00c00074 	movhi	r3,1
    a9ec:	18f6f904 	addi	r3,r3,-9244
    a9f0:	00800204 	movi	r2,8
    a9f4:	1909883a 	add	r4,r3,r4
    a9f8:	20c00003 	ldbu	r3,0(r4)
    a9fc:	10c5c83a 	sub	r2,r2,r3
    aa00:	f800283a 	ret
    aa04:	0007883a 	mov	r3,zero
    aa08:	20c8d83a 	srl	r4,r4,r3
    aa0c:	00c00074 	movhi	r3,1
    aa10:	18f6f904 	addi	r3,r3,-9244
    aa14:	00800804 	movi	r2,32
    aa18:	1909883a 	add	r4,r3,r4
    aa1c:	20c00003 	ldbu	r3,0(r4)
    aa20:	10c5c83a 	sub	r2,r2,r3
    aa24:	f800283a 	ret

0000aa28 <__pack_d>:
    aa28:	20800017 	ldw	r2,0(r4)
    aa2c:	defff804 	addi	sp,sp,-32
    aa30:	dcc00315 	stw	r19,12(sp)
    aa34:	dc800215 	stw	r18,8(sp)
    aa38:	dfc00715 	stw	ra,28(sp)
    aa3c:	dd800615 	stw	r22,24(sp)
    aa40:	dd400515 	stw	r21,20(sp)
    aa44:	dd000415 	stw	r20,16(sp)
    aa48:	dc400115 	stw	r17,4(sp)
    aa4c:	dc000015 	stw	r16,0(sp)
    aa50:	04800044 	movi	r18,1
    aa54:	24400317 	ldw	r17,12(r4)
    aa58:	24000417 	ldw	r16,16(r4)
    aa5c:	24c00117 	ldw	r19,4(r4)
    aa60:	9080422e 	bgeu	r18,r2,ab6c <__pack_d+0x144>
    aa64:	00c00104 	movi	r3,4
    aa68:	10c03c26 	beq	r2,r3,ab5c <__pack_d+0x134>
    aa6c:	00c00084 	movi	r3,2
    aa70:	10c01926 	beq	r2,r3,aad8 <__pack_d+0xb0>
    aa74:	8c04b03a 	or	r2,r17,r16
    aa78:	10001726 	beq	r2,zero,aad8 <__pack_d+0xb0>
    aa7c:	21000217 	ldw	r4,8(r4)
    aa80:	00bf0084 	movi	r2,-1022
    aa84:	20804016 	blt	r4,r2,ab88 <__pack_d+0x160>
    aa88:	0080ffc4 	movi	r2,1023
    aa8c:	11003316 	blt	r2,r4,ab5c <__pack_d+0x134>
    aa90:	88803fcc 	andi	r2,r17,255
    aa94:	00c02004 	movi	r3,128
    aa98:	10c02926 	beq	r2,r3,ab40 <__pack_d+0x118>
    aa9c:	88801fc4 	addi	r2,r17,127
    aaa0:	1463803a 	cmpltu	r17,r2,r17
    aaa4:	8c21883a 	add	r16,r17,r16
    aaa8:	1023883a 	mov	r17,r2
    aaac:	00880034 	movhi	r2,8192
    aab0:	10bfffc4 	addi	r2,r2,-1
    aab4:	14001c36 	bltu	r2,r16,ab28 <__pack_d+0x100>
    aab8:	2100ffc4 	addi	r4,r4,1023
    aabc:	8006963a 	slli	r3,r16,24
    aac0:	8804d23a 	srli	r2,r17,8
    aac4:	8020913a 	slli	r16,r16,4
    aac8:	2101ffcc 	andi	r4,r4,2047
    aacc:	1884b03a 	or	r2,r3,r2
    aad0:	8020d33a 	srli	r16,r16,12
    aad4:	00000306 	br	aae4 <__pack_d+0xbc>
    aad8:	0009883a 	mov	r4,zero
    aadc:	0005883a 	mov	r2,zero
    aae0:	0021883a 	mov	r16,zero
    aae4:	2008953a 	slli	r4,r4,20
    aae8:	982697fa 	slli	r19,r19,31
    aaec:	00c00434 	movhi	r3,16
    aaf0:	18ffffc4 	addi	r3,r3,-1
    aaf4:	80e0703a 	and	r16,r16,r3
    aaf8:	8106b03a 	or	r3,r16,r4
    aafc:	1cc6b03a 	or	r3,r3,r19
    ab00:	dfc00717 	ldw	ra,28(sp)
    ab04:	dd800617 	ldw	r22,24(sp)
    ab08:	dd400517 	ldw	r21,20(sp)
    ab0c:	dd000417 	ldw	r20,16(sp)
    ab10:	dcc00317 	ldw	r19,12(sp)
    ab14:	dc800217 	ldw	r18,8(sp)
    ab18:	dc400117 	ldw	r17,4(sp)
    ab1c:	dc000017 	ldw	r16,0(sp)
    ab20:	dec00804 	addi	sp,sp,32
    ab24:	f800283a 	ret
    ab28:	800697fa 	slli	r3,r16,31
    ab2c:	8804d07a 	srli	r2,r17,1
    ab30:	21010004 	addi	r4,r4,1024
    ab34:	8020d07a 	srli	r16,r16,1
    ab38:	18a2b03a 	or	r17,r3,r2
    ab3c:	003fdf06 	br	aabc <__pack_d+0x94>
    ab40:	88c0400c 	andi	r3,r17,256
    ab44:	183fd926 	beq	r3,zero,aaac <__pack_d+0x84>
    ab48:	8885883a 	add	r2,r17,r2
    ab4c:	1463803a 	cmpltu	r17,r2,r17
    ab50:	8c21883a 	add	r16,r17,r16
    ab54:	1023883a 	mov	r17,r2
    ab58:	003fd406 	br	aaac <__pack_d+0x84>
    ab5c:	0101ffc4 	movi	r4,2047
    ab60:	0005883a 	mov	r2,zero
    ab64:	0021883a 	mov	r16,zero
    ab68:	003fde06 	br	aae4 <__pack_d+0xbc>
    ab6c:	84000234 	orhi	r16,r16,8
    ab70:	00c00434 	movhi	r3,16
    ab74:	18ffffc4 	addi	r3,r3,-1
    ab78:	8805883a 	mov	r2,r17
    ab7c:	80e0703a 	and	r16,r16,r3
    ab80:	0101ffc4 	movi	r4,2047
    ab84:	003fd706 	br	aae4 <__pack_d+0xbc>
    ab88:	1129c83a 	sub	r20,r2,r4
    ab8c:	00800e04 	movi	r2,56
    ab90:	15002716 	blt	r2,r20,ac30 <__pack_d+0x208>
    ab94:	800b883a 	mov	r5,r16
    ab98:	a00d883a 	mov	r6,r20
    ab9c:	8809883a 	mov	r4,r17
    aba0:	000ae200 	call	ae20 <__lshrdi3>
    aba4:	9009883a 	mov	r4,r18
    aba8:	000b883a 	mov	r5,zero
    abac:	a00d883a 	mov	r6,r20
    abb0:	102d883a 	mov	r22,r2
    abb4:	182b883a 	mov	r21,r3
    abb8:	000ae640 	call	ae64 <__ashldi3>
    abbc:	1009003a 	cmpeq	r4,r2,zero
    abc0:	1907c83a 	sub	r3,r3,r4
    abc4:	10bfffc4 	addi	r2,r2,-1
    abc8:	1c20703a 	and	r16,r3,r16
    abcc:	1444703a 	and	r2,r2,r17
    abd0:	1404b03a 	or	r2,r2,r16
    abd4:	1004c03a 	cmpne	r2,r2,zero
    abd8:	1584b03a 	or	r2,r2,r22
    abdc:	11003fcc 	andi	r4,r2,255
    abe0:	01402004 	movi	r5,128
    abe4:	a807883a 	mov	r3,r21
    abe8:	2140131e 	bne	r4,r5,ac38 <__pack_d+0x210>
    abec:	1140400c 	andi	r5,r2,256
    abf0:	28000426 	beq	r5,zero,ac04 <__pack_d+0x1dc>
    abf4:	1109883a 	add	r4,r2,r4
    abf8:	2085803a 	cmpltu	r2,r4,r2
    abfc:	1547883a 	add	r3,r2,r21
    ac00:	2005883a 	mov	r2,r4
    ac04:	1808963a 	slli	r4,r3,24
    ac08:	1004d23a 	srli	r2,r2,8
    ac0c:	1820913a 	slli	r16,r3,4
    ac10:	01440034 	movhi	r5,4096
    ac14:	297fffc4 	addi	r5,r5,-1
    ac18:	2084b03a 	or	r2,r4,r2
    ac1c:	8020d33a 	srli	r16,r16,12
    ac20:	01000044 	movi	r4,1
    ac24:	28ffaf36 	bltu	r5,r3,aae4 <__pack_d+0xbc>
    ac28:	0009883a 	mov	r4,zero
    ac2c:	003fad06 	br	aae4 <__pack_d+0xbc>
    ac30:	0005883a 	mov	r2,zero
    ac34:	0007883a 	mov	r3,zero
    ac38:	11001fc4 	addi	r4,r2,127
    ac3c:	2085803a 	cmpltu	r2,r4,r2
    ac40:	10c7883a 	add	r3,r2,r3
    ac44:	2005883a 	mov	r2,r4
    ac48:	003fee06 	br	ac04 <__pack_d+0x1dc>

0000ac4c <__unpack_d>:
    ac4c:	21800117 	ldw	r6,4(r4)
    ac50:	20c00017 	ldw	r3,0(r4)
    ac54:	3004d7fa 	srli	r2,r6,31
    ac58:	3008d53a 	srli	r4,r6,20
    ac5c:	28800115 	stw	r2,4(r5)
    ac60:	2101ffcc 	andi	r4,r4,2047
    ac64:	00800434 	movhi	r2,16
    ac68:	10bfffc4 	addi	r2,r2,-1
    ac6c:	3084703a 	and	r2,r6,r2
    ac70:	20001a1e 	bne	r4,zero,acdc <__unpack_d+0x90>
    ac74:	1888b03a 	or	r4,r3,r2
    ac78:	20002626 	beq	r4,zero,ad14 <__unpack_d+0xc8>
    ac7c:	1808d63a 	srli	r4,r3,24
    ac80:	1004923a 	slli	r2,r2,8
    ac84:	01bf0084 	movi	r6,-1022
    ac88:	29800215 	stw	r6,8(r5)
    ac8c:	2084b03a 	or	r2,r4,r2
    ac90:	010000c4 	movi	r4,3
    ac94:	29000015 	stw	r4,0(r5)
    ac98:	02040034 	movhi	r8,4096
    ac9c:	423fffc4 	addi	r8,r8,-1
    aca0:	1806923a 	slli	r3,r3,8
    aca4:	40801836 	bltu	r8,r2,ad08 <__unpack_d+0xbc>
    aca8:	013f0044 	movi	r4,-1023
    acac:	18cd883a 	add	r6,r3,r3
    acb0:	30c7803a 	cmpltu	r3,r6,r3
    acb4:	1085883a 	add	r2,r2,r2
    acb8:	1885883a 	add	r2,r3,r2
    acbc:	200f883a 	mov	r7,r4
    acc0:	3007883a 	mov	r3,r6
    acc4:	213fffc4 	addi	r4,r4,-1
    acc8:	40bff82e 	bgeu	r8,r2,acac <__unpack_d+0x60>
    accc:	29c00215 	stw	r7,8(r5)
    acd0:	28c00315 	stw	r3,12(r5)
    acd4:	28800415 	stw	r2,16(r5)
    acd8:	f800283a 	ret
    acdc:	01c1ffc4 	movi	r7,2047
    ace0:	21c00f26 	beq	r4,r7,ad20 <__unpack_d+0xd4>
    ace4:	180cd63a 	srli	r6,r3,24
    ace8:	1004923a 	slli	r2,r2,8
    acec:	213f0044 	addi	r4,r4,-1023
    acf0:	1806923a 	slli	r3,r3,8
    acf4:	3084b03a 	or	r2,r6,r2
    acf8:	29000215 	stw	r4,8(r5)
    acfc:	010000c4 	movi	r4,3
    ad00:	10840034 	orhi	r2,r2,4096
    ad04:	29000015 	stw	r4,0(r5)
    ad08:	28c00315 	stw	r3,12(r5)
    ad0c:	28800415 	stw	r2,16(r5)
    ad10:	f800283a 	ret
    ad14:	00800084 	movi	r2,2
    ad18:	28800015 	stw	r2,0(r5)
    ad1c:	f800283a 	ret
    ad20:	1888b03a 	or	r4,r3,r2
    ad24:	20000526 	beq	r4,zero,ad3c <__unpack_d+0xf0>
    ad28:	3180022c 	andhi	r6,r6,8
    ad2c:	30000626 	beq	r6,zero,ad48 <__unpack_d+0xfc>
    ad30:	01000044 	movi	r4,1
    ad34:	29000015 	stw	r4,0(r5)
    ad38:	003ff306 	br	ad08 <__unpack_d+0xbc>
    ad3c:	00800104 	movi	r2,4
    ad40:	28800015 	stw	r2,0(r5)
    ad44:	f800283a 	ret
    ad48:	28000015 	stw	zero,0(r5)
    ad4c:	003fee06 	br	ad08 <__unpack_d+0xbc>

0000ad50 <__fpcmp_parts_d>:
    ad50:	20c00017 	ldw	r3,0(r4)
    ad54:	00800044 	movi	r2,1
    ad58:	10c0142e 	bgeu	r2,r3,adac <__fpcmp_parts_d+0x5c>
    ad5c:	29800017 	ldw	r6,0(r5)
    ad60:	1180122e 	bgeu	r2,r6,adac <__fpcmp_parts_d+0x5c>
    ad64:	01c00104 	movi	r7,4
    ad68:	19c02826 	beq	r3,r7,ae0c <__fpcmp_parts_d+0xbc>
    ad6c:	31c00926 	beq	r6,r7,ad94 <__fpcmp_parts_d+0x44>
    ad70:	01c00084 	movi	r7,2
    ad74:	19c00626 	beq	r3,r7,ad90 <__fpcmp_parts_d+0x40>
    ad78:	31c00a26 	beq	r6,r7,ada4 <__fpcmp_parts_d+0x54>
    ad7c:	20c00117 	ldw	r3,4(r4)
    ad80:	29800117 	ldw	r6,4(r5)
    ad84:	19800b26 	beq	r3,r6,adb4 <__fpcmp_parts_d+0x64>
    ad88:	1800041e 	bne	r3,zero,ad9c <__fpcmp_parts_d+0x4c>
    ad8c:	f800283a 	ret
    ad90:	30c01a26 	beq	r6,r3,adfc <__fpcmp_parts_d+0xac>
    ad94:	28800117 	ldw	r2,4(r5)
    ad98:	1000041e 	bne	r2,zero,adac <__fpcmp_parts_d+0x5c>
    ad9c:	00bfffc4 	movi	r2,-1
    ada0:	f800283a 	ret
    ada4:	20800117 	ldw	r2,4(r4)
    ada8:	103ffc1e 	bne	r2,zero,ad9c <__fpcmp_parts_d+0x4c>
    adac:	00800044 	movi	r2,1
    adb0:	f800283a 	ret
    adb4:	21c00217 	ldw	r7,8(r4)
    adb8:	29800217 	ldw	r6,8(r5)
    adbc:	31c0020e 	bge	r6,r7,adc8 <__fpcmp_parts_d+0x78>
    adc0:	183ff61e 	bne	r3,zero,ad9c <__fpcmp_parts_d+0x4c>
    adc4:	f800283a 	ret
    adc8:	39800a16 	blt	r7,r6,adf4 <__fpcmp_parts_d+0xa4>
    adcc:	20800417 	ldw	r2,16(r4)
    add0:	29800417 	ldw	r6,16(r5)
    add4:	21c00317 	ldw	r7,12(r4)
    add8:	29000317 	ldw	r4,12(r5)
    addc:	30800936 	bltu	r6,r2,ae04 <__fpcmp_parts_d+0xb4>
    ade0:	1180011e 	bne	r2,r6,ade8 <__fpcmp_parts_d+0x98>
    ade4:	21c00736 	bltu	r4,r7,ae04 <__fpcmp_parts_d+0xb4>
    ade8:	11800236 	bltu	r2,r6,adf4 <__fpcmp_parts_d+0xa4>
    adec:	3080031e 	bne	r6,r2,adfc <__fpcmp_parts_d+0xac>
    adf0:	3900022e 	bgeu	r7,r4,adfc <__fpcmp_parts_d+0xac>
    adf4:	183fe926 	beq	r3,zero,ad9c <__fpcmp_parts_d+0x4c>
    adf8:	003fec06 	br	adac <__fpcmp_parts_d+0x5c>
    adfc:	0005883a 	mov	r2,zero
    ae00:	f800283a 	ret
    ae04:	183fe926 	beq	r3,zero,adac <__fpcmp_parts_d+0x5c>
    ae08:	003fe406 	br	ad9c <__fpcmp_parts_d+0x4c>
    ae0c:	30ffe51e 	bne	r6,r3,ada4 <__fpcmp_parts_d+0x54>
    ae10:	28c00117 	ldw	r3,4(r5)
    ae14:	20800117 	ldw	r2,4(r4)
    ae18:	1885c83a 	sub	r2,r3,r2
    ae1c:	f800283a 	ret

0000ae20 <__lshrdi3>:
    ae20:	2005883a 	mov	r2,r4
    ae24:	2807883a 	mov	r3,r5
    ae28:	30000826 	beq	r6,zero,ae4c <__lshrdi3+0x2c>
    ae2c:	01000804 	movi	r4,32
    ae30:	2189c83a 	sub	r4,r4,r6
    ae34:	0100060e 	bge	zero,r4,ae50 <__lshrdi3+0x30>
    ae38:	1184d83a 	srl	r2,r2,r6
    ae3c:	2908983a 	sll	r4,r5,r4
    ae40:	298cd83a 	srl	r6,r5,r6
    ae44:	2084b03a 	or	r2,r4,r2
    ae48:	3007883a 	mov	r3,r6
    ae4c:	f800283a 	ret
    ae50:	0105c83a 	sub	r2,zero,r4
    ae54:	000d883a 	mov	r6,zero
    ae58:	2884d83a 	srl	r2,r5,r2
    ae5c:	3007883a 	mov	r3,r6
    ae60:	003ffa06 	br	ae4c <__lshrdi3+0x2c>

0000ae64 <__ashldi3>:
    ae64:	2005883a 	mov	r2,r4
    ae68:	2807883a 	mov	r3,r5
    ae6c:	30000826 	beq	r6,zero,ae90 <__ashldi3+0x2c>
    ae70:	01000804 	movi	r4,32
    ae74:	2189c83a 	sub	r4,r4,r6
    ae78:	0100060e 	bge	zero,r4,ae94 <__ashldi3+0x30>
    ae7c:	1108d83a 	srl	r4,r2,r4
    ae80:	2986983a 	sll	r3,r5,r6
    ae84:	118c983a 	sll	r6,r2,r6
    ae88:	20c6b03a 	or	r3,r4,r3
    ae8c:	3005883a 	mov	r2,r6
    ae90:	f800283a 	ret
    ae94:	0107c83a 	sub	r3,zero,r4
    ae98:	000d883a 	mov	r6,zero
    ae9c:	10c6983a 	sll	r3,r2,r3
    aea0:	3005883a 	mov	r2,r6
    aea4:	003ffa06 	br	ae90 <__ashldi3+0x2c>

0000aea8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    aea8:	defffe04 	addi	sp,sp,-8
    aeac:	dfc00115 	stw	ra,4(sp)
    aeb0:	df000015 	stw	fp,0(sp)
    aeb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    aeb8:	00800074 	movhi	r2,1
    aebc:	10bebe04 	addi	r2,r2,-1288
    aec0:	10800017 	ldw	r2,0(r2)
    aec4:	10000526 	beq	r2,zero,aedc <alt_get_errno+0x34>
    aec8:	00800074 	movhi	r2,1
    aecc:	10bebe04 	addi	r2,r2,-1288
    aed0:	10800017 	ldw	r2,0(r2)
    aed4:	103ee83a 	callr	r2
    aed8:	00000206 	br	aee4 <alt_get_errno+0x3c>
    aedc:	00800074 	movhi	r2,1
    aee0:	10860904 	addi	r2,r2,6180
}
    aee4:	e037883a 	mov	sp,fp
    aee8:	dfc00117 	ldw	ra,4(sp)
    aeec:	df000017 	ldw	fp,0(sp)
    aef0:	dec00204 	addi	sp,sp,8
    aef4:	f800283a 	ret

0000aef8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    aef8:	defffb04 	addi	sp,sp,-20
    aefc:	dfc00415 	stw	ra,16(sp)
    af00:	df000315 	stw	fp,12(sp)
    af04:	df000304 	addi	fp,sp,12
    af08:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    af0c:	e0bfff17 	ldw	r2,-4(fp)
    af10:	10000716 	blt	r2,zero,af30 <close+0x38>
    af14:	e13fff17 	ldw	r4,-4(fp)
    af18:	01400304 	movi	r5,12
    af1c:	000a8440 	call	a844 <__mulsi3>
    af20:	00c00074 	movhi	r3,1
    af24:	18f99604 	addi	r3,r3,-6568
    af28:	10c5883a 	add	r2,r2,r3
    af2c:	00000106 	br	af34 <close+0x3c>
    af30:	0005883a 	mov	r2,zero
    af34:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    af38:	e0bffd17 	ldw	r2,-12(fp)
    af3c:	10001826 	beq	r2,zero,afa0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    af40:	e0bffd17 	ldw	r2,-12(fp)
    af44:	10800017 	ldw	r2,0(r2)
    af48:	10800417 	ldw	r2,16(r2)
    af4c:	10000626 	beq	r2,zero,af68 <close+0x70>
    af50:	e0bffd17 	ldw	r2,-12(fp)
    af54:	10800017 	ldw	r2,0(r2)
    af58:	10800417 	ldw	r2,16(r2)
    af5c:	e13ffd17 	ldw	r4,-12(fp)
    af60:	103ee83a 	callr	r2
    af64:	00000106 	br	af6c <close+0x74>
    af68:	0005883a 	mov	r2,zero
    af6c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    af70:	e13fff17 	ldw	r4,-4(fp)
    af74:	000b5f00 	call	b5f0 <alt_release_fd>
    if (rval < 0)
    af78:	e0bffe17 	ldw	r2,-8(fp)
    af7c:	1000060e 	bge	r2,zero,af98 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    af80:	000aea80 	call	aea8 <alt_get_errno>
    af84:	e0fffe17 	ldw	r3,-8(fp)
    af88:	00c7c83a 	sub	r3,zero,r3
    af8c:	10c00015 	stw	r3,0(r2)
      return -1;
    af90:	00bfffc4 	movi	r2,-1
    af94:	00000606 	br	afb0 <close+0xb8>
    }
    return 0;
    af98:	0005883a 	mov	r2,zero
    af9c:	00000406 	br	afb0 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    afa0:	000aea80 	call	aea8 <alt_get_errno>
    afa4:	00c01444 	movi	r3,81
    afa8:	10c00015 	stw	r3,0(r2)
    return -1;
    afac:	00bfffc4 	movi	r2,-1
  }
}
    afb0:	e037883a 	mov	sp,fp
    afb4:	dfc00117 	ldw	ra,4(sp)
    afb8:	df000017 	ldw	fp,0(sp)
    afbc:	dec00204 	addi	sp,sp,8
    afc0:	f800283a 	ret

0000afc4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    afc4:	defffc04 	addi	sp,sp,-16
    afc8:	df000315 	stw	fp,12(sp)
    afcc:	df000304 	addi	fp,sp,12
    afd0:	e13ffd15 	stw	r4,-12(fp)
    afd4:	e17ffe15 	stw	r5,-8(fp)
    afd8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    afdc:	e0bfff17 	ldw	r2,-4(fp)
}
    afe0:	e037883a 	mov	sp,fp
    afe4:	df000017 	ldw	fp,0(sp)
    afe8:	dec00104 	addi	sp,sp,4
    afec:	f800283a 	ret

0000aff0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    aff0:	defffe04 	addi	sp,sp,-8
    aff4:	dfc00115 	stw	ra,4(sp)
    aff8:	df000015 	stw	fp,0(sp)
    affc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b000:	00800074 	movhi	r2,1
    b004:	10bebe04 	addi	r2,r2,-1288
    b008:	10800017 	ldw	r2,0(r2)
    b00c:	10000526 	beq	r2,zero,b024 <alt_get_errno+0x34>
    b010:	00800074 	movhi	r2,1
    b014:	10bebe04 	addi	r2,r2,-1288
    b018:	10800017 	ldw	r2,0(r2)
    b01c:	103ee83a 	callr	r2
    b020:	00000206 	br	b02c <alt_get_errno+0x3c>
    b024:	00800074 	movhi	r2,1
    b028:	10860904 	addi	r2,r2,6180
}
    b02c:	e037883a 	mov	sp,fp
    b030:	dfc00117 	ldw	ra,4(sp)
    b034:	df000017 	ldw	fp,0(sp)
    b038:	dec00204 	addi	sp,sp,8
    b03c:	f800283a 	ret

0000b040 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b040:	defffb04 	addi	sp,sp,-20
    b044:	dfc00415 	stw	ra,16(sp)
    b048:	df000315 	stw	fp,12(sp)
    b04c:	df000304 	addi	fp,sp,12
    b050:	e13ffe15 	stw	r4,-8(fp)
    b054:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b058:	e0bffe17 	ldw	r2,-8(fp)
    b05c:	10000716 	blt	r2,zero,b07c <fstat+0x3c>
    b060:	e13ffe17 	ldw	r4,-8(fp)
    b064:	01400304 	movi	r5,12
    b068:	000a8440 	call	a844 <__mulsi3>
    b06c:	00c00074 	movhi	r3,1
    b070:	18f99604 	addi	r3,r3,-6568
    b074:	10c5883a 	add	r2,r2,r3
    b078:	00000106 	br	b080 <fstat+0x40>
    b07c:	0005883a 	mov	r2,zero
    b080:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    b084:	e0bffd17 	ldw	r2,-12(fp)
    b088:	10001026 	beq	r2,zero,b0cc <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b08c:	e0bffd17 	ldw	r2,-12(fp)
    b090:	10800017 	ldw	r2,0(r2)
    b094:	10800817 	ldw	r2,32(r2)
    b098:	10000726 	beq	r2,zero,b0b8 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
    b09c:	e0bffd17 	ldw	r2,-12(fp)
    b0a0:	10800017 	ldw	r2,0(r2)
    b0a4:	10800817 	ldw	r2,32(r2)
    b0a8:	e13ffd17 	ldw	r4,-12(fp)
    b0ac:	e17fff17 	ldw	r5,-4(fp)
    b0b0:	103ee83a 	callr	r2
    b0b4:	00000906 	br	b0dc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b0b8:	e0bfff17 	ldw	r2,-4(fp)
    b0bc:	00c80004 	movi	r3,8192
    b0c0:	10c00115 	stw	r3,4(r2)
      return 0;
    b0c4:	0005883a 	mov	r2,zero
    b0c8:	00000406 	br	b0dc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b0cc:	000aff00 	call	aff0 <alt_get_errno>
    b0d0:	00c01444 	movi	r3,81
    b0d4:	10c00015 	stw	r3,0(r2)
    return -1;
    b0d8:	00bfffc4 	movi	r2,-1
  }
}
    b0dc:	e037883a 	mov	sp,fp
    b0e0:	dfc00117 	ldw	ra,4(sp)
    b0e4:	df000017 	ldw	fp,0(sp)
    b0e8:	dec00204 	addi	sp,sp,8
    b0ec:	f800283a 	ret

0000b0f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b0f0:	defffe04 	addi	sp,sp,-8
    b0f4:	dfc00115 	stw	ra,4(sp)
    b0f8:	df000015 	stw	fp,0(sp)
    b0fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b100:	00800074 	movhi	r2,1
    b104:	10bebe04 	addi	r2,r2,-1288
    b108:	10800017 	ldw	r2,0(r2)
    b10c:	10000526 	beq	r2,zero,b124 <alt_get_errno+0x34>
    b110:	00800074 	movhi	r2,1
    b114:	10bebe04 	addi	r2,r2,-1288
    b118:	10800017 	ldw	r2,0(r2)
    b11c:	103ee83a 	callr	r2
    b120:	00000206 	br	b12c <alt_get_errno+0x3c>
    b124:	00800074 	movhi	r2,1
    b128:	10860904 	addi	r2,r2,6180
}
    b12c:	e037883a 	mov	sp,fp
    b130:	dfc00117 	ldw	ra,4(sp)
    b134:	df000017 	ldw	fp,0(sp)
    b138:	dec00204 	addi	sp,sp,8
    b13c:	f800283a 	ret

0000b140 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b140:	deffed04 	addi	sp,sp,-76
    b144:	dfc01215 	stw	ra,72(sp)
    b148:	df001115 	stw	fp,68(sp)
    b14c:	df001104 	addi	fp,sp,68
    b150:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b154:	e0bfff17 	ldw	r2,-4(fp)
    b158:	10000716 	blt	r2,zero,b178 <isatty+0x38>
    b15c:	e13fff17 	ldw	r4,-4(fp)
    b160:	01400304 	movi	r5,12
    b164:	000a8440 	call	a844 <__mulsi3>
    b168:	00c00074 	movhi	r3,1
    b16c:	18f99604 	addi	r3,r3,-6568
    b170:	10c5883a 	add	r2,r2,r3
    b174:	00000106 	br	b17c <isatty+0x3c>
    b178:	0005883a 	mov	r2,zero
    b17c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    b180:	e0bfef17 	ldw	r2,-68(fp)
    b184:	10000e26 	beq	r2,zero,b1c0 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b188:	e0bfef17 	ldw	r2,-68(fp)
    b18c:	10800017 	ldw	r2,0(r2)
    b190:	10800817 	ldw	r2,32(r2)
    b194:	1000021e 	bne	r2,zero,b1a0 <isatty+0x60>
    {
      return 1;
    b198:	00800044 	movi	r2,1
    b19c:	00000c06 	br	b1d0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b1a0:	e0bff004 	addi	r2,fp,-64
    b1a4:	e13fff17 	ldw	r4,-4(fp)
    b1a8:	100b883a 	mov	r5,r2
    b1ac:	000b0400 	call	b040 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b1b0:	e0bff117 	ldw	r2,-60(fp)
    b1b4:	10880020 	cmpeqi	r2,r2,8192
    b1b8:	10803fcc 	andi	r2,r2,255
    b1bc:	00000406 	br	b1d0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b1c0:	000b0f00 	call	b0f0 <alt_get_errno>
    b1c4:	00c01444 	movi	r3,81
    b1c8:	10c00015 	stw	r3,0(r2)
    return 0;
    b1cc:	0005883a 	mov	r2,zero
  }
}
    b1d0:	e037883a 	mov	sp,fp
    b1d4:	dfc00117 	ldw	ra,4(sp)
    b1d8:	df000017 	ldw	fp,0(sp)
    b1dc:	dec00204 	addi	sp,sp,8
    b1e0:	f800283a 	ret

0000b1e4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b1e4:	defffc04 	addi	sp,sp,-16
    b1e8:	df000315 	stw	fp,12(sp)
    b1ec:	df000304 	addi	fp,sp,12
    b1f0:	e13ffd15 	stw	r4,-12(fp)
    b1f4:	e17ffe15 	stw	r5,-8(fp)
    b1f8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b1fc:	e0fffe17 	ldw	r3,-8(fp)
    b200:	e0bffd17 	ldw	r2,-12(fp)
    b204:	18800e26 	beq	r3,r2,b240 <alt_load_section+0x5c>
  {
    while( to != end )
    b208:	00000a06 	br	b234 <alt_load_section+0x50>
    {
      *to++ = *from++;
    b20c:	e0bffd17 	ldw	r2,-12(fp)
    b210:	10c00017 	ldw	r3,0(r2)
    b214:	e0bffe17 	ldw	r2,-8(fp)
    b218:	10c00015 	stw	r3,0(r2)
    b21c:	e0bffe17 	ldw	r2,-8(fp)
    b220:	10800104 	addi	r2,r2,4
    b224:	e0bffe15 	stw	r2,-8(fp)
    b228:	e0bffd17 	ldw	r2,-12(fp)
    b22c:	10800104 	addi	r2,r2,4
    b230:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b234:	e0fffe17 	ldw	r3,-8(fp)
    b238:	e0bfff17 	ldw	r2,-4(fp)
    b23c:	18bff31e 	bne	r3,r2,b20c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b240:	e037883a 	mov	sp,fp
    b244:	df000017 	ldw	fp,0(sp)
    b248:	dec00104 	addi	sp,sp,4
    b24c:	f800283a 	ret

0000b250 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b250:	defffe04 	addi	sp,sp,-8
    b254:	dfc00115 	stw	ra,4(sp)
    b258:	df000015 	stw	fp,0(sp)
    b25c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b260:	01000074 	movhi	r4,1
    b264:	213ec304 	addi	r4,r4,-1268
    b268:	01400074 	movhi	r5,1
    b26c:	29778704 	addi	r5,r5,-8676
    b270:	01800074 	movhi	r6,1
    b274:	31bec304 	addi	r6,r6,-1268
    b278:	000b1e40 	call	b1e4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b27c:	01000034 	movhi	r4,0
    b280:	21000804 	addi	r4,r4,32
    b284:	01400034 	movhi	r5,0
    b288:	29400804 	addi	r5,r5,32
    b28c:	01800034 	movhi	r6,0
    b290:	31806f04 	addi	r6,r6,444
    b294:	000b1e40 	call	b1e4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b298:	01000074 	movhi	r4,1
    b29c:	21366604 	addi	r4,r4,-9832
    b2a0:	01400074 	movhi	r5,1
    b2a4:	29766604 	addi	r5,r5,-9832
    b2a8:	01800074 	movhi	r6,1
    b2ac:	31b78704 	addi	r6,r6,-8676
    b2b0:	000b1e40 	call	b1e4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b2b4:	000ca100 	call	ca10 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b2b8:	000cc640 	call	cc64 <alt_icache_flush_all>
}
    b2bc:	e037883a 	mov	sp,fp
    b2c0:	dfc00117 	ldw	ra,4(sp)
    b2c4:	df000017 	ldw	fp,0(sp)
    b2c8:	dec00204 	addi	sp,sp,8
    b2cc:	f800283a 	ret

0000b2d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b2d0:	defffe04 	addi	sp,sp,-8
    b2d4:	dfc00115 	stw	ra,4(sp)
    b2d8:	df000015 	stw	fp,0(sp)
    b2dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b2e0:	00800074 	movhi	r2,1
    b2e4:	10bebe04 	addi	r2,r2,-1288
    b2e8:	10800017 	ldw	r2,0(r2)
    b2ec:	10000526 	beq	r2,zero,b304 <alt_get_errno+0x34>
    b2f0:	00800074 	movhi	r2,1
    b2f4:	10bebe04 	addi	r2,r2,-1288
    b2f8:	10800017 	ldw	r2,0(r2)
    b2fc:	103ee83a 	callr	r2
    b300:	00000206 	br	b30c <alt_get_errno+0x3c>
    b304:	00800074 	movhi	r2,1
    b308:	10860904 	addi	r2,r2,6180
}
    b30c:	e037883a 	mov	sp,fp
    b310:	dfc00117 	ldw	ra,4(sp)
    b314:	df000017 	ldw	fp,0(sp)
    b318:	dec00204 	addi	sp,sp,8
    b31c:	f800283a 	ret

0000b320 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b320:	defff904 	addi	sp,sp,-28
    b324:	dfc00615 	stw	ra,24(sp)
    b328:	df000515 	stw	fp,20(sp)
    b32c:	df000504 	addi	fp,sp,20
    b330:	e13ffd15 	stw	r4,-12(fp)
    b334:	e17ffe15 	stw	r5,-8(fp)
    b338:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b33c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b340:	e0bffd17 	ldw	r2,-12(fp)
    b344:	10000716 	blt	r2,zero,b364 <lseek+0x44>
    b348:	e13ffd17 	ldw	r4,-12(fp)
    b34c:	01400304 	movi	r5,12
    b350:	000a8440 	call	a844 <__mulsi3>
    b354:	00c00074 	movhi	r3,1
    b358:	18f99604 	addi	r3,r3,-6568
    b35c:	10c5883a 	add	r2,r2,r3
    b360:	00000106 	br	b368 <lseek+0x48>
    b364:	0005883a 	mov	r2,zero
    b368:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    b36c:	e0bffc17 	ldw	r2,-16(fp)
    b370:	10001026 	beq	r2,zero,b3b4 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b374:	e0bffc17 	ldw	r2,-16(fp)
    b378:	10800017 	ldw	r2,0(r2)
    b37c:	10800717 	ldw	r2,28(r2)
    b380:	10000926 	beq	r2,zero,b3a8 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b384:	e0bffc17 	ldw	r2,-16(fp)
    b388:	10800017 	ldw	r2,0(r2)
    b38c:	10800717 	ldw	r2,28(r2)
    b390:	e13ffc17 	ldw	r4,-16(fp)
    b394:	e17ffe17 	ldw	r5,-8(fp)
    b398:	e1bfff17 	ldw	r6,-4(fp)
    b39c:	103ee83a 	callr	r2
    b3a0:	e0bffb15 	stw	r2,-20(fp)
    b3a4:	00000506 	br	b3bc <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b3a8:	00bfde84 	movi	r2,-134
    b3ac:	e0bffb15 	stw	r2,-20(fp)
    b3b0:	00000206 	br	b3bc <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
    b3b4:	00bfebc4 	movi	r2,-81
    b3b8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    b3bc:	e0bffb17 	ldw	r2,-20(fp)
    b3c0:	1000060e 	bge	r2,zero,b3dc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    b3c4:	000b2d00 	call	b2d0 <alt_get_errno>
    b3c8:	e0fffb17 	ldw	r3,-20(fp)
    b3cc:	00c7c83a 	sub	r3,zero,r3
    b3d0:	10c00015 	stw	r3,0(r2)
    rc = -1;
    b3d4:	00bfffc4 	movi	r2,-1
    b3d8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    b3dc:	e0bffb17 	ldw	r2,-20(fp)
}
    b3e0:	e037883a 	mov	sp,fp
    b3e4:	dfc00117 	ldw	ra,4(sp)
    b3e8:	df000017 	ldw	fp,0(sp)
    b3ec:	dec00204 	addi	sp,sp,8
    b3f0:	f800283a 	ret

0000b3f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b3f4:	defffd04 	addi	sp,sp,-12
    b3f8:	dfc00215 	stw	ra,8(sp)
    b3fc:	df000115 	stw	fp,4(sp)
    b400:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b404:	0009883a 	mov	r4,zero
    b408:	000b8980 	call	b898 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    b40c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b410:	000b8cc0 	call	b8cc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b414:	01000074 	movhi	r4,1
    b418:	21373c04 	addi	r4,r4,-8976
    b41c:	01400074 	movhi	r5,1
    b420:	29773c04 	addi	r5,r5,-8976
    b424:	01800074 	movhi	r6,1
    b428:	31b73c04 	addi	r6,r6,-8976
    b42c:	000cd600 	call	cd60 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b430:	000cb1c0 	call	cb1c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b434:	01000074 	movhi	r4,1
    b438:	2132de04 	addi	r4,r4,-13448
    b43c:	000d5c40 	call	d5c4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b440:	d1275717 	ldw	r4,-25252(gp)
    b444:	d0e75817 	ldw	r3,-25248(gp)
    b448:	d0a75917 	ldw	r2,-25244(gp)
    b44c:	180b883a 	mov	r5,r3
    b450:	100d883a 	mov	r6,r2
    b454:	0000fb80 	call	fb8 <main>
    b458:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b45c:	01000044 	movi	r4,1
    b460:	000aef80 	call	aef8 <close>
  exit (result);
    b464:	e13fff17 	ldw	r4,-4(fp)
    b468:	000d5d80 	call	d5d8 <exit>

0000b46c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    b46c:	defffe04 	addi	sp,sp,-8
    b470:	df000115 	stw	fp,4(sp)
    b474:	df000104 	addi	fp,sp,4
    b478:	e13fff15 	stw	r4,-4(fp)
}
    b47c:	e037883a 	mov	sp,fp
    b480:	df000017 	ldw	fp,0(sp)
    b484:	dec00104 	addi	sp,sp,4
    b488:	f800283a 	ret

0000b48c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    b48c:	defffe04 	addi	sp,sp,-8
    b490:	df000115 	stw	fp,4(sp)
    b494:	df000104 	addi	fp,sp,4
    b498:	e13fff15 	stw	r4,-4(fp)
}
    b49c:	e037883a 	mov	sp,fp
    b4a0:	df000017 	ldw	fp,0(sp)
    b4a4:	dec00104 	addi	sp,sp,4
    b4a8:	f800283a 	ret

0000b4ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b4ac:	defffe04 	addi	sp,sp,-8
    b4b0:	dfc00115 	stw	ra,4(sp)
    b4b4:	df000015 	stw	fp,0(sp)
    b4b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b4bc:	00800074 	movhi	r2,1
    b4c0:	10bebe04 	addi	r2,r2,-1288
    b4c4:	10800017 	ldw	r2,0(r2)
    b4c8:	10000526 	beq	r2,zero,b4e0 <alt_get_errno+0x34>
    b4cc:	00800074 	movhi	r2,1
    b4d0:	10bebe04 	addi	r2,r2,-1288
    b4d4:	10800017 	ldw	r2,0(r2)
    b4d8:	103ee83a 	callr	r2
    b4dc:	00000206 	br	b4e8 <alt_get_errno+0x3c>
    b4e0:	00800074 	movhi	r2,1
    b4e4:	10860904 	addi	r2,r2,6180
}
    b4e8:	e037883a 	mov	sp,fp
    b4ec:	dfc00117 	ldw	ra,4(sp)
    b4f0:	df000017 	ldw	fp,0(sp)
    b4f4:	dec00204 	addi	sp,sp,8
    b4f8:	f800283a 	ret

0000b4fc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b4fc:	defff904 	addi	sp,sp,-28
    b500:	dfc00615 	stw	ra,24(sp)
    b504:	df000515 	stw	fp,20(sp)
    b508:	df000504 	addi	fp,sp,20
    b50c:	e13ffd15 	stw	r4,-12(fp)
    b510:	e17ffe15 	stw	r5,-8(fp)
    b514:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b518:	e0bffd17 	ldw	r2,-12(fp)
    b51c:	10000716 	blt	r2,zero,b53c <read+0x40>
    b520:	e13ffd17 	ldw	r4,-12(fp)
    b524:	01400304 	movi	r5,12
    b528:	000a8440 	call	a844 <__mulsi3>
    b52c:	00c00074 	movhi	r3,1
    b530:	18f99604 	addi	r3,r3,-6568
    b534:	10c5883a 	add	r2,r2,r3
    b538:	00000106 	br	b540 <read+0x44>
    b53c:	0005883a 	mov	r2,zero
    b540:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b544:	e0bffb17 	ldw	r2,-20(fp)
    b548:	10002026 	beq	r2,zero,b5cc <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b54c:	e0bffb17 	ldw	r2,-20(fp)
    b550:	10800217 	ldw	r2,8(r2)
    b554:	108000cc 	andi	r2,r2,3
    b558:	10800060 	cmpeqi	r2,r2,1
    b55c:	1000171e 	bne	r2,zero,b5bc <read+0xc0>
        (fd->dev->read))
    b560:	e0bffb17 	ldw	r2,-20(fp)
    b564:	10800017 	ldw	r2,0(r2)
    b568:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b56c:	10001326 	beq	r2,zero,b5bc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b570:	e0bffb17 	ldw	r2,-20(fp)
    b574:	10800017 	ldw	r2,0(r2)
    b578:	10c00517 	ldw	r3,20(r2)
    b57c:	e0bfff17 	ldw	r2,-4(fp)
    b580:	e13ffb17 	ldw	r4,-20(fp)
    b584:	e17ffe17 	ldw	r5,-8(fp)
    b588:	100d883a 	mov	r6,r2
    b58c:	183ee83a 	callr	r3
    b590:	e0bffc15 	stw	r2,-16(fp)
    b594:	e0bffc17 	ldw	r2,-16(fp)
    b598:	1000060e 	bge	r2,zero,b5b4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    b59c:	000b4ac0 	call	b4ac <alt_get_errno>
    b5a0:	e0fffc17 	ldw	r3,-16(fp)
    b5a4:	00c7c83a 	sub	r3,zero,r3
    b5a8:	10c00015 	stw	r3,0(r2)
          return -1;
    b5ac:	00bfffc4 	movi	r2,-1
    b5b0:	00000a06 	br	b5dc <read+0xe0>
        }
        return rval;
    b5b4:	e0bffc17 	ldw	r2,-16(fp)
    b5b8:	00000806 	br	b5dc <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b5bc:	000b4ac0 	call	b4ac <alt_get_errno>
    b5c0:	00c00344 	movi	r3,13
    b5c4:	10c00015 	stw	r3,0(r2)
    b5c8:	00000306 	br	b5d8 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b5cc:	000b4ac0 	call	b4ac <alt_get_errno>
    b5d0:	00c01444 	movi	r3,81
    b5d4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    b5d8:	00bfffc4 	movi	r2,-1
}
    b5dc:	e037883a 	mov	sp,fp
    b5e0:	dfc00117 	ldw	ra,4(sp)
    b5e4:	df000017 	ldw	fp,0(sp)
    b5e8:	dec00204 	addi	sp,sp,8
    b5ec:	f800283a 	ret

0000b5f0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b5f0:	defffc04 	addi	sp,sp,-16
    b5f4:	dfc00315 	stw	ra,12(sp)
    b5f8:	df000215 	stw	fp,8(sp)
    b5fc:	dc000115 	stw	r16,4(sp)
    b600:	df000104 	addi	fp,sp,4
    b604:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    b608:	e0bfff17 	ldw	r2,-4(fp)
    b60c:	108000d0 	cmplti	r2,r2,3
    b610:	1000111e 	bne	r2,zero,b658 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    b614:	04000074 	movhi	r16,1
    b618:	84399604 	addi	r16,r16,-6568
    b61c:	e0bfff17 	ldw	r2,-4(fp)
    b620:	1009883a 	mov	r4,r2
    b624:	01400304 	movi	r5,12
    b628:	000a8440 	call	a844 <__mulsi3>
    b62c:	8085883a 	add	r2,r16,r2
    b630:	10800204 	addi	r2,r2,8
    b634:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    b638:	04000074 	movhi	r16,1
    b63c:	84399604 	addi	r16,r16,-6568
    b640:	e0bfff17 	ldw	r2,-4(fp)
    b644:	1009883a 	mov	r4,r2
    b648:	01400304 	movi	r5,12
    b64c:	000a8440 	call	a844 <__mulsi3>
    b650:	8085883a 	add	r2,r16,r2
    b654:	10000015 	stw	zero,0(r2)
  }
}
    b658:	e037883a 	mov	sp,fp
    b65c:	dfc00217 	ldw	ra,8(sp)
    b660:	df000117 	ldw	fp,4(sp)
    b664:	dc000017 	ldw	r16,0(sp)
    b668:	dec00304 	addi	sp,sp,12
    b66c:	f800283a 	ret

0000b670 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b670:	defff904 	addi	sp,sp,-28
    b674:	df000615 	stw	fp,24(sp)
    b678:	df000604 	addi	fp,sp,24
    b67c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b680:	0005303a 	rdctl	r2,status
    b684:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b688:	e0fffc17 	ldw	r3,-16(fp)
    b68c:	00bfff84 	movi	r2,-2
    b690:	1884703a 	and	r2,r3,r2
    b694:	1001703a 	wrctl	status,r2
  
  return context;
    b698:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b69c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b6a0:	d0a00c17 	ldw	r2,-32720(gp)
    b6a4:	10c000c4 	addi	r3,r2,3
    b6a8:	00bfff04 	movi	r2,-4
    b6ac:	1884703a 	and	r2,r3,r2
    b6b0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b6b4:	d0e00c17 	ldw	r3,-32720(gp)
    b6b8:	e0bfff17 	ldw	r2,-4(fp)
    b6bc:	1885883a 	add	r2,r3,r2
    b6c0:	00c02034 	movhi	r3,128
    b6c4:	18c00004 	addi	r3,r3,0
    b6c8:	1880062e 	bgeu	r3,r2,b6e4 <sbrk+0x74>
    b6cc:	e0bffa17 	ldw	r2,-24(fp)
    b6d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b6d4:	e0bffd17 	ldw	r2,-12(fp)
    b6d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b6dc:	00bfffc4 	movi	r2,-1
    b6e0:	00000b06 	br	b710 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    b6e4:	d0a00c17 	ldw	r2,-32720(gp)
    b6e8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    b6ec:	d0e00c17 	ldw	r3,-32720(gp)
    b6f0:	e0bfff17 	ldw	r2,-4(fp)
    b6f4:	1885883a 	add	r2,r3,r2
    b6f8:	d0a00c15 	stw	r2,-32720(gp)
    b6fc:	e0bffa17 	ldw	r2,-24(fp)
    b700:	e0bffe15 	stw	r2,-8(fp)
    b704:	e0bffe17 	ldw	r2,-8(fp)
    b708:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b70c:	e0bffb17 	ldw	r2,-20(fp)
} 
    b710:	e037883a 	mov	sp,fp
    b714:	df000017 	ldw	fp,0(sp)
    b718:	dec00104 	addi	sp,sp,4
    b71c:	f800283a 	ret

0000b720 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b720:	defffe04 	addi	sp,sp,-8
    b724:	dfc00115 	stw	ra,4(sp)
    b728:	df000015 	stw	fp,0(sp)
    b72c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b730:	00800074 	movhi	r2,1
    b734:	10bebe04 	addi	r2,r2,-1288
    b738:	10800017 	ldw	r2,0(r2)
    b73c:	10000526 	beq	r2,zero,b754 <alt_get_errno+0x34>
    b740:	00800074 	movhi	r2,1
    b744:	10bebe04 	addi	r2,r2,-1288
    b748:	10800017 	ldw	r2,0(r2)
    b74c:	103ee83a 	callr	r2
    b750:	00000206 	br	b75c <alt_get_errno+0x3c>
    b754:	00800074 	movhi	r2,1
    b758:	10860904 	addi	r2,r2,6180
}
    b75c:	e037883a 	mov	sp,fp
    b760:	dfc00117 	ldw	ra,4(sp)
    b764:	df000017 	ldw	fp,0(sp)
    b768:	dec00204 	addi	sp,sp,8
    b76c:	f800283a 	ret

0000b770 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b770:	defff904 	addi	sp,sp,-28
    b774:	dfc00615 	stw	ra,24(sp)
    b778:	df000515 	stw	fp,20(sp)
    b77c:	df000504 	addi	fp,sp,20
    b780:	e13ffd15 	stw	r4,-12(fp)
    b784:	e17ffe15 	stw	r5,-8(fp)
    b788:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b78c:	e0bffd17 	ldw	r2,-12(fp)
    b790:	10000716 	blt	r2,zero,b7b0 <write+0x40>
    b794:	e13ffd17 	ldw	r4,-12(fp)
    b798:	01400304 	movi	r5,12
    b79c:	000a8440 	call	a844 <__mulsi3>
    b7a0:	00c00074 	movhi	r3,1
    b7a4:	18f99604 	addi	r3,r3,-6568
    b7a8:	10c5883a 	add	r2,r2,r3
    b7ac:	00000106 	br	b7b4 <write+0x44>
    b7b0:	0005883a 	mov	r2,zero
    b7b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b7b8:	e0bffb17 	ldw	r2,-20(fp)
    b7bc:	10001f26 	beq	r2,zero,b83c <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b7c0:	e0bffb17 	ldw	r2,-20(fp)
    b7c4:	10800217 	ldw	r2,8(r2)
    b7c8:	108000cc 	andi	r2,r2,3
    b7cc:	10001726 	beq	r2,zero,b82c <write+0xbc>
    b7d0:	e0bffb17 	ldw	r2,-20(fp)
    b7d4:	10800017 	ldw	r2,0(r2)
    b7d8:	10800617 	ldw	r2,24(r2)
    b7dc:	10001326 	beq	r2,zero,b82c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b7e0:	e0bffb17 	ldw	r2,-20(fp)
    b7e4:	10800017 	ldw	r2,0(r2)
    b7e8:	10c00617 	ldw	r3,24(r2)
    b7ec:	e0bfff17 	ldw	r2,-4(fp)
    b7f0:	e13ffb17 	ldw	r4,-20(fp)
    b7f4:	e17ffe17 	ldw	r5,-8(fp)
    b7f8:	100d883a 	mov	r6,r2
    b7fc:	183ee83a 	callr	r3
    b800:	e0bffc15 	stw	r2,-16(fp)
    b804:	e0bffc17 	ldw	r2,-16(fp)
    b808:	1000060e 	bge	r2,zero,b824 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    b80c:	000b7200 	call	b720 <alt_get_errno>
    b810:	e0fffc17 	ldw	r3,-16(fp)
    b814:	00c7c83a 	sub	r3,zero,r3
    b818:	10c00015 	stw	r3,0(r2)
        return -1;
    b81c:	00bfffc4 	movi	r2,-1
    b820:	00000a06 	br	b84c <write+0xdc>
      }
      return rval;
    b824:	e0bffc17 	ldw	r2,-16(fp)
    b828:	00000806 	br	b84c <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b82c:	000b7200 	call	b720 <alt_get_errno>
    b830:	00c00344 	movi	r3,13
    b834:	10c00015 	stw	r3,0(r2)
    b838:	00000306 	br	b848 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b83c:	000b7200 	call	b720 <alt_get_errno>
    b840:	00c01444 	movi	r3,81
    b844:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    b848:	00bfffc4 	movi	r2,-1
}
    b84c:	e037883a 	mov	sp,fp
    b850:	dfc00117 	ldw	ra,4(sp)
    b854:	df000017 	ldw	fp,0(sp)
    b858:	dec00204 	addi	sp,sp,8
    b85c:	f800283a 	ret

0000b860 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b860:	defffd04 	addi	sp,sp,-12
    b864:	dfc00215 	stw	ra,8(sp)
    b868:	df000115 	stw	fp,4(sp)
    b86c:	df000104 	addi	fp,sp,4
    b870:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b874:	e13fff17 	ldw	r4,-4(fp)
    b878:	01400074 	movhi	r5,1
    b87c:	297ebb04 	addi	r5,r5,-1300
    b880:	000ca7c0 	call	ca7c <alt_dev_llist_insert>
}
    b884:	e037883a 	mov	sp,fp
    b888:	dfc00117 	ldw	ra,4(sp)
    b88c:	df000017 	ldw	fp,0(sp)
    b890:	dec00204 	addi	sp,sp,8
    b894:	f800283a 	ret

0000b898 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b898:	defffd04 	addi	sp,sp,-12
    b89c:	dfc00215 	stw	ra,8(sp)
    b8a0:	df000115 	stw	fp,4(sp)
    b8a4:	df000104 	addi	fp,sp,4
    b8a8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    b8ac:	000d3bc0 	call	d3bc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b8b0:	00800044 	movi	r2,1
    b8b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b8b8:	e037883a 	mov	sp,fp
    b8bc:	dfc00117 	ldw	ra,4(sp)
    b8c0:	df000017 	ldw	fp,0(sp)
    b8c4:	dec00204 	addi	sp,sp,8
    b8c8:	f800283a 	ret

0000b8cc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b8cc:	defffe04 	addi	sp,sp,-8
    b8d0:	dfc00115 	stw	ra,4(sp)
    b8d4:	df000015 	stw	fp,0(sp)
    b8d8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_timer);
    b8dc:	01040034 	movhi	r4,4096
    b8e0:	21080004 	addi	r4,r4,8192
    b8e4:	000b883a 	mov	r5,zero
    b8e8:	000d883a 	mov	r6,zero
    b8ec:	01c00204 	movi	r7,8
    b8f0:	000c4b40 	call	c4b4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    b8f4:	01000074 	movhi	r4,1
    b8f8:	213a0004 	addi	r4,r4,-6144
    b8fc:	000b883a 	mov	r5,zero
    b900:	01800204 	movi	r6,8
    b904:	000bb440 	call	bb44 <altera_avalon_jtag_uart_init>
    b908:	01000074 	movhi	r4,1
    b90c:	2139f604 	addi	r4,r4,-6184
    b910:	000b8600 	call	b860 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    b914:	0001883a 	nop
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( DC_MOT_DIR, dc_mot_DIR);
    b918:	01000074 	movhi	r4,1
    b91c:	213e0e04 	addi	r4,r4,-1992
    b920:	000b8600 	call	b860 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( DC_MOT_PWM_SEL, dc_mot_PWM_SEL);
    b924:	01000074 	movhi	r4,1
    b928:	213e1904 	addi	r4,r4,-1948
    b92c:	000b8600 	call	b860 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( DC_MOT_STOP, dc_mot_STOP);
    b930:	01000074 	movhi	r4,1
    b934:	213e2404 	addi	r4,r4,-1904
    b938:	000b8600 	call	b860 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP2, Expansion_JP2);
    b93c:	01000074 	movhi	r4,1
    b940:	213e2f04 	addi	r4,r4,-1860
    b944:	000b8600 	call	b860 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    b948:	01000074 	movhi	r4,1
    b94c:	213e3a04 	addi	r4,r4,-1816
    b950:	000b8600 	call	b860 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( MSP430, msp430);
    b954:	01000074 	movhi	r4,1
    b958:	213e4504 	addi	r4,r4,-1772
    b95c:	000b8600 	call	b860 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    b960:	01000074 	movhi	r4,1
    b964:	213e5004 	addi	r4,r4,-1728
    b968:	000b8600 	call	b860 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RASPI, raspi);
    b96c:	01000074 	movhi	r4,1
    b970:	213e5b04 	addi	r4,r4,-1684
    b974:	000b8600 	call	b860 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SERVO_POS_0, servo_pos_0);
    b978:	01000074 	movhi	r4,1
    b97c:	213e6604 	addi	r4,r4,-1640
    b980:	000b8600 	call	b860 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SERVO_POS_1, servo_pos_1);
    b984:	01000074 	movhi	r4,1
    b988:	213e7104 	addi	r4,r4,-1596
    b98c:	000b8600 	call	b860 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_switches);
    b990:	01000074 	movhi	r4,1
    b994:	213e7c04 	addi	r4,r4,-1552
    b998:	000b8600 	call	b860 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( STEP_DIR, step_DIR);
    b99c:	01000074 	movhi	r4,1
    b9a0:	213e8704 	addi	r4,r4,-1508
    b9a4:	000b8600 	call	b860 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( STEP_PWM, step_PWM);
    b9a8:	01000074 	movhi	r4,1
    b9ac:	213e9204 	addi	r4,r4,-1464
    b9b0:	000b8600 	call	b860 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( STEP_STOP, step_STOP);
    b9b4:	01000074 	movhi	r4,1
    b9b8:	213e9d04 	addi	r4,r4,-1420
    b9bc:	000b8600 	call	b860 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_port);
    b9c0:	01000074 	movhi	r4,1
    b9c4:	213ea804 	addi	r4,r4,-1376
    b9c8:	000b8600 	call	b860 <alt_dev_reg>
}
    b9cc:	e037883a 	mov	sp,fp
    b9d0:	dfc00117 	ldw	ra,4(sp)
    b9d4:	df000017 	ldw	fp,0(sp)
    b9d8:	dec00204 	addi	sp,sp,8
    b9dc:	f800283a 	ret

0000b9e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b9e0:	defffa04 	addi	sp,sp,-24
    b9e4:	dfc00515 	stw	ra,20(sp)
    b9e8:	df000415 	stw	fp,16(sp)
    b9ec:	df000404 	addi	fp,sp,16
    b9f0:	e13ffd15 	stw	r4,-12(fp)
    b9f4:	e17ffe15 	stw	r5,-8(fp)
    b9f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b9fc:	e0bffd17 	ldw	r2,-12(fp)
    ba00:	10800017 	ldw	r2,0(r2)
    ba04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ba08:	e0bffc17 	ldw	r2,-16(fp)
    ba0c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    ba10:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ba14:	10800217 	ldw	r2,8(r2)
    ba18:	1809883a 	mov	r4,r3
    ba1c:	e17ffe17 	ldw	r5,-8(fp)
    ba20:	e1bfff17 	ldw	r6,-4(fp)
    ba24:	100f883a 	mov	r7,r2
    ba28:	000c0000 	call	c000 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    ba2c:	e037883a 	mov	sp,fp
    ba30:	dfc00117 	ldw	ra,4(sp)
    ba34:	df000017 	ldw	fp,0(sp)
    ba38:	dec00204 	addi	sp,sp,8
    ba3c:	f800283a 	ret

0000ba40 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ba40:	defffa04 	addi	sp,sp,-24
    ba44:	dfc00515 	stw	ra,20(sp)
    ba48:	df000415 	stw	fp,16(sp)
    ba4c:	df000404 	addi	fp,sp,16
    ba50:	e13ffd15 	stw	r4,-12(fp)
    ba54:	e17ffe15 	stw	r5,-8(fp)
    ba58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ba5c:	e0bffd17 	ldw	r2,-12(fp)
    ba60:	10800017 	ldw	r2,0(r2)
    ba64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ba68:	e0bffc17 	ldw	r2,-16(fp)
    ba6c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    ba70:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ba74:	10800217 	ldw	r2,8(r2)
    ba78:	1809883a 	mov	r4,r3
    ba7c:	e17ffe17 	ldw	r5,-8(fp)
    ba80:	e1bfff17 	ldw	r6,-4(fp)
    ba84:	100f883a 	mov	r7,r2
    ba88:	000c2180 	call	c218 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    ba8c:	e037883a 	mov	sp,fp
    ba90:	dfc00117 	ldw	ra,4(sp)
    ba94:	df000017 	ldw	fp,0(sp)
    ba98:	dec00204 	addi	sp,sp,8
    ba9c:	f800283a 	ret

0000baa0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    baa0:	defffc04 	addi	sp,sp,-16
    baa4:	dfc00315 	stw	ra,12(sp)
    baa8:	df000215 	stw	fp,8(sp)
    baac:	df000204 	addi	fp,sp,8
    bab0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bab4:	e0bfff17 	ldw	r2,-4(fp)
    bab8:	10800017 	ldw	r2,0(r2)
    babc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    bac0:	e0bffe17 	ldw	r2,-8(fp)
    bac4:	10c00a04 	addi	r3,r2,40
    bac8:	e0bfff17 	ldw	r2,-4(fp)
    bacc:	10800217 	ldw	r2,8(r2)
    bad0:	1809883a 	mov	r4,r3
    bad4:	100b883a 	mov	r5,r2
    bad8:	000bea40 	call	bea4 <altera_avalon_jtag_uart_close>
}
    badc:	e037883a 	mov	sp,fp
    bae0:	dfc00117 	ldw	ra,4(sp)
    bae4:	df000017 	ldw	fp,0(sp)
    bae8:	dec00204 	addi	sp,sp,8
    baec:	f800283a 	ret

0000baf0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    baf0:	defffa04 	addi	sp,sp,-24
    baf4:	dfc00515 	stw	ra,20(sp)
    baf8:	df000415 	stw	fp,16(sp)
    bafc:	df000404 	addi	fp,sp,16
    bb00:	e13ffd15 	stw	r4,-12(fp)
    bb04:	e17ffe15 	stw	r5,-8(fp)
    bb08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    bb0c:	e0bffd17 	ldw	r2,-12(fp)
    bb10:	10800017 	ldw	r2,0(r2)
    bb14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    bb18:	e0bffc17 	ldw	r2,-16(fp)
    bb1c:	10800a04 	addi	r2,r2,40
    bb20:	1009883a 	mov	r4,r2
    bb24:	e17ffe17 	ldw	r5,-8(fp)
    bb28:	e1bfff17 	ldw	r6,-4(fp)
    bb2c:	000bf0c0 	call	bf0c <altera_avalon_jtag_uart_ioctl>
}
    bb30:	e037883a 	mov	sp,fp
    bb34:	dfc00117 	ldw	ra,4(sp)
    bb38:	df000017 	ldw	fp,0(sp)
    bb3c:	dec00204 	addi	sp,sp,8
    bb40:	f800283a 	ret

0000bb44 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    bb44:	defffb04 	addi	sp,sp,-20
    bb48:	dfc00415 	stw	ra,16(sp)
    bb4c:	df000315 	stw	fp,12(sp)
    bb50:	df000304 	addi	fp,sp,12
    bb54:	e13ffd15 	stw	r4,-12(fp)
    bb58:	e17ffe15 	stw	r5,-8(fp)
    bb5c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bb60:	e0bffd17 	ldw	r2,-12(fp)
    bb64:	00c00044 	movi	r3,1
    bb68:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    bb6c:	e0bffd17 	ldw	r2,-12(fp)
    bb70:	10800017 	ldw	r2,0(r2)
    bb74:	10800104 	addi	r2,r2,4
    bb78:	e0fffd17 	ldw	r3,-12(fp)
    bb7c:	18c00817 	ldw	r3,32(r3)
    bb80:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    bb84:	e0bfff17 	ldw	r2,-4(fp)
    bb88:	1009883a 	mov	r4,r2
    bb8c:	e17ffd17 	ldw	r5,-12(fp)
    bb90:	01800074 	movhi	r6,1
    bb94:	31aefe04 	addi	r6,r6,-17416
    bb98:	000cdd80 	call	cdd8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    bb9c:	e0bffd17 	ldw	r2,-12(fp)
    bba0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    bba4:	e0bffd17 	ldw	r2,-12(fp)
    bba8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    bbac:	00800074 	movhi	r2,1
    bbb0:	10860e04 	addi	r2,r2,6200
    bbb4:	10800017 	ldw	r2,0(r2)
    bbb8:	1809883a 	mov	r4,r3
    bbbc:	100b883a 	mov	r5,r2
    bbc0:	01800074 	movhi	r6,1
    bbc4:	31af8004 	addi	r6,r6,-16896
    bbc8:	e1fffd17 	ldw	r7,-12(fp)
    bbcc:	000c8d00 	call	c8d0 <alt_alarm_start>
    bbd0:	1000040e 	bge	r2,zero,bbe4 <altera_avalon_jtag_uart_init+0xa0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    bbd4:	e0bffd17 	ldw	r2,-12(fp)
    bbd8:	00e00034 	movhi	r3,32768
    bbdc:	18ffffc4 	addi	r3,r3,-1
    bbe0:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    bbe4:	e037883a 	mov	sp,fp
    bbe8:	dfc00117 	ldw	ra,4(sp)
    bbec:	df000017 	ldw	fp,0(sp)
    bbf0:	dec00204 	addi	sp,sp,8
    bbf4:	f800283a 	ret

0000bbf8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    bbf8:	defff704 	addi	sp,sp,-36
    bbfc:	df000815 	stw	fp,32(sp)
    bc00:	df000804 	addi	fp,sp,32
    bc04:	e13ffe15 	stw	r4,-8(fp)
    bc08:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    bc0c:	e0bffe17 	ldw	r2,-8(fp)
    bc10:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
    bc14:	e0bffa17 	ldw	r2,-24(fp)
    bc18:	10800017 	ldw	r2,0(r2)
    bc1c:	e0bffb15 	stw	r2,-20(fp)
    bc20:	00000106 	br	bc28 <altera_avalon_jtag_uart_irq+0x30>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
    bc24:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    bc28:	e0bffb17 	ldw	r2,-20(fp)
    bc2c:	10800104 	addi	r2,r2,4
    bc30:	10800037 	ldwio	r2,0(r2)
    bc34:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    bc38:	e0bffc17 	ldw	r2,-16(fp)
    bc3c:	1080c00c 	andi	r2,r2,768
    bc40:	10006a26 	beq	r2,zero,bdec <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    bc44:	e0bffc17 	ldw	r2,-16(fp)
    bc48:	1080400c 	andi	r2,r2,256
    bc4c:	10003326 	beq	r2,zero,bd1c <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    bc50:	00800074 	movhi	r2,1
    bc54:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bc58:	e0bffa17 	ldw	r2,-24(fp)
    bc5c:	10800a17 	ldw	r2,40(r2)
    bc60:	10800044 	addi	r2,r2,1
    bc64:	1081ffcc 	andi	r2,r2,2047
    bc68:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
    bc6c:	e0bffa17 	ldw	r2,-24(fp)
    bc70:	10c00b17 	ldw	r3,44(r2)
    bc74:	e0bffd17 	ldw	r2,-12(fp)
    bc78:	18801426 	beq	r3,r2,bccc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    bc7c:	e0bffb17 	ldw	r2,-20(fp)
    bc80:	10800037 	ldwio	r2,0(r2)
    bc84:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    bc88:	e0bff817 	ldw	r2,-32(fp)
    bc8c:	10a0000c 	andi	r2,r2,32768
    bc90:	10001026 	beq	r2,zero,bcd4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    bc94:	e0bffa17 	ldw	r2,-24(fp)
    bc98:	10800a17 	ldw	r2,40(r2)
    bc9c:	e0fff817 	ldw	r3,-32(fp)
    bca0:	e13ffa17 	ldw	r4,-24(fp)
    bca4:	2085883a 	add	r2,r4,r2
    bca8:	10800e04 	addi	r2,r2,56
    bcac:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bcb0:	e0bffa17 	ldw	r2,-24(fp)
    bcb4:	10800a17 	ldw	r2,40(r2)
    bcb8:	10800044 	addi	r2,r2,1
    bcbc:	10c1ffcc 	andi	r3,r2,2047
    bcc0:	e0bffa17 	ldw	r2,-24(fp)
    bcc4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    bcc8:	003fe306 	br	bc58 <altera_avalon_jtag_uart_irq+0x60>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    bccc:	0001883a 	nop
    bcd0:	00000106 	br	bcd8 <altera_avalon_jtag_uart_irq+0xe0>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    bcd4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    bcd8:	e0bff817 	ldw	r2,-32(fp)
    bcdc:	10bfffec 	andhi	r2,r2,65535
    bce0:	10000e26 	beq	r2,zero,bd1c <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bce4:	e0bffa17 	ldw	r2,-24(fp)
    bce8:	10c00817 	ldw	r3,32(r2)
    bcec:	00bfff84 	movi	r2,-2
    bcf0:	1886703a 	and	r3,r3,r2
    bcf4:	e0bffa17 	ldw	r2,-24(fp)
    bcf8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    bcfc:	e0bffb17 	ldw	r2,-20(fp)
    bd00:	10800104 	addi	r2,r2,4
    bd04:	e0fffa17 	ldw	r3,-24(fp)
    bd08:	18c00817 	ldw	r3,32(r3)
    bd0c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    bd10:	e0bffb17 	ldw	r2,-20(fp)
    bd14:	10800104 	addi	r2,r2,4
    bd18:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    bd1c:	e0bffc17 	ldw	r2,-16(fp)
    bd20:	1080800c 	andi	r2,r2,512
    bd24:	103fbf26 	beq	r2,zero,bc24 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    bd28:	e0bffc17 	ldw	r2,-16(fp)
    bd2c:	1004d43a 	srli	r2,r2,16
    bd30:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    bd34:	00001406 	br	bd88 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    bd38:	e0bffb17 	ldw	r2,-20(fp)
    bd3c:	e0fffa17 	ldw	r3,-24(fp)
    bd40:	18c00d17 	ldw	r3,52(r3)
    bd44:	e13ffa17 	ldw	r4,-24(fp)
    bd48:	20c7883a 	add	r3,r4,r3
    bd4c:	18c20e04 	addi	r3,r3,2104
    bd50:	18c00003 	ldbu	r3,0(r3)
    bd54:	18c03fcc 	andi	r3,r3,255
    bd58:	18c0201c 	xori	r3,r3,128
    bd5c:	18ffe004 	addi	r3,r3,-128
    bd60:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bd64:	e0bffa17 	ldw	r2,-24(fp)
    bd68:	10800d17 	ldw	r2,52(r2)
    bd6c:	10800044 	addi	r2,r2,1
    bd70:	10c1ffcc 	andi	r3,r2,2047
    bd74:	e0bffa17 	ldw	r2,-24(fp)
    bd78:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    bd7c:	e0bff917 	ldw	r2,-28(fp)
    bd80:	10bfffc4 	addi	r2,r2,-1
    bd84:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    bd88:	e0bff917 	ldw	r2,-28(fp)
    bd8c:	10000526 	beq	r2,zero,bda4 <altera_avalon_jtag_uart_irq+0x1ac>
    bd90:	e0bffa17 	ldw	r2,-24(fp)
    bd94:	10c00d17 	ldw	r3,52(r2)
    bd98:	e0bffa17 	ldw	r2,-24(fp)
    bd9c:	10800c17 	ldw	r2,48(r2)
    bda0:	18bfe51e 	bne	r3,r2,bd38 <altera_avalon_jtag_uart_irq+0x140>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    bda4:	e0bff917 	ldw	r2,-28(fp)
    bda8:	103f9e26 	beq	r2,zero,bc24 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    bdac:	e0bffa17 	ldw	r2,-24(fp)
    bdb0:	10c00817 	ldw	r3,32(r2)
    bdb4:	00bfff44 	movi	r2,-3
    bdb8:	1886703a 	and	r3,r3,r2
    bdbc:	e0bffa17 	ldw	r2,-24(fp)
    bdc0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bdc4:	e0bffa17 	ldw	r2,-24(fp)
    bdc8:	10800017 	ldw	r2,0(r2)
    bdcc:	10800104 	addi	r2,r2,4
    bdd0:	e0fffa17 	ldw	r3,-24(fp)
    bdd4:	18c00817 	ldw	r3,32(r3)
    bdd8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    bddc:	e0bffb17 	ldw	r2,-20(fp)
    bde0:	10800104 	addi	r2,r2,4
    bde4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    bde8:	003f8e06 	br	bc24 <altera_avalon_jtag_uart_irq+0x2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    bdec:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    bdf0:	e037883a 	mov	sp,fp
    bdf4:	df000017 	ldw	fp,0(sp)
    bdf8:	dec00104 	addi	sp,sp,4
    bdfc:	f800283a 	ret

0000be00 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    be00:	defffc04 	addi	sp,sp,-16
    be04:	df000315 	stw	fp,12(sp)
    be08:	df000304 	addi	fp,sp,12
    be0c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    be10:	e0bfff17 	ldw	r2,-4(fp)
    be14:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    be18:	e0bffd17 	ldw	r2,-12(fp)
    be1c:	10800017 	ldw	r2,0(r2)
    be20:	10800104 	addi	r2,r2,4
    be24:	10800037 	ldwio	r2,0(r2)
    be28:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    be2c:	e0bffe17 	ldw	r2,-8(fp)
    be30:	1081000c 	andi	r2,r2,1024
    be34:	10000a26 	beq	r2,zero,be60 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    be38:	e0bffd17 	ldw	r2,-12(fp)
    be3c:	10800017 	ldw	r2,0(r2)
    be40:	10800104 	addi	r2,r2,4
    be44:	e0fffd17 	ldw	r3,-12(fp)
    be48:	18c00817 	ldw	r3,32(r3)
    be4c:	18c10014 	ori	r3,r3,1024
    be50:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    be54:	e0bffd17 	ldw	r2,-12(fp)
    be58:	10000915 	stw	zero,36(r2)
    be5c:	00000a06 	br	be88 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    be60:	e0bffd17 	ldw	r2,-12(fp)
    be64:	10800917 	ldw	r2,36(r2)
    be68:	00e00034 	movhi	r3,32768
    be6c:	18ffff04 	addi	r3,r3,-4
    be70:	18800536 	bltu	r3,r2,be88 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
    be74:	e0bffd17 	ldw	r2,-12(fp)
    be78:	10800917 	ldw	r2,36(r2)
    be7c:	10c00044 	addi	r3,r2,1
    be80:	e0bffd17 	ldw	r2,-12(fp)
    be84:	10c00915 	stw	r3,36(r2)
    be88:	00800074 	movhi	r2,1
    be8c:	10860e04 	addi	r2,r2,6200
    be90:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    be94:	e037883a 	mov	sp,fp
    be98:	df000017 	ldw	fp,0(sp)
    be9c:	dec00104 	addi	sp,sp,4
    bea0:	f800283a 	ret

0000bea4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    bea4:	defffd04 	addi	sp,sp,-12
    bea8:	df000215 	stw	fp,8(sp)
    beac:	df000204 	addi	fp,sp,8
    beb0:	e13ffe15 	stw	r4,-8(fp)
    beb4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    beb8:	00000506 	br	bed0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    bebc:	e0bfff17 	ldw	r2,-4(fp)
    bec0:	1090000c 	andi	r2,r2,16384
    bec4:	10000226 	beq	r2,zero,bed0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    bec8:	00bffd44 	movi	r2,-11
    becc:	00000b06 	br	befc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    bed0:	e0bffe17 	ldw	r2,-8(fp)
    bed4:	10c00d17 	ldw	r3,52(r2)
    bed8:	e0bffe17 	ldw	r2,-8(fp)
    bedc:	10800c17 	ldw	r2,48(r2)
    bee0:	18800526 	beq	r3,r2,bef8 <altera_avalon_jtag_uart_close+0x54>
    bee4:	e0bffe17 	ldw	r2,-8(fp)
    bee8:	10c00917 	ldw	r3,36(r2)
    beec:	e0bffe17 	ldw	r2,-8(fp)
    bef0:	10800117 	ldw	r2,4(r2)
    bef4:	18bff136 	bltu	r3,r2,bebc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    bef8:	0005883a 	mov	r2,zero
}
    befc:	e037883a 	mov	sp,fp
    bf00:	df000017 	ldw	fp,0(sp)
    bf04:	dec00104 	addi	sp,sp,4
    bf08:	f800283a 	ret

0000bf0c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    bf0c:	defffa04 	addi	sp,sp,-24
    bf10:	df000515 	stw	fp,20(sp)
    bf14:	df000504 	addi	fp,sp,20
    bf18:	e13ffd15 	stw	r4,-12(fp)
    bf1c:	e17ffe15 	stw	r5,-8(fp)
    bf20:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    bf24:	00bff9c4 	movi	r2,-25
    bf28:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    bf2c:	e0bffe17 	ldw	r2,-8(fp)
    bf30:	10da8060 	cmpeqi	r3,r2,27137
    bf34:	1800031e 	bne	r3,zero,bf44 <altera_avalon_jtag_uart_ioctl+0x38>
    bf38:	109a80a0 	cmpeqi	r2,r2,27138
    bf3c:	1000181e 	bne	r2,zero,bfa0 <altera_avalon_jtag_uart_ioctl+0x94>
    bf40:	00002606 	br	bfdc <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    bf44:	e0bffd17 	ldw	r2,-12(fp)
    bf48:	10c00117 	ldw	r3,4(r2)
    bf4c:	00a00034 	movhi	r2,32768
    bf50:	10bfffc4 	addi	r2,r2,-1
    bf54:	18802226 	beq	r3,r2,bfe0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
    bf58:	e0bfff17 	ldw	r2,-4(fp)
    bf5c:	10800017 	ldw	r2,0(r2)
    bf60:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    bf64:	e0bffc17 	ldw	r2,-16(fp)
    bf68:	10800090 	cmplti	r2,r2,2
    bf6c:	1000061e 	bne	r2,zero,bf88 <altera_avalon_jtag_uart_ioctl+0x7c>
    bf70:	e0fffc17 	ldw	r3,-16(fp)
    bf74:	00a00034 	movhi	r2,32768
    bf78:	10bfffc4 	addi	r2,r2,-1
    bf7c:	18800226 	beq	r3,r2,bf88 <altera_avalon_jtag_uart_ioctl+0x7c>
    bf80:	e0bffc17 	ldw	r2,-16(fp)
    bf84:	00000206 	br	bf90 <altera_avalon_jtag_uart_ioctl+0x84>
    bf88:	00a00034 	movhi	r2,32768
    bf8c:	10bfff84 	addi	r2,r2,-2
    bf90:	e0fffd17 	ldw	r3,-12(fp)
    bf94:	18800115 	stw	r2,4(r3)
      rc = 0;
    bf98:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    bf9c:	00001006 	br	bfe0 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    bfa0:	e0bffd17 	ldw	r2,-12(fp)
    bfa4:	10c00117 	ldw	r3,4(r2)
    bfa8:	00a00034 	movhi	r2,32768
    bfac:	10bfffc4 	addi	r2,r2,-1
    bfb0:	18800d26 	beq	r3,r2,bfe8 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    bfb4:	e0bffd17 	ldw	r2,-12(fp)
    bfb8:	10c00917 	ldw	r3,36(r2)
    bfbc:	e0bffd17 	ldw	r2,-12(fp)
    bfc0:	10800117 	ldw	r2,4(r2)
    bfc4:	1885803a 	cmpltu	r2,r3,r2
    bfc8:	10c03fcc 	andi	r3,r2,255
    bfcc:	e0bfff17 	ldw	r2,-4(fp)
    bfd0:	10c00015 	stw	r3,0(r2)
      rc = 0;
    bfd4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    bfd8:	00000306 	br	bfe8 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
    bfdc:	00000306 	br	bfec <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    bfe0:	0001883a 	nop
    bfe4:	00000106 	br	bfec <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    bfe8:	0001883a 	nop

  default:
    break;
  }

  return rc;
    bfec:	e0bffb17 	ldw	r2,-20(fp)
}
    bff0:	e037883a 	mov	sp,fp
    bff4:	df000017 	ldw	fp,0(sp)
    bff8:	dec00104 	addi	sp,sp,4
    bffc:	f800283a 	ret

0000c000 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    c000:	defff304 	addi	sp,sp,-52
    c004:	dfc00c15 	stw	ra,48(sp)
    c008:	df000b15 	stw	fp,44(sp)
    c00c:	df000b04 	addi	fp,sp,44
    c010:	e13ffc15 	stw	r4,-16(fp)
    c014:	e17ffd15 	stw	r5,-12(fp)
    c018:	e1bffe15 	stw	r6,-8(fp)
    c01c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    c020:	e0bffd17 	ldw	r2,-12(fp)
    c024:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c028:	00004706 	br	c148 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c02c:	e0bffc17 	ldw	r2,-16(fp)
    c030:	10800a17 	ldw	r2,40(r2)
    c034:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    c038:	e0bffc17 	ldw	r2,-16(fp)
    c03c:	10800b17 	ldw	r2,44(r2)
    c040:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    c044:	e0fff717 	ldw	r3,-36(fp)
    c048:	e0bff817 	ldw	r2,-32(fp)
    c04c:	18800536 	bltu	r3,r2,c064 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    c050:	e0fff717 	ldw	r3,-36(fp)
    c054:	e0bff817 	ldw	r2,-32(fp)
    c058:	1885c83a 	sub	r2,r3,r2
    c05c:	e0bff615 	stw	r2,-40(fp)
    c060:	00000406 	br	c074 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c064:	00c20004 	movi	r3,2048
    c068:	e0bff817 	ldw	r2,-32(fp)
    c06c:	1885c83a 	sub	r2,r3,r2
    c070:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    c074:	e0bff617 	ldw	r2,-40(fp)
    c078:	10001e26 	beq	r2,zero,c0f4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    c07c:	e0fffe17 	ldw	r3,-8(fp)
    c080:	e0bff617 	ldw	r2,-40(fp)
    c084:	1880022e 	bgeu	r3,r2,c090 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    c088:	e0bffe17 	ldw	r2,-8(fp)
    c08c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    c090:	e0bff817 	ldw	r2,-32(fp)
    c094:	10800e04 	addi	r2,r2,56
    c098:	e0fffc17 	ldw	r3,-16(fp)
    c09c:	1885883a 	add	r2,r3,r2
    c0a0:	e13ff517 	ldw	r4,-44(fp)
    c0a4:	100b883a 	mov	r5,r2
    c0a8:	e1bff617 	ldw	r6,-40(fp)
    c0ac:	000689c0 	call	689c <memcpy>
      ptr   += n;
    c0b0:	e0fff517 	ldw	r3,-44(fp)
    c0b4:	e0bff617 	ldw	r2,-40(fp)
    c0b8:	1885883a 	add	r2,r3,r2
    c0bc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    c0c0:	e0fffe17 	ldw	r3,-8(fp)
    c0c4:	e0bff617 	ldw	r2,-40(fp)
    c0c8:	1885c83a 	sub	r2,r3,r2
    c0cc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c0d0:	e0fff817 	ldw	r3,-32(fp)
    c0d4:	e0bff617 	ldw	r2,-40(fp)
    c0d8:	1885883a 	add	r2,r3,r2
    c0dc:	10c1ffcc 	andi	r3,r2,2047
    c0e0:	e0bffc17 	ldw	r2,-16(fp)
    c0e4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    c0e8:	e0bffe17 	ldw	r2,-8(fp)
    c0ec:	00bfcf16 	blt	zero,r2,c02c <altera_avalon_jtag_uart_read+0x2c>
    c0f0:	00000106 	br	c0f8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    c0f4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    c0f8:	e0fff517 	ldw	r3,-44(fp)
    c0fc:	e0bffd17 	ldw	r2,-12(fp)
    c100:	1880141e 	bne	r3,r2,c154 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    c104:	e0bfff17 	ldw	r2,-4(fp)
    c108:	1090000c 	andi	r2,r2,16384
    c10c:	1000131e 	bne	r2,zero,c15c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    c110:	0001883a 	nop
    c114:	e0bffc17 	ldw	r2,-16(fp)
    c118:	10c00a17 	ldw	r3,40(r2)
    c11c:	e0bff717 	ldw	r2,-36(fp)
    c120:	1880051e 	bne	r3,r2,c138 <altera_avalon_jtag_uart_read+0x138>
    c124:	e0bffc17 	ldw	r2,-16(fp)
    c128:	10c00917 	ldw	r3,36(r2)
    c12c:	e0bffc17 	ldw	r2,-16(fp)
    c130:	10800117 	ldw	r2,4(r2)
    c134:	18bff736 	bltu	r3,r2,c114 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    c138:	e0bffc17 	ldw	r2,-16(fp)
    c13c:	10c00a17 	ldw	r3,40(r2)
    c140:	e0bff717 	ldw	r2,-36(fp)
    c144:	18800726 	beq	r3,r2,c164 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c148:	e0bffe17 	ldw	r2,-8(fp)
    c14c:	00bfb716 	blt	zero,r2,c02c <altera_avalon_jtag_uart_read+0x2c>
    c150:	00000506 	br	c168 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    c154:	0001883a 	nop
    c158:	00000306 	br	c168 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    c15c:	0001883a 	nop
    c160:	00000106 	br	c168 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    c164:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    c168:	e0fff517 	ldw	r3,-44(fp)
    c16c:	e0bffd17 	ldw	r2,-12(fp)
    c170:	18801726 	beq	r3,r2,c1d0 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c174:	0005303a 	rdctl	r2,status
    c178:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c17c:	e0fffa17 	ldw	r3,-24(fp)
    c180:	00bfff84 	movi	r2,-2
    c184:	1884703a 	and	r2,r3,r2
    c188:	1001703a 	wrctl	status,r2
  
  return context;
    c18c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    c190:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c194:	e0bffc17 	ldw	r2,-16(fp)
    c198:	10800817 	ldw	r2,32(r2)
    c19c:	10c00054 	ori	r3,r2,1
    c1a0:	e0bffc17 	ldw	r2,-16(fp)
    c1a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c1a8:	e0bffc17 	ldw	r2,-16(fp)
    c1ac:	10800017 	ldw	r2,0(r2)
    c1b0:	10800104 	addi	r2,r2,4
    c1b4:	e0fffc17 	ldw	r3,-16(fp)
    c1b8:	18c00817 	ldw	r3,32(r3)
    c1bc:	10c00035 	stwio	r3,0(r2)
    c1c0:	e0bff917 	ldw	r2,-28(fp)
    c1c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c1c8:	e0bffb17 	ldw	r2,-20(fp)
    c1cc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    c1d0:	e0fff517 	ldw	r3,-44(fp)
    c1d4:	e0bffd17 	ldw	r2,-12(fp)
    c1d8:	18800426 	beq	r3,r2,c1ec <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
    c1dc:	e0fff517 	ldw	r3,-44(fp)
    c1e0:	e0bffd17 	ldw	r2,-12(fp)
    c1e4:	1885c83a 	sub	r2,r3,r2
    c1e8:	00000606 	br	c204 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
    c1ec:	e0bfff17 	ldw	r2,-4(fp)
    c1f0:	1090000c 	andi	r2,r2,16384
    c1f4:	10000226 	beq	r2,zero,c200 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
    c1f8:	00bffd44 	movi	r2,-11
    c1fc:	00000106 	br	c204 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
    c200:	00bffec4 	movi	r2,-5
}
    c204:	e037883a 	mov	sp,fp
    c208:	dfc00117 	ldw	ra,4(sp)
    c20c:	df000017 	ldw	fp,0(sp)
    c210:	dec00204 	addi	sp,sp,8
    c214:	f800283a 	ret

0000c218 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c218:	defff304 	addi	sp,sp,-52
    c21c:	dfc00c15 	stw	ra,48(sp)
    c220:	df000b15 	stw	fp,44(sp)
    c224:	df000b04 	addi	fp,sp,44
    c228:	e13ffc15 	stw	r4,-16(fp)
    c22c:	e17ffd15 	stw	r5,-12(fp)
    c230:	e1bffe15 	stw	r6,-8(fp)
    c234:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    c238:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    c23c:	e0bffd17 	ldw	r2,-12(fp)
    c240:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c244:	00003706 	br	c324 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    c248:	e0bffc17 	ldw	r2,-16(fp)
    c24c:	10800c17 	ldw	r2,48(r2)
    c250:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    c254:	e0bffc17 	ldw	r2,-16(fp)
    c258:	10800d17 	ldw	r2,52(r2)
    c25c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    c260:	e0fff817 	ldw	r3,-32(fp)
    c264:	e0bff517 	ldw	r2,-44(fp)
    c268:	1880062e 	bgeu	r3,r2,c284 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    c26c:	e0fff517 	ldw	r3,-44(fp)
    c270:	e0bff817 	ldw	r2,-32(fp)
    c274:	1885c83a 	sub	r2,r3,r2
    c278:	10bfffc4 	addi	r2,r2,-1
    c27c:	e0bff615 	stw	r2,-40(fp)
    c280:	00000b06 	br	c2b0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    c284:	e0bff517 	ldw	r2,-44(fp)
    c288:	10000526 	beq	r2,zero,c2a0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    c28c:	00c20004 	movi	r3,2048
    c290:	e0bff817 	ldw	r2,-32(fp)
    c294:	1885c83a 	sub	r2,r3,r2
    c298:	e0bff615 	stw	r2,-40(fp)
    c29c:	00000406 	br	c2b0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    c2a0:	00c1ffc4 	movi	r3,2047
    c2a4:	e0bff817 	ldw	r2,-32(fp)
    c2a8:	1885c83a 	sub	r2,r3,r2
    c2ac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    c2b0:	e0bff617 	ldw	r2,-40(fp)
    c2b4:	10001e26 	beq	r2,zero,c330 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    c2b8:	e0fffe17 	ldw	r3,-8(fp)
    c2bc:	e0bff617 	ldw	r2,-40(fp)
    c2c0:	1880022e 	bgeu	r3,r2,c2cc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    c2c4:	e0bffe17 	ldw	r2,-8(fp)
    c2c8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    c2cc:	e0bff817 	ldw	r2,-32(fp)
    c2d0:	10820e04 	addi	r2,r2,2104
    c2d4:	e0fffc17 	ldw	r3,-16(fp)
    c2d8:	1885883a 	add	r2,r3,r2
    c2dc:	1009883a 	mov	r4,r2
    c2e0:	e17ffd17 	ldw	r5,-12(fp)
    c2e4:	e1bff617 	ldw	r6,-40(fp)
    c2e8:	000689c0 	call	689c <memcpy>
      ptr   += n;
    c2ec:	e0fffd17 	ldw	r3,-12(fp)
    c2f0:	e0bff617 	ldw	r2,-40(fp)
    c2f4:	1885883a 	add	r2,r3,r2
    c2f8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    c2fc:	e0fffe17 	ldw	r3,-8(fp)
    c300:	e0bff617 	ldw	r2,-40(fp)
    c304:	1885c83a 	sub	r2,r3,r2
    c308:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c30c:	e0fff817 	ldw	r3,-32(fp)
    c310:	e0bff617 	ldw	r2,-40(fp)
    c314:	1885883a 	add	r2,r3,r2
    c318:	10c1ffcc 	andi	r3,r2,2047
    c31c:	e0bffc17 	ldw	r2,-16(fp)
    c320:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c324:	e0bffe17 	ldw	r2,-8(fp)
    c328:	00bfc716 	blt	zero,r2,c248 <altera_avalon_jtag_uart_write+0x30>
    c32c:	00000106 	br	c334 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    c330:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c334:	0005303a 	rdctl	r2,status
    c338:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c33c:	e0fffa17 	ldw	r3,-24(fp)
    c340:	00bfff84 	movi	r2,-2
    c344:	1884703a 	and	r2,r3,r2
    c348:	1001703a 	wrctl	status,r2
  
  return context;
    c34c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    c350:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c354:	e0bffc17 	ldw	r2,-16(fp)
    c358:	10800817 	ldw	r2,32(r2)
    c35c:	10c00094 	ori	r3,r2,2
    c360:	e0bffc17 	ldw	r2,-16(fp)
    c364:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c368:	e0bffc17 	ldw	r2,-16(fp)
    c36c:	10800017 	ldw	r2,0(r2)
    c370:	10800104 	addi	r2,r2,4
    c374:	e0fffc17 	ldw	r3,-16(fp)
    c378:	18c00817 	ldw	r3,32(r3)
    c37c:	10c00035 	stwio	r3,0(r2)
    c380:	e0bff917 	ldw	r2,-28(fp)
    c384:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c388:	e0bffb17 	ldw	r2,-20(fp)
    c38c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    c390:	e0bffe17 	ldw	r2,-8(fp)
    c394:	0080110e 	bge	zero,r2,c3dc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    c398:	e0bfff17 	ldw	r2,-4(fp)
    c39c:	1090000c 	andi	r2,r2,16384
    c3a0:	1000111e 	bne	r2,zero,c3e8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    c3a4:	0001883a 	nop
    c3a8:	e0bffc17 	ldw	r2,-16(fp)
    c3ac:	10c00d17 	ldw	r3,52(r2)
    c3b0:	e0bff517 	ldw	r2,-44(fp)
    c3b4:	1880051e 	bne	r3,r2,c3cc <altera_avalon_jtag_uart_write+0x1b4>
    c3b8:	e0bffc17 	ldw	r2,-16(fp)
    c3bc:	10c00917 	ldw	r3,36(r2)
    c3c0:	e0bffc17 	ldw	r2,-16(fp)
    c3c4:	10800117 	ldw	r2,4(r2)
    c3c8:	18bff736 	bltu	r3,r2,c3a8 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    c3cc:	e0bffc17 	ldw	r2,-16(fp)
    c3d0:	10c00d17 	ldw	r3,52(r2)
    c3d4:	e0bff517 	ldw	r2,-44(fp)
    c3d8:	18800526 	beq	r3,r2,c3f0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    c3dc:	e0bffe17 	ldw	r2,-8(fp)
    c3e0:	00bfd016 	blt	zero,r2,c324 <altera_avalon_jtag_uart_write+0x10c>
    c3e4:	00000306 	br	c3f4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    c3e8:	0001883a 	nop
    c3ec:	00000106 	br	c3f4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
    c3f0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    c3f4:	e0fffd17 	ldw	r3,-12(fp)
    c3f8:	e0bff717 	ldw	r2,-36(fp)
    c3fc:	18800426 	beq	r3,r2,c410 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    c400:	e0fffd17 	ldw	r3,-12(fp)
    c404:	e0bff717 	ldw	r2,-36(fp)
    c408:	1885c83a 	sub	r2,r3,r2
    c40c:	00000606 	br	c428 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    c410:	e0bfff17 	ldw	r2,-4(fp)
    c414:	1090000c 	andi	r2,r2,16384
    c418:	10000226 	beq	r2,zero,c424 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    c41c:	00bffd44 	movi	r2,-11
    c420:	00000106 	br	c428 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    c424:	00bffec4 	movi	r2,-5
}
    c428:	e037883a 	mov	sp,fp
    c42c:	dfc00117 	ldw	ra,4(sp)
    c430:	df000017 	ldw	fp,0(sp)
    c434:	dec00204 	addi	sp,sp,8
    c438:	f800283a 	ret

0000c43c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    c43c:	defff904 	addi	sp,sp,-28
    c440:	dfc00615 	stw	ra,24(sp)
    c444:	df000515 	stw	fp,20(sp)
    c448:	df000504 	addi	fp,sp,20
    c44c:	e13ffe15 	stw	r4,-8(fp)
    c450:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    c454:	0007883a 	mov	r3,zero
    c458:	e0bffe17 	ldw	r2,-8(fp)
    c45c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    c460:	e0bffe17 	ldw	r2,-8(fp)
    c464:	10800104 	addi	r2,r2,4
    c468:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c46c:	0005303a 	rdctl	r2,status
    c470:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c474:	e0fffc17 	ldw	r3,-16(fp)
    c478:	00bfff84 	movi	r2,-2
    c47c:	1884703a 	and	r2,r3,r2
    c480:	1001703a 	wrctl	status,r2
  
  return context;
    c484:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    c488:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    c48c:	000d2b80 	call	d2b8 <alt_tick>
    c490:	e0bffb17 	ldw	r2,-20(fp)
    c494:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c498:	e0bffd17 	ldw	r2,-12(fp)
    c49c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    c4a0:	e037883a 	mov	sp,fp
    c4a4:	dfc00117 	ldw	ra,4(sp)
    c4a8:	df000017 	ldw	fp,0(sp)
    c4ac:	dec00204 	addi	sp,sp,8
    c4b0:	f800283a 	ret

0000c4b4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    c4b4:	defff904 	addi	sp,sp,-28
    c4b8:	dfc00615 	stw	ra,24(sp)
    c4bc:	df000515 	stw	fp,20(sp)
    c4c0:	df000504 	addi	fp,sp,20
    c4c4:	e13ffc15 	stw	r4,-16(fp)
    c4c8:	e17ffd15 	stw	r5,-12(fp)
    c4cc:	e1bffe15 	stw	r6,-8(fp)
    c4d0:	e1ffff15 	stw	r7,-4(fp)
    c4d4:	e0bfff17 	ldw	r2,-4(fp)
    c4d8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    c4dc:	00800074 	movhi	r2,1
    c4e0:	10860e04 	addi	r2,r2,6200
    c4e4:	10800017 	ldw	r2,0(r2)
    c4e8:	1000041e 	bne	r2,zero,c4fc <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    c4ec:	00800074 	movhi	r2,1
    c4f0:	10860e04 	addi	r2,r2,6200
    c4f4:	e0fffb17 	ldw	r3,-20(fp)
    c4f8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    c4fc:	e0bffc17 	ldw	r2,-16(fp)
    c500:	10800104 	addi	r2,r2,4
    c504:	00c001c4 	movi	r3,7
    c508:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    c50c:	e13ffe17 	ldw	r4,-8(fp)
    c510:	e17ffc17 	ldw	r5,-16(fp)
    c514:	01800074 	movhi	r6,1
    c518:	31b10f04 	addi	r6,r6,-15300
    c51c:	000cdd80 	call	cdd8 <alt_irq_register>
#endif  
}
    c520:	e037883a 	mov	sp,fp
    c524:	dfc00117 	ldw	ra,4(sp)
    c528:	df000017 	ldw	fp,0(sp)
    c52c:	dec00204 	addi	sp,sp,8
    c530:	f800283a 	ret

0000c534 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    c534:	defffd04 	addi	sp,sp,-12
    c538:	df000215 	stw	fp,8(sp)
    c53c:	df000204 	addi	fp,sp,8
    c540:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    c544:	e0bfff17 	ldw	r2,-4(fp)
    c548:	10800a17 	ldw	r2,40(r2)
    c54c:	10800104 	addi	r2,r2,4
    c550:	10800037 	ldwio	r2,0(r2)
    c554:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    c558:	e0bffe17 	ldw	r2,-8(fp)
    c55c:	10800054 	ori	r2,r2,1
    c560:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    c564:	e0bfff17 	ldw	r2,-4(fp)
    c568:	10800a17 	ldw	r2,40(r2)
    c56c:	10800104 	addi	r2,r2,4
    c570:	e0fffe17 	ldw	r3,-8(fp)
    c574:	10c00035 	stwio	r3,0(r2)
}
    c578:	e037883a 	mov	sp,fp
    c57c:	df000017 	ldw	fp,0(sp)
    c580:	dec00104 	addi	sp,sp,4
    c584:	f800283a 	ret

0000c588 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    c588:	defffd04 	addi	sp,sp,-12
    c58c:	df000215 	stw	fp,8(sp)
    c590:	df000204 	addi	fp,sp,8
    c594:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    c598:	e0bfff17 	ldw	r2,-4(fp)
    c59c:	10800a17 	ldw	r2,40(r2)
    c5a0:	10800104 	addi	r2,r2,4
    c5a4:	10800037 	ldwio	r2,0(r2)
    c5a8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    c5ac:	e0fffe17 	ldw	r3,-8(fp)
    c5b0:	00bfff84 	movi	r2,-2
    c5b4:	1884703a 	and	r2,r3,r2
    c5b8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    c5bc:	e0bfff17 	ldw	r2,-4(fp)
    c5c0:	10800a17 	ldw	r2,40(r2)
    c5c4:	10800104 	addi	r2,r2,4
    c5c8:	e0fffe17 	ldw	r3,-8(fp)
    c5cc:	10c00035 	stwio	r3,0(r2)
}
    c5d0:	e037883a 	mov	sp,fp
    c5d4:	df000017 	ldw	fp,0(sp)
    c5d8:	dec00104 	addi	sp,sp,4
    c5dc:	f800283a 	ret

0000c5e0 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    c5e0:	defffd04 	addi	sp,sp,-12
    c5e4:	df000215 	stw	fp,8(sp)
    c5e8:	df000204 	addi	fp,sp,8
    c5ec:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    c5f0:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    c5f4:	e0bfff17 	ldw	r2,-4(fp)
    c5f8:	10800a17 	ldw	r2,40(r2)
    c5fc:	10800084 	addi	r2,r2,2
    c600:	1080002b 	ldhuio	r2,0(r2)
    c604:	10bfffcc 	andi	r2,r2,65535
    c608:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    c60c:	e0bffe0b 	ldhu	r2,-8(fp)
}
    c610:	e037883a 	mov	sp,fp
    c614:	df000017 	ldw	fp,0(sp)
    c618:	dec00104 	addi	sp,sp,4
    c61c:	f800283a 	ret

0000c620 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    c620:	defffd04 	addi	sp,sp,-12
    c624:	df000215 	stw	fp,8(sp)
    c628:	df000204 	addi	fp,sp,8
    c62c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    c630:	e0bfff17 	ldw	r2,-4(fp)
    c634:	10800a17 	ldw	r2,40(r2)
    c638:	10800104 	addi	r2,r2,4
    c63c:	10800037 	ldwio	r2,0(r2)
    c640:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    c644:	e0bffe17 	ldw	r2,-8(fp)
    c648:	1004d43a 	srli	r2,r2,16
}
    c64c:	e037883a 	mov	sp,fp
    c650:	df000017 	ldw	fp,0(sp)
    c654:	dec00104 	addi	sp,sp,4
    c658:	f800283a 	ret

0000c65c <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    c65c:	defffd04 	addi	sp,sp,-12
    c660:	df000215 	stw	fp,8(sp)
    c664:	df000204 	addi	fp,sp,8
    c668:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    c66c:	e0bfff17 	ldw	r2,-4(fp)
    c670:	1080800c 	andi	r2,r2,512
    c674:	1004d27a 	srli	r2,r2,9
    c678:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    c67c:	e0bffe17 	ldw	r2,-8(fp)
    c680:	10000226 	beq	r2,zero,c68c <alt_up_rs232_check_parity+0x30>
    c684:	00bfffc4 	movi	r2,-1
    c688:	00000106 	br	c690 <alt_up_rs232_check_parity+0x34>
    c68c:	0005883a 	mov	r2,zero
}
    c690:	e037883a 	mov	sp,fp
    c694:	df000017 	ldw	fp,0(sp)
    c698:	dec00104 	addi	sp,sp,4
    c69c:	f800283a 	ret

0000c6a0 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    c6a0:	defffd04 	addi	sp,sp,-12
    c6a4:	df000215 	stw	fp,8(sp)
    c6a8:	df000204 	addi	fp,sp,8
    c6ac:	e13ffe15 	stw	r4,-8(fp)
    c6b0:	2805883a 	mov	r2,r5
    c6b4:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    c6b8:	e0bffe17 	ldw	r2,-8(fp)
    c6bc:	10800a17 	ldw	r2,40(r2)
    c6c0:	e0ffff03 	ldbu	r3,-4(fp)
    c6c4:	10c00035 	stwio	r3,0(r2)
	return 0;
    c6c8:	0005883a 	mov	r2,zero
}
    c6cc:	e037883a 	mov	sp,fp
    c6d0:	df000017 	ldw	fp,0(sp)
    c6d4:	dec00104 	addi	sp,sp,4
    c6d8:	f800283a 	ret

0000c6dc <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    c6dc:	defffa04 	addi	sp,sp,-24
    c6e0:	dfc00515 	stw	ra,20(sp)
    c6e4:	df000415 	stw	fp,16(sp)
    c6e8:	df000404 	addi	fp,sp,16
    c6ec:	e13ffd15 	stw	r4,-12(fp)
    c6f0:	e17ffe15 	stw	r5,-8(fp)
    c6f4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    c6f8:	e0bffd17 	ldw	r2,-12(fp)
    c6fc:	10800a17 	ldw	r2,40(r2)
    c700:	10800037 	ldwio	r2,0(r2)
    c704:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    c708:	e0bffc17 	ldw	r2,-16(fp)
    c70c:	1007883a 	mov	r3,r2
    c710:	e0bffe17 	ldw	r2,-8(fp)
    c714:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    c718:	e13ffc17 	ldw	r4,-16(fp)
    c71c:	000c65c0 	call	c65c <alt_up_rs232_check_parity>
    c720:	1007883a 	mov	r3,r2
    c724:	e0bfff17 	ldw	r2,-4(fp)
    c728:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    c72c:	e0bffc17 	ldw	r2,-16(fp)
    c730:	10a0000c 	andi	r2,r2,32768
    c734:	1004d3fa 	srli	r2,r2,15
    c738:	10bfffc4 	addi	r2,r2,-1
}
    c73c:	e037883a 	mov	sp,fp
    c740:	dfc00117 	ldw	ra,4(sp)
    c744:	df000017 	ldw	fp,0(sp)
    c748:	dec00204 	addi	sp,sp,8
    c74c:	f800283a 	ret

0000c750 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    c750:	defff804 	addi	sp,sp,-32
    c754:	dfc00715 	stw	ra,28(sp)
    c758:	df000615 	stw	fp,24(sp)
    c75c:	df000604 	addi	fp,sp,24
    c760:	e13ffd15 	stw	r4,-12(fp)
    c764:	e17ffe15 	stw	r5,-8(fp)
    c768:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    c76c:	e0bffd17 	ldw	r2,-12(fp)
    c770:	10800017 	ldw	r2,0(r2)
    c774:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    c778:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    c77c:	00000d06 	br	c7b4 <alt_up_rs232_read_fd+0x64>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    c780:	e0fffe17 	ldw	r3,-8(fp)
    c784:	e0bffe17 	ldw	r2,-8(fp)
    c788:	10800044 	addi	r2,r2,1
    c78c:	e0bffe15 	stw	r2,-8(fp)
    c790:	e0bffc04 	addi	r2,fp,-16
    c794:	e13ffb17 	ldw	r4,-20(fp)
    c798:	180b883a 	mov	r5,r3
    c79c:	100d883a 	mov	r6,r2
    c7a0:	000c6dc0 	call	c6dc <alt_up_rs232_read_data>
    c7a4:	10000b1e 	bne	r2,zero,c7d4 <alt_up_rs232_read_fd+0x84>
			count++;
    c7a8:	e0bffa17 	ldw	r2,-24(fp)
    c7ac:	10800044 	addi	r2,r2,1
    c7b0:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    c7b4:	e0bfff17 	ldw	r2,-4(fp)
    c7b8:	1004c03a 	cmpne	r2,r2,zero
    c7bc:	e0ffff17 	ldw	r3,-4(fp)
    c7c0:	18ffffc4 	addi	r3,r3,-1
    c7c4:	e0ffff15 	stw	r3,-4(fp)
    c7c8:	10803fcc 	andi	r2,r2,255
    c7cc:	103fec1e 	bne	r2,zero,c780 <alt_up_rs232_read_fd+0x30>
    c7d0:	00000106 	br	c7d8 <alt_up_rs232_read_fd+0x88>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    c7d4:	0001883a 	nop
	}
	return count;
    c7d8:	e0bffa17 	ldw	r2,-24(fp)
}
    c7dc:	e037883a 	mov	sp,fp
    c7e0:	dfc00117 	ldw	ra,4(sp)
    c7e4:	df000017 	ldw	fp,0(sp)
    c7e8:	dec00204 	addi	sp,sp,8
    c7ec:	f800283a 	ret

0000c7f0 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    c7f0:	defff904 	addi	sp,sp,-28
    c7f4:	dfc00615 	stw	ra,24(sp)
    c7f8:	df000515 	stw	fp,20(sp)
    c7fc:	df000504 	addi	fp,sp,20
    c800:	e13ffd15 	stw	r4,-12(fp)
    c804:	e17ffe15 	stw	r5,-8(fp)
    c808:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    c80c:	e0bffd17 	ldw	r2,-12(fp)
    c810:	10800017 	ldw	r2,0(r2)
    c814:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    c818:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    c81c:	00000d06 	br	c854 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    c820:	e0bffe17 	ldw	r2,-8(fp)
    c824:	10800003 	ldbu	r2,0(r2)
    c828:	10803fcc 	andi	r2,r2,255
    c82c:	e13ffc17 	ldw	r4,-16(fp)
    c830:	100b883a 	mov	r5,r2
    c834:	000c6a00 	call	c6a0 <alt_up_rs232_write_data>
    c838:	10000e1e 	bne	r2,zero,c874 <alt_up_rs232_write_fd+0x84>
		{
			count++;
    c83c:	e0bffb17 	ldw	r2,-20(fp)
    c840:	10800044 	addi	r2,r2,1
    c844:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    c848:	e0bffe17 	ldw	r2,-8(fp)
    c84c:	10800044 	addi	r2,r2,1
    c850:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    c854:	e0bfff17 	ldw	r2,-4(fp)
    c858:	1004c03a 	cmpne	r2,r2,zero
    c85c:	e0ffff17 	ldw	r3,-4(fp)
    c860:	18ffffc4 	addi	r3,r3,-1
    c864:	e0ffff15 	stw	r3,-4(fp)
    c868:	10803fcc 	andi	r2,r2,255
    c86c:	103fec1e 	bne	r2,zero,c820 <alt_up_rs232_write_fd+0x30>
    c870:	00000106 	br	c878 <alt_up_rs232_write_fd+0x88>
		{
			count++;
			ptr++;
		}
		else
			break;
    c874:	0001883a 	nop
	}
	return count;
    c878:	e0bffb17 	ldw	r2,-20(fp)
}
    c87c:	e037883a 	mov	sp,fp
    c880:	dfc00117 	ldw	ra,4(sp)
    c884:	df000017 	ldw	fp,0(sp)
    c888:	dec00204 	addi	sp,sp,8
    c88c:	f800283a 	ret

0000c890 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    c890:	defffc04 	addi	sp,sp,-16
    c894:	dfc00315 	stw	ra,12(sp)
    c898:	df000215 	stw	fp,8(sp)
    c89c:	df000204 	addi	fp,sp,8
    c8a0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    c8a4:	e13fff17 	ldw	r4,-4(fp)
    c8a8:	01400074 	movhi	r5,1
    c8ac:	297ebb04 	addi	r5,r5,-1300
    c8b0:	000cbd40 	call	cbd4 <alt_find_dev>
    c8b4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    c8b8:	e0bffe17 	ldw	r2,-8(fp)
}
    c8bc:	e037883a 	mov	sp,fp
    c8c0:	dfc00117 	ldw	ra,4(sp)
    c8c4:	df000017 	ldw	fp,0(sp)
    c8c8:	dec00204 	addi	sp,sp,8
    c8cc:	f800283a 	ret

0000c8d0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    c8d0:	defff504 	addi	sp,sp,-44
    c8d4:	df000a15 	stw	fp,40(sp)
    c8d8:	df000a04 	addi	fp,sp,40
    c8dc:	e13ffc15 	stw	r4,-16(fp)
    c8e0:	e17ffd15 	stw	r5,-12(fp)
    c8e4:	e1bffe15 	stw	r6,-8(fp)
    c8e8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    c8ec:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c8f0:	00800074 	movhi	r2,1
    c8f4:	10860e04 	addi	r2,r2,6200
    c8f8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    c8fc:	10003f26 	beq	r2,zero,c9fc <alt_alarm_start+0x12c>
  {
    if (alarm)
    c900:	e0bffc17 	ldw	r2,-16(fp)
    c904:	10003b26 	beq	r2,zero,c9f4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    c908:	e0bffc17 	ldw	r2,-16(fp)
    c90c:	e0fffe17 	ldw	r3,-8(fp)
    c910:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    c914:	e0bffc17 	ldw	r2,-16(fp)
    c918:	e0ffff17 	ldw	r3,-4(fp)
    c91c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c920:	0005303a 	rdctl	r2,status
    c924:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c928:	e0fff817 	ldw	r3,-32(fp)
    c92c:	00bfff84 	movi	r2,-2
    c930:	1884703a 	and	r2,r3,r2
    c934:	1001703a 	wrctl	status,r2
  
  return context;
    c938:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    c93c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    c940:	00800074 	movhi	r2,1
    c944:	10860f04 	addi	r2,r2,6204
    c948:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    c94c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    c950:	e0fffd17 	ldw	r3,-12(fp)
    c954:	e0bff617 	ldw	r2,-40(fp)
    c958:	1885883a 	add	r2,r3,r2
    c95c:	10c00044 	addi	r3,r2,1
    c960:	e0bffc17 	ldw	r2,-16(fp)
    c964:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    c968:	e0bffc17 	ldw	r2,-16(fp)
    c96c:	10c00217 	ldw	r3,8(r2)
    c970:	e0bff617 	ldw	r2,-40(fp)
    c974:	1880042e 	bgeu	r3,r2,c988 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    c978:	e0bffc17 	ldw	r2,-16(fp)
    c97c:	00c00044 	movi	r3,1
    c980:	10c00405 	stb	r3,16(r2)
    c984:	00000206 	br	c990 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    c988:	e0bffc17 	ldw	r2,-16(fp)
    c98c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    c990:	e0bffc17 	ldw	r2,-16(fp)
    c994:	00c00074 	movhi	r3,1
    c998:	18fec104 	addi	r3,r3,-1276
    c99c:	e0fff915 	stw	r3,-28(fp)
    c9a0:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c9a4:	e0bffa17 	ldw	r2,-24(fp)
    c9a8:	e0fff917 	ldw	r3,-28(fp)
    c9ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    c9b0:	e0bff917 	ldw	r2,-28(fp)
    c9b4:	10c00017 	ldw	r3,0(r2)
    c9b8:	e0bffa17 	ldw	r2,-24(fp)
    c9bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c9c0:	e0bff917 	ldw	r2,-28(fp)
    c9c4:	10800017 	ldw	r2,0(r2)
    c9c8:	e0fffa17 	ldw	r3,-24(fp)
    c9cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    c9d0:	e0bff917 	ldw	r2,-28(fp)
    c9d4:	e0fffa17 	ldw	r3,-24(fp)
    c9d8:	10c00015 	stw	r3,0(r2)
    c9dc:	e0bff717 	ldw	r2,-36(fp)
    c9e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c9e4:	e0bffb17 	ldw	r2,-20(fp)
    c9e8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    c9ec:	0005883a 	mov	r2,zero
    c9f0:	00000306 	br	ca00 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    c9f4:	00bffa84 	movi	r2,-22
    c9f8:	00000106 	br	ca00 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    c9fc:	00bfde84 	movi	r2,-134
  }
}
    ca00:	e037883a 	mov	sp,fp
    ca04:	df000017 	ldw	fp,0(sp)
    ca08:	dec00104 	addi	sp,sp,4
    ca0c:	f800283a 	ret

0000ca10 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    ca10:	deffff04 	addi	sp,sp,-4
    ca14:	df000015 	stw	fp,0(sp)
    ca18:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    ca1c:	e037883a 	mov	sp,fp
    ca20:	df000017 	ldw	fp,0(sp)
    ca24:	dec00104 	addi	sp,sp,4
    ca28:	f800283a 	ret

0000ca2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ca2c:	defffe04 	addi	sp,sp,-8
    ca30:	dfc00115 	stw	ra,4(sp)
    ca34:	df000015 	stw	fp,0(sp)
    ca38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ca3c:	00800074 	movhi	r2,1
    ca40:	10bebe04 	addi	r2,r2,-1288
    ca44:	10800017 	ldw	r2,0(r2)
    ca48:	10000526 	beq	r2,zero,ca60 <alt_get_errno+0x34>
    ca4c:	00800074 	movhi	r2,1
    ca50:	10bebe04 	addi	r2,r2,-1288
    ca54:	10800017 	ldw	r2,0(r2)
    ca58:	103ee83a 	callr	r2
    ca5c:	00000206 	br	ca68 <alt_get_errno+0x3c>
    ca60:	00800074 	movhi	r2,1
    ca64:	10860904 	addi	r2,r2,6180
}
    ca68:	e037883a 	mov	sp,fp
    ca6c:	dfc00117 	ldw	ra,4(sp)
    ca70:	df000017 	ldw	fp,0(sp)
    ca74:	dec00204 	addi	sp,sp,8
    ca78:	f800283a 	ret

0000ca7c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    ca7c:	defffa04 	addi	sp,sp,-24
    ca80:	dfc00515 	stw	ra,20(sp)
    ca84:	df000415 	stw	fp,16(sp)
    ca88:	df000404 	addi	fp,sp,16
    ca8c:	e13ffe15 	stw	r4,-8(fp)
    ca90:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    ca94:	e0bffe17 	ldw	r2,-8(fp)
    ca98:	10000326 	beq	r2,zero,caa8 <alt_dev_llist_insert+0x2c>
    ca9c:	e0bffe17 	ldw	r2,-8(fp)
    caa0:	10800217 	ldw	r2,8(r2)
    caa4:	1000051e 	bne	r2,zero,cabc <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    caa8:	000ca2c0 	call	ca2c <alt_get_errno>
    caac:	00c00584 	movi	r3,22
    cab0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    cab4:	00bffa84 	movi	r2,-22
    cab8:	00001306 	br	cb08 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    cabc:	e0bffe17 	ldw	r2,-8(fp)
    cac0:	e0ffff17 	ldw	r3,-4(fp)
    cac4:	e0fffc15 	stw	r3,-16(fp)
    cac8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    cacc:	e0bffd17 	ldw	r2,-12(fp)
    cad0:	e0fffc17 	ldw	r3,-16(fp)
    cad4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    cad8:	e0bffc17 	ldw	r2,-16(fp)
    cadc:	10c00017 	ldw	r3,0(r2)
    cae0:	e0bffd17 	ldw	r2,-12(fp)
    cae4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    cae8:	e0bffc17 	ldw	r2,-16(fp)
    caec:	10800017 	ldw	r2,0(r2)
    caf0:	e0fffd17 	ldw	r3,-12(fp)
    caf4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    caf8:	e0bffc17 	ldw	r2,-16(fp)
    cafc:	e0fffd17 	ldw	r3,-12(fp)
    cb00:	10c00015 	stw	r3,0(r2)

  return 0;  
    cb04:	0005883a 	mov	r2,zero
}
    cb08:	e037883a 	mov	sp,fp
    cb0c:	dfc00117 	ldw	ra,4(sp)
    cb10:	df000017 	ldw	fp,0(sp)
    cb14:	dec00204 	addi	sp,sp,8
    cb18:	f800283a 	ret

0000cb1c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    cb1c:	defffd04 	addi	sp,sp,-12
    cb20:	dfc00215 	stw	ra,8(sp)
    cb24:	df000115 	stw	fp,4(sp)
    cb28:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    cb2c:	00800074 	movhi	r2,1
    cb30:	10b66504 	addi	r2,r2,-9836
    cb34:	e0bfff15 	stw	r2,-4(fp)
    cb38:	00000606 	br	cb54 <_do_ctors+0x38>
        (*ctor) (); 
    cb3c:	e0bfff17 	ldw	r2,-4(fp)
    cb40:	10800017 	ldw	r2,0(r2)
    cb44:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    cb48:	e0bfff17 	ldw	r2,-4(fp)
    cb4c:	10bfff04 	addi	r2,r2,-4
    cb50:	e0bfff15 	stw	r2,-4(fp)
    cb54:	e0ffff17 	ldw	r3,-4(fp)
    cb58:	00800074 	movhi	r2,1
    cb5c:	10b66604 	addi	r2,r2,-9832
    cb60:	18bff62e 	bgeu	r3,r2,cb3c <_do_ctors+0x20>
        (*ctor) (); 
}
    cb64:	e037883a 	mov	sp,fp
    cb68:	dfc00117 	ldw	ra,4(sp)
    cb6c:	df000017 	ldw	fp,0(sp)
    cb70:	dec00204 	addi	sp,sp,8
    cb74:	f800283a 	ret

0000cb78 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    cb78:	defffd04 	addi	sp,sp,-12
    cb7c:	dfc00215 	stw	ra,8(sp)
    cb80:	df000115 	stw	fp,4(sp)
    cb84:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    cb88:	00800074 	movhi	r2,1
    cb8c:	10b66504 	addi	r2,r2,-9836
    cb90:	e0bfff15 	stw	r2,-4(fp)
    cb94:	00000606 	br	cbb0 <_do_dtors+0x38>
        (*dtor) (); 
    cb98:	e0bfff17 	ldw	r2,-4(fp)
    cb9c:	10800017 	ldw	r2,0(r2)
    cba0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    cba4:	e0bfff17 	ldw	r2,-4(fp)
    cba8:	10bfff04 	addi	r2,r2,-4
    cbac:	e0bfff15 	stw	r2,-4(fp)
    cbb0:	e0ffff17 	ldw	r3,-4(fp)
    cbb4:	00800074 	movhi	r2,1
    cbb8:	10b66604 	addi	r2,r2,-9832
    cbbc:	18bff62e 	bgeu	r3,r2,cb98 <_do_dtors+0x20>
        (*dtor) (); 
}
    cbc0:	e037883a 	mov	sp,fp
    cbc4:	dfc00117 	ldw	ra,4(sp)
    cbc8:	df000017 	ldw	fp,0(sp)
    cbcc:	dec00204 	addi	sp,sp,8
    cbd0:	f800283a 	ret

0000cbd4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    cbd4:	defffa04 	addi	sp,sp,-24
    cbd8:	dfc00515 	stw	ra,20(sp)
    cbdc:	df000415 	stw	fp,16(sp)
    cbe0:	df000404 	addi	fp,sp,16
    cbe4:	e13ffe15 	stw	r4,-8(fp)
    cbe8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    cbec:	e0bfff17 	ldw	r2,-4(fp)
    cbf0:	10800017 	ldw	r2,0(r2)
    cbf4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    cbf8:	e13ffe17 	ldw	r4,-8(fp)
    cbfc:	00086e80 	call	86e8 <strlen>
    cc00:	10800044 	addi	r2,r2,1
    cc04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    cc08:	00000d06 	br	cc40 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    cc0c:	e0bffc17 	ldw	r2,-16(fp)
    cc10:	10c00217 	ldw	r3,8(r2)
    cc14:	e0bffd17 	ldw	r2,-12(fp)
    cc18:	1809883a 	mov	r4,r3
    cc1c:	e17ffe17 	ldw	r5,-8(fp)
    cc20:	100d883a 	mov	r6,r2
    cc24:	000d6100 	call	d610 <memcmp>
    cc28:	1000021e 	bne	r2,zero,cc34 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    cc2c:	e0bffc17 	ldw	r2,-16(fp)
    cc30:	00000706 	br	cc50 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    cc34:	e0bffc17 	ldw	r2,-16(fp)
    cc38:	10800017 	ldw	r2,0(r2)
    cc3c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    cc40:	e0fffc17 	ldw	r3,-16(fp)
    cc44:	e0bfff17 	ldw	r2,-4(fp)
    cc48:	18bff01e 	bne	r3,r2,cc0c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    cc4c:	0005883a 	mov	r2,zero
}
    cc50:	e037883a 	mov	sp,fp
    cc54:	dfc00117 	ldw	ra,4(sp)
    cc58:	df000017 	ldw	fp,0(sp)
    cc5c:	dec00204 	addi	sp,sp,8
    cc60:	f800283a 	ret

0000cc64 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    cc64:	deffff04 	addi	sp,sp,-4
    cc68:	df000015 	stw	fp,0(sp)
    cc6c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    cc70:	e037883a 	mov	sp,fp
    cc74:	df000017 	ldw	fp,0(sp)
    cc78:	dec00104 	addi	sp,sp,4
    cc7c:	f800283a 	ret

0000cc80 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    cc80:	defff804 	addi	sp,sp,-32
    cc84:	dfc00715 	stw	ra,28(sp)
    cc88:	df000615 	stw	fp,24(sp)
    cc8c:	dc000515 	stw	r16,20(sp)
    cc90:	df000504 	addi	fp,sp,20
    cc94:	e13ffc15 	stw	r4,-16(fp)
    cc98:	e17ffd15 	stw	r5,-12(fp)
    cc9c:	e1bffe15 	stw	r6,-8(fp)
    cca0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    cca4:	e13ffd17 	ldw	r4,-12(fp)
    cca8:	e17ffe17 	ldw	r5,-8(fp)
    ccac:	e1bfff17 	ldw	r6,-4(fp)
    ccb0:	000d0c80 	call	d0c8 <open>
    ccb4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    ccb8:	e0bffb17 	ldw	r2,-20(fp)
    ccbc:	10002216 	blt	r2,zero,cd48 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    ccc0:	04000074 	movhi	r16,1
    ccc4:	84399604 	addi	r16,r16,-6568
    ccc8:	e0bffb17 	ldw	r2,-20(fp)
    cccc:	1009883a 	mov	r4,r2
    ccd0:	01400304 	movi	r5,12
    ccd4:	000a8440 	call	a844 <__mulsi3>
    ccd8:	8085883a 	add	r2,r16,r2
    ccdc:	10c00017 	ldw	r3,0(r2)
    cce0:	e0bffc17 	ldw	r2,-16(fp)
    cce4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    cce8:	04000074 	movhi	r16,1
    ccec:	84399604 	addi	r16,r16,-6568
    ccf0:	e0bffb17 	ldw	r2,-20(fp)
    ccf4:	1009883a 	mov	r4,r2
    ccf8:	01400304 	movi	r5,12
    ccfc:	000a8440 	call	a844 <__mulsi3>
    cd00:	8085883a 	add	r2,r16,r2
    cd04:	10800104 	addi	r2,r2,4
    cd08:	10c00017 	ldw	r3,0(r2)
    cd0c:	e0bffc17 	ldw	r2,-16(fp)
    cd10:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    cd14:	04000074 	movhi	r16,1
    cd18:	84399604 	addi	r16,r16,-6568
    cd1c:	e0bffb17 	ldw	r2,-20(fp)
    cd20:	1009883a 	mov	r4,r2
    cd24:	01400304 	movi	r5,12
    cd28:	000a8440 	call	a844 <__mulsi3>
    cd2c:	8085883a 	add	r2,r16,r2
    cd30:	10800204 	addi	r2,r2,8
    cd34:	10c00017 	ldw	r3,0(r2)
    cd38:	e0bffc17 	ldw	r2,-16(fp)
    cd3c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    cd40:	e13ffb17 	ldw	r4,-20(fp)
    cd44:	000b5f00 	call	b5f0 <alt_release_fd>
  }
} 
    cd48:	e037883a 	mov	sp,fp
    cd4c:	dfc00217 	ldw	ra,8(sp)
    cd50:	df000117 	ldw	fp,4(sp)
    cd54:	dc000017 	ldw	r16,0(sp)
    cd58:	dec00304 	addi	sp,sp,12
    cd5c:	f800283a 	ret

0000cd60 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    cd60:	defffb04 	addi	sp,sp,-20
    cd64:	dfc00415 	stw	ra,16(sp)
    cd68:	df000315 	stw	fp,12(sp)
    cd6c:	df000304 	addi	fp,sp,12
    cd70:	e13ffd15 	stw	r4,-12(fp)
    cd74:	e17ffe15 	stw	r5,-8(fp)
    cd78:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    cd7c:	01000074 	movhi	r4,1
    cd80:	21399904 	addi	r4,r4,-6556
    cd84:	e17ffd17 	ldw	r5,-12(fp)
    cd88:	01800044 	movi	r6,1
    cd8c:	01c07fc4 	movi	r7,511
    cd90:	000cc800 	call	cc80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    cd94:	01000074 	movhi	r4,1
    cd98:	21399604 	addi	r4,r4,-6568
    cd9c:	e17ffe17 	ldw	r5,-8(fp)
    cda0:	000d883a 	mov	r6,zero
    cda4:	01c07fc4 	movi	r7,511
    cda8:	000cc800 	call	cc80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    cdac:	01000074 	movhi	r4,1
    cdb0:	21399c04 	addi	r4,r4,-6544
    cdb4:	e17fff17 	ldw	r5,-4(fp)
    cdb8:	01800044 	movi	r6,1
    cdbc:	01c07fc4 	movi	r7,511
    cdc0:	000cc800 	call	cc80 <alt_open_fd>
}  
    cdc4:	e037883a 	mov	sp,fp
    cdc8:	dfc00117 	ldw	ra,4(sp)
    cdcc:	df000017 	ldw	fp,0(sp)
    cdd0:	dec00204 	addi	sp,sp,8
    cdd4:	f800283a 	ret

0000cdd8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    cdd8:	defff004 	addi	sp,sp,-64
    cddc:	df000f15 	stw	fp,60(sp)
    cde0:	df000f04 	addi	fp,sp,60
    cde4:	e13ffd15 	stw	r4,-12(fp)
    cde8:	e17ffe15 	stw	r5,-8(fp)
    cdec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    cdf0:	00bffa84 	movi	r2,-22
    cdf4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    cdf8:	e0bffd17 	ldw	r2,-12(fp)
    cdfc:	10800828 	cmpgeui	r2,r2,32
    ce00:	10005c1e 	bne	r2,zero,cf74 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ce04:	0005303a 	rdctl	r2,status
    ce08:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ce0c:	e0fff317 	ldw	r3,-52(fp)
    ce10:	00bfff84 	movi	r2,-2
    ce14:	1884703a 	and	r2,r3,r2
    ce18:	1001703a 	wrctl	status,r2
  
  return context;
    ce1c:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    ce20:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
    ce24:	00c00074 	movhi	r3,1
    ce28:	18c61a04 	addi	r3,r3,6248
    ce2c:	e0bffd17 	ldw	r2,-12(fp)
    ce30:	100490fa 	slli	r2,r2,3
    ce34:	1885883a 	add	r2,r3,r2
    ce38:	e0ffff17 	ldw	r3,-4(fp)
    ce3c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    ce40:	00c00074 	movhi	r3,1
    ce44:	18c61a04 	addi	r3,r3,6248
    ce48:	e0bffd17 	ldw	r2,-12(fp)
    ce4c:	100490fa 	slli	r2,r2,3
    ce50:	1885883a 	add	r2,r3,r2
    ce54:	10800104 	addi	r2,r2,4
    ce58:	e0fffe17 	ldw	r3,-8(fp)
    ce5c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    ce60:	e0bfff17 	ldw	r2,-4(fp)
    ce64:	10001f26 	beq	r2,zero,cee4 <alt_irq_register+0x10c>
    ce68:	e0bffd17 	ldw	r2,-12(fp)
    ce6c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ce70:	0005303a 	rdctl	r2,status
    ce74:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ce78:	e0fff517 	ldw	r3,-44(fp)
    ce7c:	00bfff84 	movi	r2,-2
    ce80:	1884703a 	and	r2,r3,r2
    ce84:	1001703a 	wrctl	status,r2
  
  return context;
    ce88:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ce8c:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
    ce90:	e0bff417 	ldw	r2,-48(fp)
    ce94:	00c00044 	movi	r3,1
    ce98:	1884983a 	sll	r2,r3,r2
    ce9c:	1007883a 	mov	r3,r2
    cea0:	00800074 	movhi	r2,1
    cea4:	10860d04 	addi	r2,r2,6196
    cea8:	10800017 	ldw	r2,0(r2)
    ceac:	1886b03a 	or	r3,r3,r2
    ceb0:	00800074 	movhi	r2,1
    ceb4:	10860d04 	addi	r2,r2,6196
    ceb8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cebc:	00800074 	movhi	r2,1
    cec0:	10860d04 	addi	r2,r2,6196
    cec4:	10800017 	ldw	r2,0(r2)
    cec8:	100170fa 	wrctl	ienable,r2
    cecc:	e0bff617 	ldw	r2,-40(fp)
    ced0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ced4:	e0bff717 	ldw	r2,-36(fp)
    ced8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    cedc:	0005883a 	mov	r2,zero
    cee0:	00001f06 	br	cf60 <alt_irq_register+0x188>
    cee4:	e0bffd17 	ldw	r2,-12(fp)
    cee8:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ceec:	0005303a 	rdctl	r2,status
    cef0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cef4:	e0fff917 	ldw	r3,-28(fp)
    cef8:	00bfff84 	movi	r2,-2
    cefc:	1884703a 	and	r2,r3,r2
    cf00:	1001703a 	wrctl	status,r2
  
  return context;
    cf04:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    cf08:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
    cf0c:	e0bff817 	ldw	r2,-32(fp)
    cf10:	00c00044 	movi	r3,1
    cf14:	1884983a 	sll	r2,r3,r2
    cf18:	0084303a 	nor	r2,zero,r2
    cf1c:	1007883a 	mov	r3,r2
    cf20:	00800074 	movhi	r2,1
    cf24:	10860d04 	addi	r2,r2,6196
    cf28:	10800017 	ldw	r2,0(r2)
    cf2c:	1886703a 	and	r3,r3,r2
    cf30:	00800074 	movhi	r2,1
    cf34:	10860d04 	addi	r2,r2,6196
    cf38:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cf3c:	00800074 	movhi	r2,1
    cf40:	10860d04 	addi	r2,r2,6196
    cf44:	10800017 	ldw	r2,0(r2)
    cf48:	100170fa 	wrctl	ienable,r2
    cf4c:	e0bffa17 	ldw	r2,-24(fp)
    cf50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cf54:	e0bffb17 	ldw	r2,-20(fp)
    cf58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    cf5c:	0005883a 	mov	r2,zero
    cf60:	e0bff115 	stw	r2,-60(fp)
    cf64:	e0bff217 	ldw	r2,-56(fp)
    cf68:	e0bffc15 	stw	r2,-16(fp)
    cf6c:	e0bffc17 	ldw	r2,-16(fp)
    cf70:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    cf74:	e0bff117 	ldw	r2,-60(fp)
}
    cf78:	e037883a 	mov	sp,fp
    cf7c:	df000017 	ldw	fp,0(sp)
    cf80:	dec00104 	addi	sp,sp,4
    cf84:	f800283a 	ret

0000cf88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cf88:	defffe04 	addi	sp,sp,-8
    cf8c:	dfc00115 	stw	ra,4(sp)
    cf90:	df000015 	stw	fp,0(sp)
    cf94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cf98:	00800074 	movhi	r2,1
    cf9c:	10bebe04 	addi	r2,r2,-1288
    cfa0:	10800017 	ldw	r2,0(r2)
    cfa4:	10000526 	beq	r2,zero,cfbc <alt_get_errno+0x34>
    cfa8:	00800074 	movhi	r2,1
    cfac:	10bebe04 	addi	r2,r2,-1288
    cfb0:	10800017 	ldw	r2,0(r2)
    cfb4:	103ee83a 	callr	r2
    cfb8:	00000206 	br	cfc4 <alt_get_errno+0x3c>
    cfbc:	00800074 	movhi	r2,1
    cfc0:	10860904 	addi	r2,r2,6180
}
    cfc4:	e037883a 	mov	sp,fp
    cfc8:	dfc00117 	ldw	ra,4(sp)
    cfcc:	df000017 	ldw	fp,0(sp)
    cfd0:	dec00204 	addi	sp,sp,8
    cfd4:	f800283a 	ret

0000cfd8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    cfd8:	defffb04 	addi	sp,sp,-20
    cfdc:	dfc00415 	stw	ra,16(sp)
    cfe0:	df000315 	stw	fp,12(sp)
    cfe4:	dc000215 	stw	r16,8(sp)
    cfe8:	df000204 	addi	fp,sp,8
    cfec:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    cff0:	e0bfff17 	ldw	r2,-4(fp)
    cff4:	10800217 	ldw	r2,8(r2)
    cff8:	10d00034 	orhi	r3,r2,16384
    cffc:	e0bfff17 	ldw	r2,-4(fp)
    d000:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d004:	e03ffe15 	stw	zero,-8(fp)
    d008:	00002206 	br	d094 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d00c:	04000074 	movhi	r16,1
    d010:	84399604 	addi	r16,r16,-6568
    d014:	e0bffe17 	ldw	r2,-8(fp)
    d018:	1009883a 	mov	r4,r2
    d01c:	01400304 	movi	r5,12
    d020:	000a8440 	call	a844 <__mulsi3>
    d024:	8085883a 	add	r2,r16,r2
    d028:	10c00017 	ldw	r3,0(r2)
    d02c:	e0bfff17 	ldw	r2,-4(fp)
    d030:	10800017 	ldw	r2,0(r2)
    d034:	1880141e 	bne	r3,r2,d088 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    d038:	04000074 	movhi	r16,1
    d03c:	84399604 	addi	r16,r16,-6568
    d040:	e0bffe17 	ldw	r2,-8(fp)
    d044:	1009883a 	mov	r4,r2
    d048:	01400304 	movi	r5,12
    d04c:	000a8440 	call	a844 <__mulsi3>
    d050:	8085883a 	add	r2,r16,r2
    d054:	10800204 	addi	r2,r2,8
    d058:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d05c:	10000a0e 	bge	r2,zero,d088 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    d060:	e13ffe17 	ldw	r4,-8(fp)
    d064:	01400304 	movi	r5,12
    d068:	000a8440 	call	a844 <__mulsi3>
    d06c:	00c00074 	movhi	r3,1
    d070:	18f99604 	addi	r3,r3,-6568
    d074:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    d078:	e0bfff17 	ldw	r2,-4(fp)
    d07c:	18800226 	beq	r3,r2,d088 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    d080:	00bffcc4 	movi	r2,-13
    d084:	00000a06 	br	d0b0 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d088:	e0bffe17 	ldw	r2,-8(fp)
    d08c:	10800044 	addi	r2,r2,1
    d090:	e0bffe15 	stw	r2,-8(fp)
    d094:	00800074 	movhi	r2,1
    d098:	10bebd04 	addi	r2,r2,-1292
    d09c:	10800017 	ldw	r2,0(r2)
    d0a0:	1007883a 	mov	r3,r2
    d0a4:	e0bffe17 	ldw	r2,-8(fp)
    d0a8:	18bfd82e 	bgeu	r3,r2,d00c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    d0ac:	0005883a 	mov	r2,zero
}
    d0b0:	e037883a 	mov	sp,fp
    d0b4:	dfc00217 	ldw	ra,8(sp)
    d0b8:	df000117 	ldw	fp,4(sp)
    d0bc:	dc000017 	ldw	r16,0(sp)
    d0c0:	dec00304 	addi	sp,sp,12
    d0c4:	f800283a 	ret

0000d0c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    d0c8:	defff604 	addi	sp,sp,-40
    d0cc:	dfc00915 	stw	ra,36(sp)
    d0d0:	df000815 	stw	fp,32(sp)
    d0d4:	df000804 	addi	fp,sp,32
    d0d8:	e13ffd15 	stw	r4,-12(fp)
    d0dc:	e17ffe15 	stw	r5,-8(fp)
    d0e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    d0e4:	00bfffc4 	movi	r2,-1
    d0e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    d0ec:	00bffb44 	movi	r2,-19
    d0f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    d0f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    d0f8:	e13ffd17 	ldw	r4,-12(fp)
    d0fc:	01400074 	movhi	r5,1
    d100:	297ebb04 	addi	r5,r5,-1300
    d104:	000cbd40 	call	cbd4 <alt_find_dev>
    d108:	e0bff815 	stw	r2,-32(fp)
    d10c:	e0bff817 	ldw	r2,-32(fp)
    d110:	1000051e 	bne	r2,zero,d128 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    d114:	e13ffd17 	ldw	r4,-12(fp)
    d118:	000d3dc0 	call	d3dc <alt_find_file>
    d11c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    d120:	00800044 	movi	r2,1
    d124:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    d128:	e0bff817 	ldw	r2,-32(fp)
    d12c:	10002a26 	beq	r2,zero,d1d8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    d130:	e13ff817 	ldw	r4,-32(fp)
    d134:	000d4f00 	call	d4f0 <alt_get_fd>
    d138:	e0bff915 	stw	r2,-28(fp)
    d13c:	e0bff917 	ldw	r2,-28(fp)
    d140:	1000030e 	bge	r2,zero,d150 <open+0x88>
    {
      status = index;
    d144:	e0bff917 	ldw	r2,-28(fp)
    d148:	e0bffa15 	stw	r2,-24(fp)
    d14c:	00002406 	br	d1e0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    d150:	e13ff917 	ldw	r4,-28(fp)
    d154:	01400304 	movi	r5,12
    d158:	000a8440 	call	a844 <__mulsi3>
    d15c:	00c00074 	movhi	r3,1
    d160:	18f99604 	addi	r3,r3,-6568
    d164:	10c5883a 	add	r2,r2,r3
    d168:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    d16c:	e0fffe17 	ldw	r3,-8(fp)
    d170:	00900034 	movhi	r2,16384
    d174:	10bfffc4 	addi	r2,r2,-1
    d178:	1886703a 	and	r3,r3,r2
    d17c:	e0bffc17 	ldw	r2,-16(fp)
    d180:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    d184:	e0bffb17 	ldw	r2,-20(fp)
    d188:	1000051e 	bne	r2,zero,d1a0 <open+0xd8>
    d18c:	e13ffc17 	ldw	r4,-16(fp)
    d190:	000cfd80 	call	cfd8 <alt_file_locked>
    d194:	e0bffa15 	stw	r2,-24(fp)
    d198:	e0bffa17 	ldw	r2,-24(fp)
    d19c:	10001016 	blt	r2,zero,d1e0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    d1a0:	e0bff817 	ldw	r2,-32(fp)
    d1a4:	10800317 	ldw	r2,12(r2)
    d1a8:	10000826 	beq	r2,zero,d1cc <open+0x104>
    d1ac:	e0bff817 	ldw	r2,-32(fp)
    d1b0:	10800317 	ldw	r2,12(r2)
    d1b4:	e13ffc17 	ldw	r4,-16(fp)
    d1b8:	e17ffd17 	ldw	r5,-12(fp)
    d1bc:	e1bffe17 	ldw	r6,-8(fp)
    d1c0:	e1ffff17 	ldw	r7,-4(fp)
    d1c4:	103ee83a 	callr	r2
    d1c8:	00000106 	br	d1d0 <open+0x108>
    d1cc:	0005883a 	mov	r2,zero
    d1d0:	e0bffa15 	stw	r2,-24(fp)
    d1d4:	00000206 	br	d1e0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    d1d8:	00bffb44 	movi	r2,-19
    d1dc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    d1e0:	e0bffa17 	ldw	r2,-24(fp)
    d1e4:	1000080e 	bge	r2,zero,d208 <open+0x140>
  {
    alt_release_fd (index);  
    d1e8:	e13ff917 	ldw	r4,-28(fp)
    d1ec:	000b5f00 	call	b5f0 <alt_release_fd>
    ALT_ERRNO = -status;
    d1f0:	000cf880 	call	cf88 <alt_get_errno>
    d1f4:	e0fffa17 	ldw	r3,-24(fp)
    d1f8:	00c7c83a 	sub	r3,zero,r3
    d1fc:	10c00015 	stw	r3,0(r2)
    return -1;
    d200:	00bfffc4 	movi	r2,-1
    d204:	00000106 	br	d20c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    d208:	e0bff917 	ldw	r2,-28(fp)
}
    d20c:	e037883a 	mov	sp,fp
    d210:	dfc00117 	ldw	ra,4(sp)
    d214:	df000017 	ldw	fp,0(sp)
    d218:	dec00204 	addi	sp,sp,8
    d21c:	f800283a 	ret

0000d220 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    d220:	defffa04 	addi	sp,sp,-24
    d224:	df000515 	stw	fp,20(sp)
    d228:	df000504 	addi	fp,sp,20
    d22c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d230:	0005303a 	rdctl	r2,status
    d234:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d238:	e0fffc17 	ldw	r3,-16(fp)
    d23c:	00bfff84 	movi	r2,-2
    d240:	1884703a 	and	r2,r3,r2
    d244:	1001703a 	wrctl	status,r2
  
  return context;
    d248:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    d24c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    d250:	e0bfff17 	ldw	r2,-4(fp)
    d254:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    d258:	e0bffd17 	ldw	r2,-12(fp)
    d25c:	10800017 	ldw	r2,0(r2)
    d260:	e0fffd17 	ldw	r3,-12(fp)
    d264:	18c00117 	ldw	r3,4(r3)
    d268:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    d26c:	e0bffd17 	ldw	r2,-12(fp)
    d270:	10800117 	ldw	r2,4(r2)
    d274:	e0fffd17 	ldw	r3,-12(fp)
    d278:	18c00017 	ldw	r3,0(r3)
    d27c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    d280:	e0bffd17 	ldw	r2,-12(fp)
    d284:	e0fffd17 	ldw	r3,-12(fp)
    d288:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    d28c:	e0bffd17 	ldw	r2,-12(fp)
    d290:	e0fffd17 	ldw	r3,-12(fp)
    d294:	10c00015 	stw	r3,0(r2)
    d298:	e0bffb17 	ldw	r2,-20(fp)
    d29c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d2a0:	e0bffe17 	ldw	r2,-8(fp)
    d2a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    d2a8:	e037883a 	mov	sp,fp
    d2ac:	df000017 	ldw	fp,0(sp)
    d2b0:	dec00104 	addi	sp,sp,4
    d2b4:	f800283a 	ret

0000d2b8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    d2b8:	defffb04 	addi	sp,sp,-20
    d2bc:	dfc00415 	stw	ra,16(sp)
    d2c0:	df000315 	stw	fp,12(sp)
    d2c4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    d2c8:	d0a00e17 	ldw	r2,-32712(gp)
    d2cc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    d2d0:	d0a75c17 	ldw	r2,-25232(gp)
    d2d4:	10800044 	addi	r2,r2,1
    d2d8:	d0a75c15 	stw	r2,-25232(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d2dc:	00002e06 	br	d398 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    d2e0:	e0bffd17 	ldw	r2,-12(fp)
    d2e4:	10800017 	ldw	r2,0(r2)
    d2e8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    d2ec:	e0bffd17 	ldw	r2,-12(fp)
    d2f0:	10800403 	ldbu	r2,16(r2)
    d2f4:	10803fcc 	andi	r2,r2,255
    d2f8:	10000426 	beq	r2,zero,d30c <alt_tick+0x54>
    d2fc:	d0a75c17 	ldw	r2,-25232(gp)
    d300:	1000021e 	bne	r2,zero,d30c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    d304:	e0bffd17 	ldw	r2,-12(fp)
    d308:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    d30c:	e0bffd17 	ldw	r2,-12(fp)
    d310:	10800217 	ldw	r2,8(r2)
    d314:	d0e75c17 	ldw	r3,-25232(gp)
    d318:	18801d36 	bltu	r3,r2,d390 <alt_tick+0xd8>
    d31c:	e0bffd17 	ldw	r2,-12(fp)
    d320:	10800403 	ldbu	r2,16(r2)
    d324:	10803fcc 	andi	r2,r2,255
    d328:	1000191e 	bne	r2,zero,d390 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    d32c:	e0bffd17 	ldw	r2,-12(fp)
    d330:	10c00317 	ldw	r3,12(r2)
    d334:	e0bffd17 	ldw	r2,-12(fp)
    d338:	10800517 	ldw	r2,20(r2)
    d33c:	1009883a 	mov	r4,r2
    d340:	183ee83a 	callr	r3
    d344:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    d348:	e0bfff17 	ldw	r2,-4(fp)
    d34c:	1000031e 	bne	r2,zero,d35c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    d350:	e13ffd17 	ldw	r4,-12(fp)
    d354:	000d2200 	call	d220 <alt_alarm_stop>
    d358:	00000d06 	br	d390 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    d35c:	e0bffd17 	ldw	r2,-12(fp)
    d360:	10c00217 	ldw	r3,8(r2)
    d364:	e0bfff17 	ldw	r2,-4(fp)
    d368:	1887883a 	add	r3,r3,r2
    d36c:	e0bffd17 	ldw	r2,-12(fp)
    d370:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    d374:	e0bffd17 	ldw	r2,-12(fp)
    d378:	10c00217 	ldw	r3,8(r2)
    d37c:	d0a75c17 	ldw	r2,-25232(gp)
    d380:	1880032e 	bgeu	r3,r2,d390 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    d384:	e0bffd17 	ldw	r2,-12(fp)
    d388:	00c00044 	movi	r3,1
    d38c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    d390:	e0bffe17 	ldw	r2,-8(fp)
    d394:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d398:	e0fffd17 	ldw	r3,-12(fp)
    d39c:	d0a00e04 	addi	r2,gp,-32712
    d3a0:	18bfcf1e 	bne	r3,r2,d2e0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    d3a4:	0001883a 	nop
}
    d3a8:	e037883a 	mov	sp,fp
    d3ac:	dfc00117 	ldw	ra,4(sp)
    d3b0:	df000017 	ldw	fp,0(sp)
    d3b4:	dec00204 	addi	sp,sp,8
    d3b8:	f800283a 	ret

0000d3bc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    d3bc:	deffff04 	addi	sp,sp,-4
    d3c0:	df000015 	stw	fp,0(sp)
    d3c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    d3c8:	000170fa 	wrctl	ienable,zero
}
    d3cc:	e037883a 	mov	sp,fp
    d3d0:	df000017 	ldw	fp,0(sp)
    d3d4:	dec00104 	addi	sp,sp,4
    d3d8:	f800283a 	ret

0000d3dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    d3dc:	defffb04 	addi	sp,sp,-20
    d3e0:	dfc00415 	stw	ra,16(sp)
    d3e4:	df000315 	stw	fp,12(sp)
    d3e8:	df000304 	addi	fp,sp,12
    d3ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    d3f0:	00800074 	movhi	r2,1
    d3f4:	10beb904 	addi	r2,r2,-1308
    d3f8:	10800017 	ldw	r2,0(r2)
    d3fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d400:	00003106 	br	d4c8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    d404:	e0bffd17 	ldw	r2,-12(fp)
    d408:	10800217 	ldw	r2,8(r2)
    d40c:	1009883a 	mov	r4,r2
    d410:	00086e80 	call	86e8 <strlen>
    d414:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    d418:	e0bffd17 	ldw	r2,-12(fp)
    d41c:	10c00217 	ldw	r3,8(r2)
    d420:	e0bffe17 	ldw	r2,-8(fp)
    d424:	10bfffc4 	addi	r2,r2,-1
    d428:	1885883a 	add	r2,r3,r2
    d42c:	10800003 	ldbu	r2,0(r2)
    d430:	10803fcc 	andi	r2,r2,255
    d434:	1080201c 	xori	r2,r2,128
    d438:	10bfe004 	addi	r2,r2,-128
    d43c:	10800bd8 	cmpnei	r2,r2,47
    d440:	1000031e 	bne	r2,zero,d450 <alt_find_file+0x74>
    {
      len -= 1;
    d444:	e0bffe17 	ldw	r2,-8(fp)
    d448:	10bfffc4 	addi	r2,r2,-1
    d44c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    d450:	e0bffe17 	ldw	r2,-8(fp)
    d454:	e0ffff17 	ldw	r3,-4(fp)
    d458:	1885883a 	add	r2,r3,r2
    d45c:	10800003 	ldbu	r2,0(r2)
    d460:	10803fcc 	andi	r2,r2,255
    d464:	1080201c 	xori	r2,r2,128
    d468:	10bfe004 	addi	r2,r2,-128
    d46c:	10800be0 	cmpeqi	r2,r2,47
    d470:	1000081e 	bne	r2,zero,d494 <alt_find_file+0xb8>
    d474:	e0bffe17 	ldw	r2,-8(fp)
    d478:	e0ffff17 	ldw	r3,-4(fp)
    d47c:	1885883a 	add	r2,r3,r2
    d480:	10800003 	ldbu	r2,0(r2)
    d484:	10803fcc 	andi	r2,r2,255
    d488:	1080201c 	xori	r2,r2,128
    d48c:	10bfe004 	addi	r2,r2,-128
    d490:	10000a1e 	bne	r2,zero,d4bc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    d494:	e0bffd17 	ldw	r2,-12(fp)
    d498:	10c00217 	ldw	r3,8(r2)
    d49c:	e0bffe17 	ldw	r2,-8(fp)
    d4a0:	1809883a 	mov	r4,r3
    d4a4:	e17fff17 	ldw	r5,-4(fp)
    d4a8:	100d883a 	mov	r6,r2
    d4ac:	000d6100 	call	d610 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    d4b0:	1000021e 	bne	r2,zero,d4bc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    d4b4:	e0bffd17 	ldw	r2,-12(fp)
    d4b8:	00000806 	br	d4dc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    d4bc:	e0bffd17 	ldw	r2,-12(fp)
    d4c0:	10800017 	ldw	r2,0(r2)
    d4c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d4c8:	e0fffd17 	ldw	r3,-12(fp)
    d4cc:	00800074 	movhi	r2,1
    d4d0:	10beb904 	addi	r2,r2,-1308
    d4d4:	18bfcb1e 	bne	r3,r2,d404 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    d4d8:	0005883a 	mov	r2,zero
}
    d4dc:	e037883a 	mov	sp,fp
    d4e0:	dfc00117 	ldw	ra,4(sp)
    d4e4:	df000017 	ldw	fp,0(sp)
    d4e8:	dec00204 	addi	sp,sp,8
    d4ec:	f800283a 	ret

0000d4f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    d4f0:	defffa04 	addi	sp,sp,-24
    d4f4:	dfc00515 	stw	ra,20(sp)
    d4f8:	df000415 	stw	fp,16(sp)
    d4fc:	dc000315 	stw	r16,12(sp)
    d500:	df000304 	addi	fp,sp,12
    d504:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    d508:	00bffa04 	movi	r2,-24
    d50c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d510:	e03ffd15 	stw	zero,-12(fp)
    d514:	00002106 	br	d59c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    d518:	04000074 	movhi	r16,1
    d51c:	84399604 	addi	r16,r16,-6568
    d520:	e0bffd17 	ldw	r2,-12(fp)
    d524:	1009883a 	mov	r4,r2
    d528:	01400304 	movi	r5,12
    d52c:	000a8440 	call	a844 <__mulsi3>
    d530:	8085883a 	add	r2,r16,r2
    d534:	10800017 	ldw	r2,0(r2)
    d538:	1000151e 	bne	r2,zero,d590 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    d53c:	04000074 	movhi	r16,1
    d540:	84399604 	addi	r16,r16,-6568
    d544:	e0bffd17 	ldw	r2,-12(fp)
    d548:	1009883a 	mov	r4,r2
    d54c:	01400304 	movi	r5,12
    d550:	000a8440 	call	a844 <__mulsi3>
    d554:	8085883a 	add	r2,r16,r2
    d558:	e0ffff17 	ldw	r3,-4(fp)
    d55c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    d560:	00800074 	movhi	r2,1
    d564:	10bebd04 	addi	r2,r2,-1292
    d568:	10c00017 	ldw	r3,0(r2)
    d56c:	e0bffd17 	ldw	r2,-12(fp)
    d570:	1880040e 	bge	r3,r2,d584 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    d574:	00800074 	movhi	r2,1
    d578:	10bebd04 	addi	r2,r2,-1292
    d57c:	e0fffd17 	ldw	r3,-12(fp)
    d580:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    d584:	e0bffd17 	ldw	r2,-12(fp)
    d588:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    d58c:	00000606 	br	d5a8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d590:	e0bffd17 	ldw	r2,-12(fp)
    d594:	10800044 	addi	r2,r2,1
    d598:	e0bffd15 	stw	r2,-12(fp)
    d59c:	e0bffd17 	ldw	r2,-12(fp)
    d5a0:	10800810 	cmplti	r2,r2,32
    d5a4:	103fdc1e 	bne	r2,zero,d518 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    d5a8:	e0bffe17 	ldw	r2,-8(fp)
}
    d5ac:	e037883a 	mov	sp,fp
    d5b0:	dfc00217 	ldw	ra,8(sp)
    d5b4:	df000117 	ldw	fp,4(sp)
    d5b8:	dc000017 	ldw	r16,0(sp)
    d5bc:	dec00304 	addi	sp,sp,12
    d5c0:	f800283a 	ret

0000d5c4 <atexit>:
    d5c4:	200b883a 	mov	r5,r4
    d5c8:	000d883a 	mov	r6,zero
    d5cc:	0009883a 	mov	r4,zero
    d5d0:	000f883a 	mov	r7,zero
    d5d4:	000d68c1 	jmpi	d68c <__register_exitproc>

0000d5d8 <exit>:
    d5d8:	defffe04 	addi	sp,sp,-8
    d5dc:	000b883a 	mov	r5,zero
    d5e0:	dc000015 	stw	r16,0(sp)
    d5e4:	dfc00115 	stw	ra,4(sp)
    d5e8:	2021883a 	mov	r16,r4
    d5ec:	000d7bc0 	call	d7bc <__call_exitprocs>
    d5f0:	00800074 	movhi	r2,1
    d5f4:	10beb404 	addi	r2,r2,-1328
    d5f8:	11000017 	ldw	r4,0(r2)
    d5fc:	20800f17 	ldw	r2,60(r4)
    d600:	10000126 	beq	r2,zero,d608 <exit+0x30>
    d604:	103ee83a 	callr	r2
    d608:	8009883a 	mov	r4,r16
    d60c:	000d95c0 	call	d95c <_exit>

0000d610 <memcmp>:
    d610:	01c000c4 	movi	r7,3
    d614:	3980192e 	bgeu	r7,r6,d67c <memcmp+0x6c>
    d618:	2904b03a 	or	r2,r5,r4
    d61c:	11c4703a 	and	r2,r2,r7
    d620:	10000f26 	beq	r2,zero,d660 <memcmp+0x50>
    d624:	20c00003 	ldbu	r3,0(r4)
    d628:	28800003 	ldbu	r2,0(r5)
    d62c:	1880151e 	bne	r3,r2,d684 <memcmp+0x74>
    d630:	31bfff84 	addi	r6,r6,-2
    d634:	01ffffc4 	movi	r7,-1
    d638:	00000406 	br	d64c <memcmp+0x3c>
    d63c:	20c00003 	ldbu	r3,0(r4)
    d640:	28800003 	ldbu	r2,0(r5)
    d644:	31bfffc4 	addi	r6,r6,-1
    d648:	18800e1e 	bne	r3,r2,d684 <memcmp+0x74>
    d64c:	21000044 	addi	r4,r4,1
    d650:	29400044 	addi	r5,r5,1
    d654:	31fff91e 	bne	r6,r7,d63c <memcmp+0x2c>
    d658:	0005883a 	mov	r2,zero
    d65c:	f800283a 	ret
    d660:	20c00017 	ldw	r3,0(r4)
    d664:	28800017 	ldw	r2,0(r5)
    d668:	1880041e 	bne	r3,r2,d67c <memcmp+0x6c>
    d66c:	31bfff04 	addi	r6,r6,-4
    d670:	21000104 	addi	r4,r4,4
    d674:	29400104 	addi	r5,r5,4
    d678:	39bff936 	bltu	r7,r6,d660 <memcmp+0x50>
    d67c:	303fe91e 	bne	r6,zero,d624 <memcmp+0x14>
    d680:	003ff506 	br	d658 <memcmp+0x48>
    d684:	1885c83a 	sub	r2,r3,r2
    d688:	f800283a 	ret

0000d68c <__register_exitproc>:
    d68c:	defffa04 	addi	sp,sp,-24
    d690:	00800074 	movhi	r2,1
    d694:	10beb404 	addi	r2,r2,-1328
    d698:	dc000315 	stw	r16,12(sp)
    d69c:	14000017 	ldw	r16,0(r2)
    d6a0:	dc400415 	stw	r17,16(sp)
    d6a4:	dfc00515 	stw	ra,20(sp)
    d6a8:	80805217 	ldw	r2,328(r16)
    d6ac:	2023883a 	mov	r17,r4
    d6b0:	10003e26 	beq	r2,zero,d7ac <__register_exitproc+0x120>
    d6b4:	10c00117 	ldw	r3,4(r2)
    d6b8:	020007c4 	movi	r8,31
    d6bc:	40c0180e 	bge	r8,r3,d720 <__register_exitproc+0x94>
    d6c0:	00800034 	movhi	r2,0
    d6c4:	10800004 	addi	r2,r2,0
    d6c8:	1000061e 	bne	r2,zero,d6e4 <__register_exitproc+0x58>
    d6cc:	00bfffc4 	movi	r2,-1
    d6d0:	dfc00517 	ldw	ra,20(sp)
    d6d4:	dc400417 	ldw	r17,16(sp)
    d6d8:	dc000317 	ldw	r16,12(sp)
    d6dc:	dec00604 	addi	sp,sp,24
    d6e0:	f800283a 	ret
    d6e4:	01006404 	movi	r4,400
    d6e8:	d9400015 	stw	r5,0(sp)
    d6ec:	d9800115 	stw	r6,4(sp)
    d6f0:	d9c00215 	stw	r7,8(sp)
    d6f4:	00000000 	call	0 <__alt_mem_sdram>
    d6f8:	d9400017 	ldw	r5,0(sp)
    d6fc:	d9800117 	ldw	r6,4(sp)
    d700:	d9c00217 	ldw	r7,8(sp)
    d704:	103ff126 	beq	r2,zero,d6cc <__register_exitproc+0x40>
    d708:	80c05217 	ldw	r3,328(r16)
    d70c:	10000115 	stw	zero,4(r2)
    d710:	10c00015 	stw	r3,0(r2)
    d714:	80805215 	stw	r2,328(r16)
    d718:	10006215 	stw	zero,392(r2)
    d71c:	10006315 	stw	zero,396(r2)
    d720:	10c00117 	ldw	r3,4(r2)
    d724:	88000d1e 	bne	r17,zero,d75c <__register_exitproc+0xd0>
    d728:	19000084 	addi	r4,r3,2
    d72c:	2109883a 	add	r4,r4,r4
    d730:	18c00044 	addi	r3,r3,1
    d734:	2109883a 	add	r4,r4,r4
    d738:	1109883a 	add	r4,r2,r4
    d73c:	10c00115 	stw	r3,4(r2)
    d740:	0005883a 	mov	r2,zero
    d744:	21400015 	stw	r5,0(r4)
    d748:	dfc00517 	ldw	ra,20(sp)
    d74c:	dc400417 	ldw	r17,16(sp)
    d750:	dc000317 	ldw	r16,12(sp)
    d754:	dec00604 	addi	sp,sp,24
    d758:	f800283a 	ret
    d75c:	02400044 	movi	r9,1
    d760:	12806217 	ldw	r10,392(r2)
    d764:	48d2983a 	sll	r9,r9,r3
    d768:	19000804 	addi	r4,r3,32
    d76c:	18d1883a 	add	r8,r3,r3
    d770:	2109883a 	add	r4,r4,r4
    d774:	4211883a 	add	r8,r8,r8
    d778:	2109883a 	add	r4,r4,r4
    d77c:	1109883a 	add	r4,r2,r4
    d780:	1211883a 	add	r8,r2,r8
    d784:	5254b03a 	or	r10,r10,r9
    d788:	21c02215 	stw	r7,136(r4)
    d78c:	41802215 	stw	r6,136(r8)
    d790:	12806215 	stw	r10,392(r2)
    d794:	01000084 	movi	r4,2
    d798:	893fe31e 	bne	r17,r4,d728 <__register_exitproc+0x9c>
    d79c:	11006317 	ldw	r4,396(r2)
    d7a0:	2252b03a 	or	r9,r4,r9
    d7a4:	12406315 	stw	r9,396(r2)
    d7a8:	003fdf06 	br	d728 <__register_exitproc+0x9c>
    d7ac:	00800074 	movhi	r2,1
    d7b0:	10865a04 	addi	r2,r2,6504
    d7b4:	80805215 	stw	r2,328(r16)
    d7b8:	003fbe06 	br	d6b4 <__register_exitproc+0x28>

0000d7bc <__call_exitprocs>:
    d7bc:	00800074 	movhi	r2,1
    d7c0:	10beb404 	addi	r2,r2,-1328
    d7c4:	10800017 	ldw	r2,0(r2)
    d7c8:	defff304 	addi	sp,sp,-52
    d7cc:	df000b15 	stw	fp,44(sp)
    d7d0:	d8800015 	stw	r2,0(sp)
    d7d4:	10805204 	addi	r2,r2,328
    d7d8:	dd400815 	stw	r21,32(sp)
    d7dc:	dfc00c15 	stw	ra,48(sp)
    d7e0:	ddc00a15 	stw	r23,40(sp)
    d7e4:	dd800915 	stw	r22,36(sp)
    d7e8:	dd000715 	stw	r20,28(sp)
    d7ec:	dcc00615 	stw	r19,24(sp)
    d7f0:	dc800515 	stw	r18,20(sp)
    d7f4:	dc400415 	stw	r17,16(sp)
    d7f8:	dc000315 	stw	r16,12(sp)
    d7fc:	d9000115 	stw	r4,4(sp)
    d800:	2839883a 	mov	fp,r5
    d804:	d8800215 	stw	r2,8(sp)
    d808:	057fffc4 	movi	r21,-1
    d80c:	d8800017 	ldw	r2,0(sp)
    d810:	ddc00217 	ldw	r23,8(sp)
    d814:	14805217 	ldw	r18,328(r2)
    d818:	90001726 	beq	r18,zero,d878 <__call_exitprocs+0xbc>
    d81c:	94400117 	ldw	r17,4(r18)
    d820:	8c3fffc4 	addi	r16,r17,-1
    d824:	80001116 	blt	r16,zero,d86c <__call_exitprocs+0xb0>
    d828:	8c400044 	addi	r17,r17,1
    d82c:	8427883a 	add	r19,r16,r16
    d830:	8c63883a 	add	r17,r17,r17
    d834:	95802204 	addi	r22,r18,136
    d838:	9ce7883a 	add	r19,r19,r19
    d83c:	8c63883a 	add	r17,r17,r17
    d840:	b4e7883a 	add	r19,r22,r19
    d844:	9463883a 	add	r17,r18,r17
    d848:	e0001726 	beq	fp,zero,d8a8 <__call_exitprocs+0xec>
    d84c:	8c87c83a 	sub	r3,r17,r18
    d850:	b0c7883a 	add	r3,r22,r3
    d854:	18c01e17 	ldw	r3,120(r3)
    d858:	1f001326 	beq	r3,fp,d8a8 <__call_exitprocs+0xec>
    d85c:	843fffc4 	addi	r16,r16,-1
    d860:	9cffff04 	addi	r19,r19,-4
    d864:	8c7fff04 	addi	r17,r17,-4
    d868:	857ff71e 	bne	r16,r21,d848 <__call_exitprocs+0x8c>
    d86c:	00800034 	movhi	r2,0
    d870:	10800004 	addi	r2,r2,0
    d874:	10002a1e 	bne	r2,zero,d920 <__call_exitprocs+0x164>
    d878:	dfc00c17 	ldw	ra,48(sp)
    d87c:	df000b17 	ldw	fp,44(sp)
    d880:	ddc00a17 	ldw	r23,40(sp)
    d884:	dd800917 	ldw	r22,36(sp)
    d888:	dd400817 	ldw	r21,32(sp)
    d88c:	dd000717 	ldw	r20,28(sp)
    d890:	dcc00617 	ldw	r19,24(sp)
    d894:	dc800517 	ldw	r18,20(sp)
    d898:	dc400417 	ldw	r17,16(sp)
    d89c:	dc000317 	ldw	r16,12(sp)
    d8a0:	dec00d04 	addi	sp,sp,52
    d8a4:	f800283a 	ret
    d8a8:	91000117 	ldw	r4,4(r18)
    d8ac:	88c00017 	ldw	r3,0(r17)
    d8b0:	213fffc4 	addi	r4,r4,-1
    d8b4:	24001526 	beq	r4,r16,d90c <__call_exitprocs+0x150>
    d8b8:	88000015 	stw	zero,0(r17)
    d8bc:	183fe726 	beq	r3,zero,d85c <__call_exitprocs+0xa0>
    d8c0:	00800044 	movi	r2,1
    d8c4:	1408983a 	sll	r4,r2,r16
    d8c8:	91406217 	ldw	r5,392(r18)
    d8cc:	95000117 	ldw	r20,4(r18)
    d8d0:	214a703a 	and	r5,r4,r5
    d8d4:	28000b26 	beq	r5,zero,d904 <__call_exitprocs+0x148>
    d8d8:	91406317 	ldw	r5,396(r18)
    d8dc:	2148703a 	and	r4,r4,r5
    d8e0:	20000c1e 	bne	r4,zero,d914 <__call_exitprocs+0x158>
    d8e4:	99400017 	ldw	r5,0(r19)
    d8e8:	d9000117 	ldw	r4,4(sp)
    d8ec:	183ee83a 	callr	r3
    d8f0:	90c00117 	ldw	r3,4(r18)
    d8f4:	1d3fc51e 	bne	r3,r20,d80c <__call_exitprocs+0x50>
    d8f8:	b8c00017 	ldw	r3,0(r23)
    d8fc:	1cbfd726 	beq	r3,r18,d85c <__call_exitprocs+0xa0>
    d900:	003fc206 	br	d80c <__call_exitprocs+0x50>
    d904:	183ee83a 	callr	r3
    d908:	003ff906 	br	d8f0 <__call_exitprocs+0x134>
    d90c:	94000115 	stw	r16,4(r18)
    d910:	003fea06 	br	d8bc <__call_exitprocs+0x100>
    d914:	99000017 	ldw	r4,0(r19)
    d918:	183ee83a 	callr	r3
    d91c:	003ff406 	br	d8f0 <__call_exitprocs+0x134>
    d920:	90c00117 	ldw	r3,4(r18)
    d924:	1800071e 	bne	r3,zero,d944 <__call_exitprocs+0x188>
    d928:	90c00017 	ldw	r3,0(r18)
    d92c:	18000926 	beq	r3,zero,d954 <__call_exitprocs+0x198>
    d930:	9009883a 	mov	r4,r18
    d934:	b8c00015 	stw	r3,0(r23)
    d938:	00000000 	call	0 <__alt_mem_sdram>
    d93c:	bc800017 	ldw	r18,0(r23)
    d940:	003fb506 	br	d818 <__call_exitprocs+0x5c>
    d944:	90c00017 	ldw	r3,0(r18)
    d948:	902f883a 	mov	r23,r18
    d94c:	1825883a 	mov	r18,r3
    d950:	003fb106 	br	d818 <__call_exitprocs+0x5c>
    d954:	0007883a 	mov	r3,zero
    d958:	003ffb06 	br	d948 <__call_exitprocs+0x18c>

0000d95c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    d95c:	defffc04 	addi	sp,sp,-16
    d960:	df000315 	stw	fp,12(sp)
    d964:	df000304 	addi	fp,sp,12
    d968:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    d96c:	0001883a 	nop
    d970:	e0bfff17 	ldw	r2,-4(fp)
    d974:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    d978:	e0bffd17 	ldw	r2,-12(fp)
    d97c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    d980:	e0bffe17 	ldw	r2,-8(fp)
    d984:	10000226 	beq	r2,zero,d990 <_exit+0x34>
    ALT_SIM_FAIL();
    d988:	002af070 	cmpltui	zero,zero,43969
    d98c:	00000106 	br	d994 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    d990:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    d994:	003fff06 	br	d994 <_exit+0x38>
